
project_gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009570  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08009700  08009700  00019700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b08  08009b08  00020218  2**0
                  CONTENTS
  4 .ARM          00000000  08009b08  08009b08  00020218  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009b08  08009b08  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b08  08009b08  00019b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b0c  08009b0c  00019b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08009b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f4  20000218  08009d28  00020218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000040c  08009d28  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd11  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000022d9  00000000  00000000  0002df59  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b60  00000000  00000000  00030238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a48  00000000  00000000  00030d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bbbb  00000000  00000000  000317e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a7c2  00000000  00000000  0004d39b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009988c  00000000  00000000  00057b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f13e9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004034  00000000  00000000  000f1464  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096e8 	.word	0x080096e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	080096e8 	.word	0x080096e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000c92:	2300      	movs	r3, #0
 8000c94:	73fb      	strb	r3, [r7, #15]
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000c96:	f000 ff7b 	bl	8001b90 <GYRO_IO_Init>
  
  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000ca0:	f107 030f 	add.w	r3, r7, #15
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	2120      	movs	r1, #32
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f000 ffb7 	bl	8001c1c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 register */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8000cb8:	f107 030f 	add.w	r3, r7, #15
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2123      	movs	r1, #35	; 0x23
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f000 ffab 	bl	8001c1c <GYRO_IO_Write>
}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <L3GD20_DeInit>:
  * @brief L3GD20 De-initialization
  * @param  None
  * @retval None
  */
void L3GD20_DeInit(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  None
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
  uint8_t tmp;
  
  /* Configure the low level interface */
  GYRO_IO_Init();
 8000ce2:	f000 ff55 	bl	8001b90 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 8000ce6:	1dfb      	adds	r3, r7, #7
 8000ce8:	2201      	movs	r2, #1
 8000cea:	210f      	movs	r1, #15
 8000cec:	4618      	mov	r0, r3
 8000cee:	f000 ffc7 	bl	8001c80 <GYRO_IO_Read>
  
  /* Return the ID */
  return (uint8_t)tmp;
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	2201      	movs	r2, #1
 8000d06:	2124      	movs	r1, #36	; 0x24
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f000 ffb9 	bl	8001c80 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	71fb      	strb	r3, [r7, #7]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	2124      	movs	r1, #36	; 0x24
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 ff7c 	bl	8001c1c <GYRO_IO_Write>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <L3GD20_LowPower>:
  * @brief Set L3GD20 in low-power mode
  * @param 
  * @retval  None
  */
void L3GD20_LowPower(uint16_t InitStruct)
{  
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	4603      	mov	r3, r0
 8000d34:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	73fb      	strb	r3, [r7, #15]

  /* Write value to MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
 8000d3a:	88fb      	ldrh	r3, [r7, #6]
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	73fb      	strb	r3, [r7, #15]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8000d40:	f107 030f 	add.w	r3, r7, #15
 8000d44:	2201      	movs	r2, #1
 8000d46:	2120      	movs	r1, #32
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 ff67 	bl	8001c1c <GYRO_IO_Write>
}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <L3GD20_INT1InterruptConfig>:
  * @brief  Set L3GD20 Interrupt INT1 configuration
  * @param  Int1Config: the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b084      	sub	sp, #16
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 8000d60:	2300      	movs	r3, #0
 8000d62:	73fb      	strb	r3, [r7, #15]
 8000d64:	2300      	movs	r3, #0
 8000d66:	73bb      	strb	r3, [r7, #14]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000d68:	f107 030f 	add.w	r3, r7, #15
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2130      	movs	r1, #48	; 0x30
 8000d70:	4618      	mov	r0, r3
 8000d72:	f000 ff85 	bl	8001c80 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000d76:	f107 030e 	add.w	r3, r7, #14
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	2122      	movs	r1, #34	; 0x22
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f000 ff7e 	bl	8001c80 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 8000d84:	7bfb      	ldrb	r3, [r7, #15]
 8000d86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	73fb      	strb	r3, [r7, #15]
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 8000d8e:	88fb      	ldrh	r3, [r7, #6]
 8000d90:	b2db      	uxtb	r3, r3
 8000d92:	121b      	asrs	r3, r3, #8
 8000d94:	b25a      	sxtb	r2, r3
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	b25b      	sxtb	r3, r3
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	b25b      	sxtb	r3, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	73fb      	strb	r3, [r7, #15]
  
  ctrl3 &= 0xDF;
 8000da2:	7bbb      	ldrb	r3, [r7, #14]
 8000da4:	f023 0320 	bic.w	r3, r3, #32
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	73bb      	strb	r3, [r7, #14]
  ctrl3 |= ((uint8_t) Int1Config);   
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	7bbb      	ldrb	r3, [r7, #14]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	73bb      	strb	r3, [r7, #14]
  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 8000db8:	f107 030f 	add.w	r3, r7, #15
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	2130      	movs	r1, #48	; 0x30
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 ff2b 	bl	8001c1c <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 8000dc6:	f107 030e 	add.w	r3, r7, #14
 8000dca:	2201      	movs	r2, #1
 8000dcc:	2122      	movs	r1, #34	; 0x22
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 ff24 	bl	8001c1c <GYRO_IO_Write>
}
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000de6:	f107 030f 	add.w	r3, r7, #15
 8000dea:	2201      	movs	r2, #1
 8000dec:	2122      	movs	r1, #34	; 0x22
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 ff46 	bl	8001c80 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d10a      	bne.n	8000e10 <L3GD20_EnableIT+0x34>
  {
    tmpreg &= 0x7F;	
 8000dfa:	7bfb      	ldrb	r3, [r7, #15]
 8000dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 8000e04:	7bfb      	ldrb	r3, [r7, #15]
 8000e06:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	73fb      	strb	r3, [r7, #15]
 8000e0e:	e00c      	b.n	8000e2a <L3GD20_EnableIT+0x4e>
  }
  else if(IntSel == L3GD20_INT2)
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d109      	bne.n	8000e2a <L3GD20_EnableIT+0x4e>
  {
    tmpreg &= 0xF7;
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	f023 0308 	bic.w	r3, r3, #8
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000e2a:	f107 030f 	add.w	r3, r7, #15
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2122      	movs	r1, #34	; 0x22
 8000e32:	4618      	mov	r0, r3
 8000e34:	f000 fef2 	bl	8001c1c <GYRO_IO_Write>
}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000e4a:	f107 030f 	add.w	r3, r7, #15
 8000e4e:	2201      	movs	r2, #1
 8000e50:	2122      	movs	r1, #34	; 0x22
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 ff14 	bl	8001c80 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8000e58:	79fb      	ldrb	r3, [r7, #7]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d107      	bne.n	8000e6e <L3GD20_DisableIT+0x2e>
  {
    tmpreg &= 0x7F;	
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
 8000e68:	7bfb      	ldrb	r3, [r7, #15]
 8000e6a:	73fb      	strb	r3, [r7, #15]
 8000e6c:	e009      	b.n	8000e82 <L3GD20_DisableIT+0x42>
  }
  else if(IntSel == L3GD20_INT2)
 8000e6e:	79fb      	ldrb	r3, [r7, #7]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d106      	bne.n	8000e82 <L3GD20_DisableIT+0x42>
  {
    tmpreg &= 0xF7;
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	f023 0308 	bic.w	r3, r3, #8
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	73fb      	strb	r3, [r7, #15]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8000e82:	f107 030f 	add.w	r3, r7, #15
 8000e86:	2201      	movs	r2, #1
 8000e88:	2122      	movs	r1, #34	; 0x22
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fec6 	bl	8001c1c <GYRO_IO_Write>
}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8000ea2:	f107 030f 	add.w	r3, r7, #15
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2121      	movs	r1, #33	; 0x21
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f000 fee8 	bl	8001c80 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
 8000eb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	73fb      	strb	r3, [r7, #15]
  
  /* Configure MEMS: mode and cutoff frequency */
  tmpreg |= FilterStruct;
 8000eba:	7bfa      	ldrb	r2, [r7, #15]
 8000ebc:	79fb      	ldrb	r3, [r7, #7]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG2 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8000ec4:	f107 030f 	add.w	r3, r7, #15
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2121      	movs	r1, #33	; 0x21
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 fea5 	bl	8001c1c <GYRO_IO_Write>
}
 8000ed2:	bf00      	nop
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b084      	sub	sp, #16
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	71fb      	strb	r3, [r7, #7]
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000ee4:	f107 030f 	add.w	r3, r7, #15
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2124      	movs	r1, #36	; 0x24
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fec7 	bl	8001c80 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	f023 0310 	bic.w	r3, r3, #16
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	73fb      	strb	r3, [r7, #15]
  
  tmpreg |= HighPassFilterState;
 8000efc:	7bfa      	ldrb	r2, [r7, #15]
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	73fb      	strb	r3, [r7, #15]
  
  /* Write value to MEMS CTRL_REG5 register */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8000f06:	f107 030f 	add.w	r3, r7, #15
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2124      	movs	r1, #36	; 0x24
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fe84 	bl	8001c1c <GYRO_IO_Write>
}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData: Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float *pfData)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b08a      	sub	sp, #40	; 0x28
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint8_t tmpbuffer[6] ={0};
 8000f24:	f107 0318 	add.w	r3, r7, #24
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	809a      	strh	r2, [r3, #4]
  int16_t RawData[3] = {0};
 8000f2e:	f107 0310 	add.w	r3, r7, #16
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	809a      	strh	r2, [r3, #4]
  uint8_t tmpreg = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]
  float sensitivity = 0;
 8000f3c:	f04f 0300 	mov.w	r3, #0
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  int i =0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	623b      	str	r3, [r7, #32]
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8000f46:	f107 030f 	add.w	r3, r7, #15
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	2123      	movs	r1, #35	; 0x23
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 fe96 	bl	8001c80 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8000f54:	f107 0318 	add.w	r3, r7, #24
 8000f58:	2206      	movs	r2, #6
 8000f5a:	2128      	movs	r1, #40	; 0x28
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fe8f 	bl	8001c80 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 8000f62:	7bfb      	ldrb	r3, [r7, #15]
 8000f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d126      	bne.n	8000fba <L3GD20_ReadXYZAngRate+0x9e>
  {
    for(i=0; i<3; i++)
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
 8000f70:	e01f      	b.n	8000fb2 <L3GD20_ReadXYZAngRate+0x96>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8000f72:	6a3b      	ldr	r3, [r7, #32]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	3301      	adds	r3, #1
 8000f78:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000f7c:	4413      	add	r3, r2
 8000f7e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	6a3b      	ldr	r3, [r7, #32]
 8000f8a:	005b      	lsls	r3, r3, #1
 8000f8c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000f90:	440b      	add	r3, r1
 8000f92:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	4413      	add	r3, r2
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	b21a      	sxth	r2, r3
 8000f9e:	6a3b      	ldr	r3, [r7, #32]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8000fac:	6a3b      	ldr	r3, [r7, #32]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	623b      	str	r3, [r7, #32]
 8000fb2:	6a3b      	ldr	r3, [r7, #32]
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	dddc      	ble.n	8000f72 <L3GD20_ReadXYZAngRate+0x56>
 8000fb8:	e025      	b.n	8001006 <L3GD20_ReadXYZAngRate+0xea>
    }
  }
  else
  {
    for(i=0; i<3; i++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
 8000fbe:	e01f      	b.n	8001000 <L3GD20_ReadXYZAngRate+0xe4>
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8000fc0:	6a3b      	ldr	r3, [r7, #32]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fc8:	4413      	add	r3, r2
 8000fca:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b29a      	uxth	r2, r3
 8000fd4:	6a3b      	ldr	r3, [r7, #32]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	3301      	adds	r3, #1
 8000fda:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000fde:	440b      	add	r3, r1
 8000fe0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	4413      	add	r3, r2
 8000fe8:	b29b      	uxth	r3, r3
 8000fea:	b21a      	sxth	r2, r3
 8000fec:	6a3b      	ldr	r3, [r7, #32]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8000ff4:	440b      	add	r3, r1
 8000ff6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for(i=0; i<3; i++)
 8000ffa:	6a3b      	ldr	r3, [r7, #32]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	623b      	str	r3, [r7, #32]
 8001000:	6a3b      	ldr	r3, [r7, #32]
 8001002:	2b02      	cmp	r3, #2
 8001004:	dddc      	ble.n	8000fc0 <L3GD20_ReadXYZAngRate+0xa4>
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800100c:	2b10      	cmp	r3, #16
 800100e:	d006      	beq.n	800101e <L3GD20_ReadXYZAngRate+0x102>
 8001010:	2b20      	cmp	r3, #32
 8001012:	d007      	beq.n	8001024 <L3GD20_ReadXYZAngRate+0x108>
 8001014:	2b00      	cmp	r3, #0
 8001016:	d108      	bne.n	800102a <L3GD20_ReadXYZAngRate+0x10e>
  {
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <L3GD20_ReadXYZAngRate+0x154>)
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 800101c:	e005      	b.n	800102a <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <L3GD20_ReadXYZAngRate+0x158>)
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001022:	e002      	b.n	800102a <L3GD20_ReadXYZAngRate+0x10e>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8001024:	4b14      	ldr	r3, [pc, #80]	; (8001078 <L3GD20_ReadXYZAngRate+0x15c>)
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    break;
 8001028:	bf00      	nop
  }
  /* Divide by sensitivity */
  for(i=0; i<3; i++)
 800102a:	2300      	movs	r3, #0
 800102c:	623b      	str	r3, [r7, #32]
 800102e:	e017      	b.n	8001060 <L3GD20_ReadXYZAngRate+0x144>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001038:	4413      	add	r3, r2
 800103a:	f933 3c18 	ldrsh.w	r3, [r3, #-24]
 800103e:	ee07 3a90 	vmov	s15, r3
 8001042:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	4413      	add	r3, r2
 800104e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001056:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800105a:	6a3b      	ldr	r3, [r7, #32]
 800105c:	3301      	adds	r3, #1
 800105e:	623b      	str	r3, [r7, #32]
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	2b02      	cmp	r3, #2
 8001064:	dde4      	ble.n	8001030 <L3GD20_ReadXYZAngRate+0x114>
  }
}
 8001066:	bf00      	nop
 8001068:	3728      	adds	r7, #40	; 0x28
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	410c0000 	.word	0x410c0000
 8001074:	418c0000 	.word	0x418c0000
 8001078:	428c0000 	.word	0x428c0000

0800107c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001084:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001088:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b00      	cmp	r3, #0
 8001092:	d013      	beq.n	80010bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001094:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001098:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800109c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d00b      	beq.n	80010bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80010a4:	e000      	b.n	80010a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80010a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80010a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d0f9      	beq.n	80010a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80010b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010bc:	687b      	ldr	r3, [r7, #4]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <_write>:
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len){
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
	int i = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
	for(i=0;i<len;i++){
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	e009      	b.n	80010f4 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	60ba      	str	r2, [r7, #8]
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ffc7 	bl	800107c <ITM_SendChar>
	for(i=0;i<len;i++){
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	3301      	adds	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	dbf1      	blt.n	80010e0 <_write+0x16>
	}
	return len;
 80010fc:	687b      	ldr	r3, [r7, #4]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001108:	b5b0      	push	{r4, r5, r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800110e:	f001 f859 	bl	80021c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001112:	f000 f9d1 	bl	80014b8 <SystemClock_Config>
  // ITM_Port32(31)=1;

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001116:	f000 fab5 	bl	8001684 <MX_GPIO_Init>
  MX_DMA_Init();
 800111a:	f000 fa95 	bl	8001648 <MX_DMA_Init>
  MX_SPI1_Init();
 800111e:	f000 fa25 	bl	800156c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001122:	f000 fa61 	bl	80015e8 <MX_USART2_UART_Init>

  //HAL_TIM_Base_Start(&htim3);
  //HAL_TIM_Base_Start_IT(&htim3);

  //Через вложенности:
  BSP_GYRO_Init();
 8001126:	f000 fde5 	bl	8001cf4 <BSP_GYRO_Init>
  BSP_GYRO_ReadID();
 800112a:	f000 fe49 	bl	8001dc0 <BSP_GYRO_ReadID>
  printf("System Init Done \r\n");
 800112e:	48bc      	ldr	r0, [pc, #752]	; (8001420 <main+0x318>)
 8001130:	f004 ff50 	bl	8005fd4 <puts>
  //HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET);

  	uint8_t tmpreg = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	71fb      	strb	r3, [r7, #7]
	GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8001138:	1dfb      	adds	r3, r7, #7
 800113a:	2201      	movs	r2, #1
 800113c:	2123      	movs	r1, #35	; 0x23
 800113e:	4618      	mov	r0, r3
 8001140:	f000 fd9e 	bl	8001c80 <GYRO_IO_Read>
	printf("This is tmpreg %i\r\n", tmpreg);
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4619      	mov	r1, r3
 8001148:	48b6      	ldr	r0, [pc, #728]	; (8001424 <main+0x31c>)
 800114a:	f004 fecf 	bl	8005eec <iprintf>
	tmpreg =0b00010000;
 800114e:	2310      	movs	r3, #16
 8001150:	71fb      	strb	r3, [r7, #7]
	GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG4_ADDR, 1);
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	2201      	movs	r2, #1
 8001156:	2123      	movs	r1, #35	; 0x23
 8001158:	4618      	mov	r0, r3
 800115a:	f000 fd5f 	bl	8001c1c <GYRO_IO_Write>
	printf("This is tmpreg %i\r\n", tmpreg);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	4619      	mov	r1, r3
 8001162:	48b0      	ldr	r0, [pc, #704]	; (8001424 <main+0x31c>)
 8001164:	f004 fec2 	bl	8005eec <iprintf>

	if (tmpreg==0){
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d106      	bne.n	800117c <main+0x74>
		//200dps
		time_query=1000/200;
 800116e:	4bae      	ldr	r3, [pc, #696]	; (8001428 <main+0x320>)
 8001170:	4aae      	ldr	r2, [pc, #696]	; (800142c <main+0x324>)
 8001172:	601a      	str	r2, [r3, #0]
		sens =0.00875;
 8001174:	4bae      	ldr	r3, [pc, #696]	; (8001430 <main+0x328>)
 8001176:	4aaf      	ldr	r2, [pc, #700]	; (8001434 <main+0x32c>)
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	e011      	b.n	80011a0 <main+0x98>
	} else if(tmpreg==32){
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	2b20      	cmp	r3, #32
 8001180:	d107      	bne.n	8001192 <main+0x8a>
		//2000dps
		time_query=1000/2000;
 8001182:	4ba9      	ldr	r3, [pc, #676]	; (8001428 <main+0x320>)
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
		sens = 0.07;
 800118a:	4ba9      	ldr	r3, [pc, #676]	; (8001430 <main+0x328>)
 800118c:	4aaa      	ldr	r2, [pc, #680]	; (8001438 <main+0x330>)
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	e006      	b.n	80011a0 <main+0x98>
	} else{
		//500dps
		time_query=1000/500;
 8001192:	4ba5      	ldr	r3, [pc, #660]	; (8001428 <main+0x320>)
 8001194:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001198:	601a      	str	r2, [r3, #0]
		sens = 0.0175;
 800119a:	4ba5      	ldr	r3, [pc, #660]	; (8001430 <main+0x328>)
 800119c:	4aa7      	ldr	r2, [pc, #668]	; (800143c <main+0x334>)
 800119e:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  GYRO_READ_ANGLE_III(XYZ_results, sens, ((float)time_delay+time_query)/1000);
 80011a0:	4ba3      	ldr	r3, [pc, #652]	; (8001430 <main+0x328>)
 80011a2:	edd3 6a00 	vldr	s13, [r3]
 80011a6:	4ba6      	ldr	r3, [pc, #664]	; (8001440 <main+0x338>)
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011b2:	4b9d      	ldr	r3, [pc, #628]	; (8001428 <main+0x320>)
 80011b4:	edd3 7a00 	vldr	s15, [r3]
 80011b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011bc:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 8001444 <main+0x33c>
 80011c0:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80011c4:	eef0 0a46 	vmov.f32	s1, s12
 80011c8:	eeb0 0a66 	vmov.f32	s0, s13
 80011cc:	489e      	ldr	r0, [pc, #632]	; (8001448 <main+0x340>)
 80011ce:	f000 fabf 	bl	8001750 <GYRO_READ_ANGLE_III>
	  x_result_angle = XYZ_results[0];
 80011d2:	4b9d      	ldr	r3, [pc, #628]	; (8001448 <main+0x340>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a9d      	ldr	r2, [pc, #628]	; (800144c <main+0x344>)
 80011d8:	6013      	str	r3, [r2, #0]
	  y_result_angle = XYZ_results[1];
 80011da:	4b9b      	ldr	r3, [pc, #620]	; (8001448 <main+0x340>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	4a9c      	ldr	r2, [pc, #624]	; (8001450 <main+0x348>)
 80011e0:	6013      	str	r3, [r2, #0]
	  z_result_angle = XYZ_results[2];
 80011e2:	4b99      	ldr	r3, [pc, #612]	; (8001448 <main+0x340>)
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	4a9b      	ldr	r2, [pc, #620]	; (8001454 <main+0x34c>)
 80011e8:	6013      	str	r3, [r2, #0]

	  if(print_time%(10)==0){
 80011ea:	4b9b      	ldr	r3, [pc, #620]	; (8001458 <main+0x350>)
 80011ec:	781a      	ldrb	r2, [r3, #0]
 80011ee:	4b9b      	ldr	r3, [pc, #620]	; (800145c <main+0x354>)
 80011f0:	fba3 1302 	umull	r1, r3, r3, r2
 80011f4:	08d9      	lsrs	r1, r3, #3
 80011f6:	460b      	mov	r3, r1
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	440b      	add	r3, r1
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	1ad3      	subs	r3, r2, r3
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b00      	cmp	r3, #0
 8001204:	d129      	bne.n	800125a <main+0x152>
		  print_time=0;
 8001206:	4b94      	ldr	r3, [pc, #592]	; (8001458 <main+0x350>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
		 // HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_14);
		  printf("Angle(x) = %f\r\n", XYZ_results[0]);
 800120c:	4b8e      	ldr	r3, [pc, #568]	; (8001448 <main+0x340>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f999 	bl	8000548 <__aeabi_f2d>
 8001216:	4603      	mov	r3, r0
 8001218:	460c      	mov	r4, r1
 800121a:	461a      	mov	r2, r3
 800121c:	4623      	mov	r3, r4
 800121e:	4890      	ldr	r0, [pc, #576]	; (8001460 <main+0x358>)
 8001220:	f004 fe64 	bl	8005eec <iprintf>
		  printf("Angle(y) = %f\r\n", XYZ_results[1]);
 8001224:	4b88      	ldr	r3, [pc, #544]	; (8001448 <main+0x340>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f98d 	bl	8000548 <__aeabi_f2d>
 800122e:	4603      	mov	r3, r0
 8001230:	460c      	mov	r4, r1
 8001232:	461a      	mov	r2, r3
 8001234:	4623      	mov	r3, r4
 8001236:	488b      	ldr	r0, [pc, #556]	; (8001464 <main+0x35c>)
 8001238:	f004 fe58 	bl	8005eec <iprintf>
		  printf("Angle(z) = %f\r\n", XYZ_results[2]);
 800123c:	4b82      	ldr	r3, [pc, #520]	; (8001448 <main+0x340>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f981 	bl	8000548 <__aeabi_f2d>
 8001246:	4603      	mov	r3, r0
 8001248:	460c      	mov	r4, r1
 800124a:	461a      	mov	r2, r3
 800124c:	4623      	mov	r3, r4
 800124e:	4886      	ldr	r0, [pc, #536]	; (8001468 <main+0x360>)
 8001250:	f004 fe4c 	bl	8005eec <iprintf>
		  printf("=============================\r\n");
 8001254:	4885      	ldr	r0, [pc, #532]	; (800146c <main+0x364>)
 8001256:	f004 febd 	bl	8005fd4 <puts>

	  }

	  x = x_result_angle;
 800125a:	4b7c      	ldr	r3, [pc, #496]	; (800144c <main+0x344>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a84      	ldr	r2, [pc, #528]	; (8001470 <main+0x368>)
 8001260:	6013      	str	r3, [r2, #0]
	  abs_x = ABS(x_result_angle);
 8001262:	4b7a      	ldr	r3, [pc, #488]	; (800144c <main+0x344>)
 8001264:	edd3 7a00 	vldr	s15, [r3]
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	f000 fbd2 	bl	8001a14 <ABS>
 8001270:	eef0 7a40 	vmov.f32	s15, s0
 8001274:	4b7f      	ldr	r3, [pc, #508]	; (8001474 <main+0x36c>)
 8001276:	edc3 7a00 	vstr	s15, [r3]
	  y = y_result_angle;
 800127a:	4b75      	ldr	r3, [pc, #468]	; (8001450 <main+0x348>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a7e      	ldr	r2, [pc, #504]	; (8001478 <main+0x370>)
 8001280:	6013      	str	r3, [r2, #0]
	  abs_y = ABS(y_result_angle);
 8001282:	4b73      	ldr	r3, [pc, #460]	; (8001450 <main+0x348>)
 8001284:	edd3 7a00 	vldr	s15, [r3]
 8001288:	eeb0 0a67 	vmov.f32	s0, s15
 800128c:	f000 fbc2 	bl	8001a14 <ABS>
 8001290:	eef0 7a40 	vmov.f32	s15, s0
 8001294:	4b79      	ldr	r3, [pc, #484]	; (800147c <main+0x374>)
 8001296:	edc3 7a00 	vstr	s15, [r3]
//	  printf("x = %f\r\n", x);
//	  printf("abs_x = %f\r\n", abs_x);
//	  printf("y = %f\r\n", y);
//	  printf("abs_y = %f\r\n", abs_y);

	  if ((abs_x>10.)||(abs_y>10.)){
 800129a:	4b76      	ldr	r3, [pc, #472]	; (8001474 <main+0x36c>)
 800129c:	edd3 7a00 	vldr	s15, [r3]
 80012a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80012a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ac:	dc0a      	bgt.n	80012c4 <main+0x1bc>
 80012ae:	4b73      	ldr	r3, [pc, #460]	; (800147c <main+0x374>)
 80012b0:	edd3 7a00 	vldr	s15, [r3]
 80012b4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80012b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c0:	f340 80e7 	ble.w	8001492 <main+0x38a>
		  //diag leds
		  if((abs_x >0.5*abs_y)&&(abs_x <1.5*abs_y)){
 80012c4:	4b6b      	ldr	r3, [pc, #428]	; (8001474 <main+0x36c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff f93d 	bl	8000548 <__aeabi_f2d>
 80012ce:	4604      	mov	r4, r0
 80012d0:	460d      	mov	r5, r1
 80012d2:	4b6a      	ldr	r3, [pc, #424]	; (800147c <main+0x374>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f936 	bl	8000548 <__aeabi_f2d>
 80012dc:	f04f 0200 	mov.w	r2, #0
 80012e0:	4b67      	ldr	r3, [pc, #412]	; (8001480 <main+0x378>)
 80012e2:	f7ff f989 	bl	80005f8 <__aeabi_dmul>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4620      	mov	r0, r4
 80012ec:	4629      	mov	r1, r5
 80012ee:	f7ff fc13 	bl	8000b18 <__aeabi_dcmpgt>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d06c      	beq.n	80013d2 <main+0x2ca>
 80012f8:	4b5e      	ldr	r3, [pc, #376]	; (8001474 <main+0x36c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f7ff f923 	bl	8000548 <__aeabi_f2d>
 8001302:	4604      	mov	r4, r0
 8001304:	460d      	mov	r5, r1
 8001306:	4b5d      	ldr	r3, [pc, #372]	; (800147c <main+0x374>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff f91c 	bl	8000548 <__aeabi_f2d>
 8001310:	f04f 0200 	mov.w	r2, #0
 8001314:	4b5b      	ldr	r3, [pc, #364]	; (8001484 <main+0x37c>)
 8001316:	f7ff f96f 	bl	80005f8 <__aeabi_dmul>
 800131a:	4602      	mov	r2, r0
 800131c:	460b      	mov	r3, r1
 800131e:	4620      	mov	r0, r4
 8001320:	4629      	mov	r1, r5
 8001322:	f7ff fbdb 	bl	8000adc <__aeabi_dcmplt>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d052      	beq.n	80013d2 <main+0x2ca>
			  if(x>0. && y >0.){
 800132c:	4b50      	ldr	r3, [pc, #320]	; (8001470 <main+0x368>)
 800132e:	edd3 7a00 	vldr	s15, [r3]
 8001332:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133a:	dd0b      	ble.n	8001354 <main+0x24c>
 800133c:	4b4e      	ldr	r3, [pc, #312]	; (8001478 <main+0x370>)
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134a:	dd03      	ble.n	8001354 <main+0x24c>
				  LED_ON_III(12);
 800134c:	200c      	movs	r0, #12
 800134e:	f000 fb05 	bl	800195c <LED_ON_III>
 8001352:	e03d      	b.n	80013d0 <main+0x2c8>
			  }else if (x<0. && y >0.){
 8001354:	4b46      	ldr	r3, [pc, #280]	; (8001470 <main+0x368>)
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800135e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001362:	d50b      	bpl.n	800137c <main+0x274>
 8001364:	4b44      	ldr	r3, [pc, #272]	; (8001478 <main+0x370>)
 8001366:	edd3 7a00 	vldr	s15, [r3]
 800136a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800136e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001372:	dd03      	ble.n	800137c <main+0x274>
				  LED_ON_III(10);
 8001374:	200a      	movs	r0, #10
 8001376:	f000 faf1 	bl	800195c <LED_ON_III>
 800137a:	e029      	b.n	80013d0 <main+0x2c8>
			  }else if (x>0. && y <0.){
 800137c:	4b3c      	ldr	r3, [pc, #240]	; (8001470 <main+0x368>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138a:	dd0b      	ble.n	80013a4 <main+0x29c>
 800138c:	4b3a      	ldr	r3, [pc, #232]	; (8001478 <main+0x370>)
 800138e:	edd3 7a00 	vldr	s15, [r3]
 8001392:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800139a:	d503      	bpl.n	80013a4 <main+0x29c>
				  LED_ON_III(14);
 800139c:	200e      	movs	r0, #14
 800139e:	f000 fadd 	bl	800195c <LED_ON_III>
 80013a2:	e015      	b.n	80013d0 <main+0x2c8>
			  }else if(x<0. && y <0.){
 80013a4:	4b32      	ldr	r3, [pc, #200]	; (8001470 <main+0x368>)
 80013a6:	edd3 7a00 	vldr	s15, [r3]
 80013aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013b2:	d400      	bmi.n	80013b6 <main+0x2ae>
			  if(x>0. && y >0.){
 80013b4:	e06c      	b.n	8001490 <main+0x388>
			  }else if(x<0. && y <0.){
 80013b6:	4b30      	ldr	r3, [pc, #192]	; (8001478 <main+0x370>)
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c4:	d400      	bmi.n	80013c8 <main+0x2c0>
			  if(x>0. && y >0.){
 80013c6:	e063      	b.n	8001490 <main+0x388>
				  LED_ON_III(8);
 80013c8:	2008      	movs	r0, #8
 80013ca:	f000 fac7 	bl	800195c <LED_ON_III>
			  if(x>0. && y >0.){
 80013ce:	e05f      	b.n	8001490 <main+0x388>
 80013d0:	e05e      	b.n	8001490 <main+0x388>
			  }
		  } else{
  			  if(abs_x>abs_y){
 80013d2:	4b28      	ldr	r3, [pc, #160]	; (8001474 <main+0x36c>)
 80013d4:	ed93 7a00 	vldr	s14, [r3]
 80013d8:	4b28      	ldr	r3, [pc, #160]	; (800147c <main+0x374>)
 80013da:	edd3 7a00 	vldr	s15, [r3]
 80013de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e6:	dd0f      	ble.n	8001408 <main+0x300>
  				  if(x>0){
 80013e8:	4b21      	ldr	r3, [pc, #132]	; (8001470 <main+0x368>)
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013f6:	dd03      	ble.n	8001400 <main+0x2f8>
  					  LED_ON_III(13);
 80013f8:	200d      	movs	r0, #13
 80013fa:	f000 faaf 	bl	800195c <LED_ON_III>
		  if((abs_x >0.5*abs_y)&&(abs_x <1.5*abs_y)){
 80013fe:	e04a      	b.n	8001496 <main+0x38e>
  				  }else{
  					  LED_ON_III(9);
 8001400:	2009      	movs	r0, #9
 8001402:	f000 faab 	bl	800195c <LED_ON_III>
		  if((abs_x >0.5*abs_y)&&(abs_x <1.5*abs_y)){
 8001406:	e046      	b.n	8001496 <main+0x38e>
  				  }
  			  }else{
  				  if(y>0){
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <main+0x370>)
 800140a:	edd3 7a00 	vldr	s15, [r3]
 800140e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001416:	dd37      	ble.n	8001488 <main+0x380>
  					  LED_ON_III(11);
 8001418:	200b      	movs	r0, #11
 800141a:	f000 fa9f 	bl	800195c <LED_ON_III>
		  if((abs_x >0.5*abs_y)&&(abs_x <1.5*abs_y)){
 800141e:	e03a      	b.n	8001496 <main+0x38e>
 8001420:	08009700 	.word	0x08009700
 8001424:	08009714 	.word	0x08009714
 8001428:	20000244 	.word	0x20000244
 800142c:	40a00000 	.word	0x40a00000
 8001430:	200002d8 	.word	0x200002d8
 8001434:	3c0f5c29 	.word	0x3c0f5c29
 8001438:	3d8f5c29 	.word	0x3d8f5c29
 800143c:	3c8f5c29 	.word	0x3c8f5c29
 8001440:	20000034 	.word	0x20000034
 8001444:	447a0000 	.word	0x447a0000
 8001448:	200002cc 	.word	0x200002cc
 800144c:	20000234 	.word	0x20000234
 8001450:	20000238 	.word	0x20000238
 8001454:	2000023c 	.word	0x2000023c
 8001458:	20000240 	.word	0x20000240
 800145c:	cccccccd 	.word	0xcccccccd
 8001460:	08009728 	.word	0x08009728
 8001464:	08009738 	.word	0x08009738
 8001468:	08009748 	.word	0x08009748
 800146c:	08009758 	.word	0x08009758
 8001470:	20000248 	.word	0x20000248
 8001474:	2000024c 	.word	0x2000024c
 8001478:	20000250 	.word	0x20000250
 800147c:	20000254 	.word	0x20000254
 8001480:	3fe00000 	.word	0x3fe00000
 8001484:	3ff80000 	.word	0x3ff80000
  				  }else{
  					  LED_ON_III(15);
 8001488:	200f      	movs	r0, #15
 800148a:	f000 fa67 	bl	800195c <LED_ON_III>
		  if((abs_x >0.5*abs_y)&&(abs_x <1.5*abs_y)){
 800148e:	e002      	b.n	8001496 <main+0x38e>
 8001490:	e001      	b.n	8001496 <main+0x38e>
  				  }
  			  }
			  //LEDS_OFF_III();
		  }
	  } else{
		  LEDS_OFF_III();
 8001492:	f000 fa99 	bl	80019c8 <LEDS_OFF_III>
	  }

	  print_time+=1;
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <main+0x3a8>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b04      	ldr	r3, [pc, #16]	; (80014b0 <main+0x3a8>)
 80014a0:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(time_delay);
 80014a2:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <main+0x3ac>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fef2 	bl	8002290 <HAL_Delay>
	  GYRO_READ_ANGLE_III(XYZ_results, sens, ((float)time_delay+time_query)/1000);
 80014ac:	e678      	b.n	80011a0 <main+0x98>
 80014ae:	bf00      	nop
 80014b0:	20000240 	.word	0x20000240
 80014b4:	20000034 	.word	0x20000034

080014b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b09e      	sub	sp, #120	; 0x78
 80014bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80014c2:	2228      	movs	r2, #40	; 0x28
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f003 feca 	bl	8005260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	60da      	str	r2, [r3, #12]
 80014da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014dc:	463b      	mov	r3, r7
 80014de:	223c      	movs	r2, #60	; 0x3c
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 febc 	bl	8005260 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e8:	2301      	movs	r3, #1
 80014ea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f6:	2301      	movs	r3, #1
 80014f8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fa:	2302      	movs	r3, #2
 80014fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001502:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001504:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001508:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800150e:	4618      	mov	r0, r3
 8001510:	f001 fbcc 	bl	8002cac <HAL_RCC_OscConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800151a:	f000 fa95 	bl	8001a48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151e:	230f      	movs	r3, #15
 8001520:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001522:	2302      	movs	r3, #2
 8001524:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800152a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800152e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001530:	2300      	movs	r3, #0
 8001532:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001534:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001538:	2102      	movs	r1, #2
 800153a:	4618      	mov	r0, r3
 800153c:	f002 fabe 	bl	8003abc <HAL_RCC_ClockConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001546:	f000 fa7f 	bl	8001a48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800154a:	2302      	movs	r3, #2
 800154c:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001552:	463b      	mov	r3, r7
 8001554:	4618      	mov	r0, r3
 8001556:	f002 fce7 	bl	8003f28 <HAL_RCCEx_PeriphCLKConfig>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001560:	f000 fa72 	bl	8001a48 <Error_Handler>
  }
}
 8001564:	bf00      	nop
 8001566:	3778      	adds	r7, #120	; 0x78
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001572:	4a1c      	ldr	r2, [pc, #112]	; (80015e4 <MX_SPI1_Init+0x78>)
 8001574:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001576:	4b1a      	ldr	r3, [pc, #104]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001578:	f44f 7282 	mov.w	r2, #260	; 0x104
 800157c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800157e:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001584:	4b16      	ldr	r3, [pc, #88]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001586:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800158a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800158c:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <MX_SPI1_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001592:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_SPI1_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001598:	4b11      	ldr	r3, [pc, #68]	; (80015e0 <MX_SPI1_Init+0x74>)
 800159a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80015a0:	4b0f      	ldr	r3, [pc, #60]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015a2:	2208      	movs	r2, #8
 80015a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015a6:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015ba:	2207      	movs	r2, #7
 80015bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015c6:	2208      	movs	r2, #8
 80015c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_SPI1_Init+0x74>)
 80015cc:	f002 fe5c 	bl	8004288 <HAL_SPI_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015d6:	f000 fa37 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200002dc 	.word	0x200002dc
 80015e4:	40013000 	.word	0x40013000

080015e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_USART2_UART_Init+0x58>)
 80015ee:	4a15      	ldr	r2, [pc, #84]	; (8001644 <MX_USART2_UART_Init+0x5c>)
 80015f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015f2:	4b13      	ldr	r3, [pc, #76]	; (8001640 <MX_USART2_UART_Init+0x58>)
 80015f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_USART2_UART_Init+0x58>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_USART2_UART_Init+0x58>)
 8001602:	2200      	movs	r2, #0
 8001604:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <MX_USART2_UART_Init+0x58>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <MX_USART2_UART_Init+0x58>)
 800160e:	220c      	movs	r2, #12
 8001610:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <MX_USART2_UART_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001618:	4b09      	ldr	r3, [pc, #36]	; (8001640 <MX_USART2_UART_Init+0x58>)
 800161a:	2200      	movs	r2, #0
 800161c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800161e:	4b08      	ldr	r3, [pc, #32]	; (8001640 <MX_USART2_UART_Init+0x58>)
 8001620:	2200      	movs	r2, #0
 8001622:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <MX_USART2_UART_Init+0x58>)
 8001626:	2200      	movs	r2, #0
 8001628:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_USART2_UART_Init+0x58>)
 800162c:	f003 fa24 	bl	8004a78 <HAL_UART_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001636:	f000 fa07 	bl	8001a48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000340 	.word	0x20000340
 8001644:	40004400 	.word	0x40004400

08001648 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800164e:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_DMA_Init+0x38>)
 8001650:	695b      	ldr	r3, [r3, #20]
 8001652:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <MX_DMA_Init+0x38>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	6153      	str	r3, [r2, #20]
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_DMA_Init+0x38>)
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	200d      	movs	r0, #13
 800166c:	f000 ff0d 	bl	800248a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001670:	200d      	movs	r0, #13
 8001672:	f000 ff26 	bl	80024c2 <HAL_NVIC_EnableIRQ>

}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000

08001684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
 8001698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800169a:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <MX_GPIO_Init+0xc0>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	4a29      	ldr	r2, [pc, #164]	; (8001744 <MX_GPIO_Init+0xc0>)
 80016a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016a4:	6153      	str	r3, [r2, #20]
 80016a6:	4b27      	ldr	r3, [pc, #156]	; (8001744 <MX_GPIO_Init+0xc0>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ae:	613b      	str	r3, [r7, #16]
 80016b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016b2:	4b24      	ldr	r3, [pc, #144]	; (8001744 <MX_GPIO_Init+0xc0>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	4a23      	ldr	r2, [pc, #140]	; (8001744 <MX_GPIO_Init+0xc0>)
 80016b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016bc:	6153      	str	r3, [r2, #20]
 80016be:	4b21      	ldr	r3, [pc, #132]	; (8001744 <MX_GPIO_Init+0xc0>)
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	4b1e      	ldr	r3, [pc, #120]	; (8001744 <MX_GPIO_Init+0xc0>)
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	4a1d      	ldr	r2, [pc, #116]	; (8001744 <MX_GPIO_Init+0xc0>)
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	6153      	str	r3, [r2, #20]
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <MX_GPIO_Init+0xc0>)
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e2:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_GPIO_Init+0xc0>)
 80016e4:	695b      	ldr	r3, [r3, #20]
 80016e6:	4a17      	ldr	r2, [pc, #92]	; (8001744 <MX_GPIO_Init+0xc0>)
 80016e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016ec:	6153      	str	r3, [r2, #20]
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_GPIO_Init+0xc0>)
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80016fa:	2200      	movs	r2, #0
 80016fc:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001700:	4811      	ldr	r0, [pc, #68]	; (8001748 <MX_GPIO_Init+0xc4>)
 8001702:	f001 fabb 	bl	8002c7c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE3 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0|GPIO_PIN_1;
 8001706:	230b      	movs	r3, #11
 8001708:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	480b      	ldr	r0, [pc, #44]	; (8001748 <MX_GPIO_Init+0xc4>)
 800171a:	f001 f85b 	bl	80027d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE8 PE9 PE10 PE11 
                           PE12 PE13 PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800171e:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001722:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001724:	2301      	movs	r3, #1
 8001726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800172c:	2300      	movs	r3, #0
 800172e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	4804      	ldr	r0, [pc, #16]	; (8001748 <MX_GPIO_Init+0xc4>)
 8001738:	f001 f84c 	bl	80027d4 <HAL_GPIO_Init>

}
 800173c:	bf00      	nop
 800173e:	3728      	adds	r7, #40	; 0x28
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40021000 	.word	0x40021000
 8001748:	48001000 	.word	0x48001000
 800174c:	00000000 	.word	0x00000000

08001750 <GYRO_READ_ANGLE_III>:
//	}

//}
}

void GYRO_READ_ANGLE_III(float * buffer, float sens_coef, float time_delay){
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	ed87 0a02 	vstr	s0, [r7, #8]
 800175c:	edc7 0a01 	vstr	s1, [r7, #4]
	uint8_t x_val_low, x_val_high;
	uint8_t y_val_low, y_val_high;
	uint8_t z_val_low, z_val_high;
	uint16_t results[3];
	uint8_t signs[3];
	float deriv=0.;
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	623b      	str	r3, [r7, #32]

	GYRO_IO_Read(&x_val_low,L3GD20_OUT_X_L_ADDR,1);
 8001766:	f107 031f 	add.w	r3, r7, #31
 800176a:	2201      	movs	r2, #1
 800176c:	2128      	movs	r1, #40	; 0x28
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fa86 	bl	8001c80 <GYRO_IO_Read>
	GYRO_IO_Read(&x_val_high,L3GD20_OUT_X_H_ADDR,1);
 8001774:	f107 031e 	add.w	r3, r7, #30
 8001778:	2201      	movs	r2, #1
 800177a:	2129      	movs	r1, #41	; 0x29
 800177c:	4618      	mov	r0, r3
 800177e:	f000 fa7f 	bl	8001c80 <GYRO_IO_Read>

	GYRO_IO_Read(&y_val_low,L3GD20_OUT_Y_L_ADDR,1);
 8001782:	f107 031d 	add.w	r3, r7, #29
 8001786:	2201      	movs	r2, #1
 8001788:	212a      	movs	r1, #42	; 0x2a
 800178a:	4618      	mov	r0, r3
 800178c:	f000 fa78 	bl	8001c80 <GYRO_IO_Read>
	GYRO_IO_Read(&y_val_high,L3GD20_OUT_Y_H_ADDR,1);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	2201      	movs	r2, #1
 8001796:	212b      	movs	r1, #43	; 0x2b
 8001798:	4618      	mov	r0, r3
 800179a:	f000 fa71 	bl	8001c80 <GYRO_IO_Read>

	GYRO_IO_Read(&z_val_low,L3GD20_OUT_Z_L_ADDR,1);
 800179e:	f107 031b 	add.w	r3, r7, #27
 80017a2:	2201      	movs	r2, #1
 80017a4:	212c      	movs	r1, #44	; 0x2c
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 fa6a 	bl	8001c80 <GYRO_IO_Read>
	GYRO_IO_Read(&z_val_high,L3GD20_OUT_Z_H_ADDR,1);
 80017ac:	f107 031a 	add.w	r3, r7, #26
 80017b0:	2201      	movs	r2, #1
 80017b2:	212d      	movs	r1, #45	; 0x2d
 80017b4:	4618      	mov	r0, r3
 80017b6:	f000 fa63 	bl	8001c80 <GYRO_IO_Read>

	results[0] =  x_val_low|(x_val_high<<8);
 80017ba:	7ffb      	ldrb	r3, [r7, #31]
 80017bc:	b21a      	sxth	r2, r3
 80017be:	7fbb      	ldrb	r3, [r7, #30]
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	b21b      	sxth	r3, r3
 80017c4:	4313      	orrs	r3, r2
 80017c6:	b21b      	sxth	r3, r3
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	82bb      	strh	r3, [r7, #20]
	results[1] =  y_val_low|(y_val_high<<8);
 80017cc:	7f7b      	ldrb	r3, [r7, #29]
 80017ce:	b21a      	sxth	r2, r3
 80017d0:	7f3b      	ldrb	r3, [r7, #28]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	b21b      	sxth	r3, r3
 80017d6:	4313      	orrs	r3, r2
 80017d8:	b21b      	sxth	r3, r3
 80017da:	b29b      	uxth	r3, r3
 80017dc:	82fb      	strh	r3, [r7, #22]
	results[2] =  z_val_low|(z_val_high<<8);
 80017de:	7efb      	ldrb	r3, [r7, #27]
 80017e0:	b21a      	sxth	r2, r3
 80017e2:	7ebb      	ldrb	r3, [r7, #26]
 80017e4:	021b      	lsls	r3, r3, #8
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	833b      	strh	r3, [r7, #24]

	for (uint8_t i =0; i<3;i++){
 80017f0:	2300      	movs	r3, #0
 80017f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80017f6:	e09f      	b.n	8001938 <GYRO_READ_ANGLE_III+0x1e8>
		//if ((results[i]>0b0000000000001111)&&(results[i]<0b1111000000000000)){
		//if (1){
			//printf("result(%i) = %i\r\n", i, results[i]);
			if((results[i]&0b1000000000000000)==0){
 80017f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001802:	4413      	add	r3, r2
 8001804:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001808:	b21b      	sxth	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	db08      	blt.n	8001820 <GYRO_READ_ANGLE_III+0xd0>
				signs[i] = 0;
 800180e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001812:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001816:	4413      	add	r3, r2
 8001818:	2200      	movs	r2, #0
 800181a:	f803 2c18 	strb.w	r2, [r3, #-24]
 800181e:	e02e      	b.n	800187e <GYRO_READ_ANGLE_III+0x12e>
			}else{
				signs[i]=1;
 8001820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001824:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001828:	4413      	add	r3, r2
 800182a:	2201      	movs	r2, #1
 800182c:	f803 2c18 	strb.w	r2, [r3, #-24]
				results[i]&=0b0111111111111111;
 8001830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800183a:	4413      	add	r3, r2
 800183c:	f833 2c14 	ldrh.w	r2, [r3, #-20]
 8001840:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001844:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8001848:	b292      	uxth	r2, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001850:	440b      	add	r3, r1
 8001852:	f823 2c14 	strh.w	r2, [r3, #-20]
				results[i]=0b1000000000000000-results[i];
 8001856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001860:	4413      	add	r3, r2
 8001862:	f833 1c14 	ldrh.w	r1, [r3, #-20]
 8001866:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800186a:	4b3b      	ldr	r3, [pc, #236]	; (8001958 <GYRO_READ_ANGLE_III+0x208>)
 800186c:	1a5b      	subs	r3, r3, r1
 800186e:	b299      	uxth	r1, r3
 8001870:	0053      	lsls	r3, r2, #1
 8001872:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001876:	4413      	add	r3, r2
 8001878:	460a      	mov	r2, r1
 800187a:	f823 2c14 	strh.w	r2, [r3, #-20]
			}
			deriv = sens_coef*results[i]*time_delay;
 800187e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001888:	4413      	add	r3, r2
 800188a:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001896:	edd7 7a02 	vldr	s15, [r7, #8]
 800189a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800189e:	ed97 7a01 	vldr	s14, [r7, #4]
 80018a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a6:	edc7 7a08 	vstr	s15, [r7, #32]
			if (abs(deriv)>0.02){
 80018aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80018ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018b2:	ee17 3a90 	vmov	r3, s15
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bfb8      	it	lt
 80018ba:	425b      	neglt	r3, r3
 80018bc:	4618      	mov	r0, r3
 80018be:	f7fe fe31 	bl	8000524 <__aeabi_i2d>
 80018c2:	a323      	add	r3, pc, #140	; (adr r3, 8001950 <GYRO_READ_ANGLE_III+0x200>)
 80018c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c8:	f7ff f926 	bl	8000b18 <__aeabi_dcmpgt>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d02d      	beq.n	800192e <GYRO_READ_ANGLE_III+0x1de>
				if (signs[i]) {buffer[i]-=deriv;}
 80018d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018da:	4413      	add	r3, r2
 80018dc:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d012      	beq.n	800190a <GYRO_READ_ANGLE_III+0x1ba>
 80018e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	ed93 7a00 	vldr	s14, [r3]
 80018f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	68fa      	ldr	r2, [r7, #12]
 80018fa:	4413      	add	r3, r2
 80018fc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001900:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001904:	edc3 7a00 	vstr	s15, [r3]
 8001908:	e011      	b.n	800192e <GYRO_READ_ANGLE_III+0x1de>
				else {buffer[i]+=deriv;}
 800190a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	ed93 7a00 	vldr	s14, [r3]
 8001918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	4413      	add	r3, r2
 8001922:	edd7 7a08 	vldr	s15, [r7, #32]
 8001926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192a:	edc3 7a00 	vstr	s15, [r3]
	for (uint8_t i =0; i<3;i++){
 800192e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001932:	3301      	adds	r3, #1
 8001934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001938:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800193c:	2b02      	cmp	r3, #2
 800193e:	f67f af5b 	bls.w	80017f8 <GYRO_READ_ANGLE_III+0xa8>
//			results[i]=0;
//		}

	}

}
 8001942:	bf00      	nop
 8001944:	3728      	adds	r7, #40	; 0x28
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	f3af 8000 	nop.w
 8001950:	47ae147b 	.word	0x47ae147b
 8001954:	3f947ae1 	.word	0x3f947ae1
 8001958:	ffff8000 	.word	0xffff8000

0800195c <LED_ON_III>:

void LED_ON_III(uint8_t led){
 800195c:	b590      	push	{r4, r7, lr}
 800195e:	b089      	sub	sp, #36	; 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	71fb      	strb	r3, [r7, #7]
	uint16_t gpios[8]={GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10,
 8001966:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <LED_ON_III+0x64>)
 8001968:	f107 040c 	add.w	r4, r7, #12
 800196c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800196e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13,
			GPIO_PIN_14,GPIO_PIN_15};
	for (uint8_t k=0; k<8; k++){
 8001972:	2300      	movs	r3, #0
 8001974:	77fb      	strb	r3, [r7, #31]
 8001976:	e00e      	b.n	8001996 <LED_ON_III+0x3a>
		HAL_GPIO_WritePin(GPIOE, gpios[k], GPIO_PIN_RESET);
 8001978:	7ffb      	ldrb	r3, [r7, #31]
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	f107 0220 	add.w	r2, r7, #32
 8001980:	4413      	add	r3, r2
 8001982:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001986:	2200      	movs	r2, #0
 8001988:	4619      	mov	r1, r3
 800198a:	480e      	ldr	r0, [pc, #56]	; (80019c4 <LED_ON_III+0x68>)
 800198c:	f001 f976 	bl	8002c7c <HAL_GPIO_WritePin>
	for (uint8_t k=0; k<8; k++){
 8001990:	7ffb      	ldrb	r3, [r7, #31]
 8001992:	3301      	adds	r3, #1
 8001994:	77fb      	strb	r3, [r7, #31]
 8001996:	7ffb      	ldrb	r3, [r7, #31]
 8001998:	2b07      	cmp	r3, #7
 800199a:	d9ed      	bls.n	8001978 <LED_ON_III+0x1c>
	}
	HAL_GPIO_WritePin(GPIOE, gpios[led-8], GPIO_PIN_SET);
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	3b08      	subs	r3, #8
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	f107 0220 	add.w	r2, r7, #32
 80019a6:	4413      	add	r3, r2
 80019a8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80019ac:	2201      	movs	r2, #1
 80019ae:	4619      	mov	r1, r3
 80019b0:	4804      	ldr	r0, [pc, #16]	; (80019c4 <LED_ON_III+0x68>)
 80019b2:	f001 f963 	bl	8002c7c <HAL_GPIO_WritePin>
}
 80019b6:	bf00      	nop
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd90      	pop	{r4, r7, pc}
 80019be:	bf00      	nop
 80019c0:	0800979c 	.word	0x0800979c
 80019c4:	48001000 	.word	0x48001000

080019c8 <LEDS_OFF_III>:

void LEDS_OFF_III(void){
 80019c8:	b590      	push	{r4, r7, lr}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0
	uint16_t gpios[8]={GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10,
 80019ce:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <LEDS_OFF_III+0x44>)
 80019d0:	1d3c      	adds	r4, r7, #4
 80019d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
				GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13,
				GPIO_PIN_14,GPIO_PIN_15};
		for (uint8_t k=0; k<8; k++){
 80019d8:	2300      	movs	r3, #0
 80019da:	75fb      	strb	r3, [r7, #23]
 80019dc:	e00e      	b.n	80019fc <LEDS_OFF_III+0x34>
			HAL_GPIO_WritePin(GPIOE, gpios[k], GPIO_PIN_RESET);
 80019de:	7dfb      	ldrb	r3, [r7, #23]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	f107 0218 	add.w	r2, r7, #24
 80019e6:	4413      	add	r3, r2
 80019e8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80019ec:	2200      	movs	r2, #0
 80019ee:	4619      	mov	r1, r3
 80019f0:	4807      	ldr	r0, [pc, #28]	; (8001a10 <LEDS_OFF_III+0x48>)
 80019f2:	f001 f943 	bl	8002c7c <HAL_GPIO_WritePin>
		for (uint8_t k=0; k<8; k++){
 80019f6:	7dfb      	ldrb	r3, [r7, #23]
 80019f8:	3301      	adds	r3, #1
 80019fa:	75fb      	strb	r3, [r7, #23]
 80019fc:	7dfb      	ldrb	r3, [r7, #23]
 80019fe:	2b07      	cmp	r3, #7
 8001a00:	d9ed      	bls.n	80019de <LEDS_OFF_III+0x16>
		}
}
 8001a02:	bf00      	nop
 8001a04:	371c      	adds	r7, #28
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd90      	pop	{r4, r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	0800979c 	.word	0x0800979c
 8001a10:	48001000 	.word	0x48001000

08001a14 <ABS>:
float ABS(float num){
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	ed87 0a01 	vstr	s0, [r7, #4]
	return num>0?num:-num;
 8001a1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2a:	dd02      	ble.n	8001a32 <ABS+0x1e>
 8001a2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a30:	e003      	b.n	8001a3a <ABS+0x26>
 8001a32:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a36:	eef1 7a67 	vneg.f32	s15, s15
}
 8001a3a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <SPIx_Init>:
/**
  * @brief SPIx Bus initialization
  * @retval None
  */
static void SPIx_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001a5c:	481a      	ldr	r0, [pc, #104]	; (8001ac8 <SPIx_Init+0x70>)
 8001a5e:	f002 fee0 	bl	8004822 <HAL_SPI_GetState>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d12c      	bne.n	8001ac2 <SPIx_Init+0x6a>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <SPIx_Init+0x70>)
 8001a6a:	4a18      	ldr	r2, [pc, #96]	; (8001acc <SPIx_Init+0x74>)
 8001a6c:	601a      	str	r2, [r3, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <SPIx_Init+0x70>)
 8001a70:	2218      	movs	r2, #24
 8001a72:	61da      	str	r2, [r3, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <SPIx_Init+0x70>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <SPIx_Init+0x70>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <SPIx_Init+0x70>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <SPIx_Init+0x70>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	629a      	str	r2, [r3, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <SPIx_Init+0x70>)
 8001a8e:	2207      	movs	r2, #7
 8001a90:	62da      	str	r2, [r3, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a92:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <SPIx_Init+0x70>)
 8001a94:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a98:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ac8 <SPIx_Init+0x70>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <SPIx_Init+0x70>)
 8001aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aa6:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <SPIx_Init+0x70>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001aae:	4b06      	ldr	r3, [pc, #24]	; (8001ac8 <SPIx_Init+0x70>)
 8001ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ab4:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001ab6:	4804      	ldr	r0, [pc, #16]	; (8001ac8 <SPIx_Init+0x70>)
 8001ab8:	f000 f836 	bl	8001b28 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <SPIx_Init+0x70>)
 8001abe:	f002 fbe3 	bl	8004288 <HAL_SPI_Init>
  }
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000258 	.word	0x20000258
 8001acc:	40013000 	.word	0x40013000

08001ad0 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]

  uint8_t receivedbyte = 0;
 8001ada:	2300      	movs	r3, #0
 8001adc:	73fb      	strb	r3, [r7, #15]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <SPIx_WriteRead+0x38>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f107 020f 	add.w	r2, r7, #15
 8001ae6:	1df9      	adds	r1, r7, #7
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2301      	movs	r3, #1
 8001aec:	4807      	ldr	r0, [pc, #28]	; (8001b0c <SPIx_WriteRead+0x3c>)
 8001aee:	f002 fc85 	bl	80043fc <HAL_SPI_TransmitReceive>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <SPIx_WriteRead+0x2c>
  {
    SPIx_Error();
 8001af8:	f000 f80a 	bl	8001b10 <SPIx_Error>
  }
  
  return receivedbyte;
 8001afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20000038 	.word	0x20000038
 8001b0c:	20000258 	.word	0x20000258

08001b10 <SPIx_Error>:
/**
  * @brief SPIx error treatment function
  * @retval None
  */
static void SPIx_Error (void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001b14:	4803      	ldr	r0, [pc, #12]	; (8001b24 <SPIx_Error+0x14>)
 8001b16:	f002 fc49 	bl	80043ac <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 8001b1a:	f7ff ff9d 	bl	8001a58 <SPIx_Init>
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000258 	.word	0x20000258

08001b28 <SPIx_MspInit>:
  * @brief SPI MSP Init
  * @param hspi SPI handle
  * @retval None
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	; 0x28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <SPIx_MspInit+0x64>)
 8001b32:	699b      	ldr	r3, [r3, #24]
 8001b34:	4a15      	ldr	r2, [pc, #84]	; (8001b8c <SPIx_MspInit+0x64>)
 8001b36:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001b3a:	6193      	str	r3, [r2, #24]
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <SPIx_MspInit+0x64>)
 8001b3e:	699b      	ldr	r3, [r3, #24]
 8001b40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b44:	613b      	str	r3, [r7, #16]
 8001b46:	693b      	ldr	r3, [r7, #16]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <SPIx_MspInit+0x64>)
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	4a0f      	ldr	r2, [pc, #60]	; (8001b8c <SPIx_MspInit+0x64>)
 8001b4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b52:	6153      	str	r3, [r2, #20]
 8001b54:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <SPIx_MspInit+0x64>)
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001b60:	23e0      	movs	r3, #224	; 0xe0
 8001b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001b70:	2305      	movs	r3, #5
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b7e:	f000 fe29 	bl	80027d4 <HAL_GPIO_Init>
}
 8001b82:	bf00      	nop
 8001b84:	3728      	adds	r7, #40	; 0x28
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40021000 	.word	0x40021000

08001b90 <GYRO_IO_Init>:
/**
  * @brief  Configures the GYROSCOPE SPI interface.
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b088      	sub	sp, #32
 8001b94:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8001b96:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <GYRO_IO_Init+0x84>)
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	4a1e      	ldr	r2, [pc, #120]	; (8001c14 <GYRO_IO_Init+0x84>)
 8001b9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ba0:	6153      	str	r3, [r2, #20]
 8001ba2:	4b1c      	ldr	r3, [pc, #112]	; (8001c14 <GYRO_IO_Init+0x84>)
 8001ba4:	695b      	ldr	r3, [r3, #20]
 8001ba6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8001bae:	2308      	movs	r3, #8
 8001bb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8001bbe:	f107 030c 	add.w	r3, r7, #12
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4814      	ldr	r0, [pc, #80]	; (8001c18 <GYRO_IO_Init+0x88>)
 8001bc6:	f000 fe05 	bl	80027d4 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8001bca:	2201      	movs	r2, #1
 8001bcc:	2108      	movs	r1, #8
 8001bce:	4812      	ldr	r0, [pc, #72]	; (8001c18 <GYRO_IO_Init+0x88>)
 8001bd0:	f001 f854 	bl	8002c7c <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8001bd4:	4b0f      	ldr	r3, [pc, #60]	; (8001c14 <GYRO_IO_Init+0x84>)
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <GYRO_IO_Init+0x84>)
 8001bda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bde:	6153      	str	r3, [r2, #20]
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <GYRO_IO_Init+0x84>)
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be8:	607b      	str	r3, [r7, #4]
 8001bea:	687b      	ldr	r3, [r7, #4]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8001bec:	2303      	movs	r3, #3
 8001bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	4619      	mov	r1, r3
 8001c02:	4805      	ldr	r0, [pc, #20]	; (8001c18 <GYRO_IO_Init+0x88>)
 8001c04:	f000 fde6 	bl	80027d4 <HAL_GPIO_Init>
  
  SPIx_Init();
 8001c08:	f7ff ff26 	bl	8001a58 <SPIx_Init>
}
 8001c0c:	bf00      	nop
 8001c0e:	3720      	adds	r7, #32
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40021000 	.word	0x40021000
 8001c18:	48001000 	.word	0x48001000

08001c1c <GYRO_IO_Write>:
  * @param  WriteAddr GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	460b      	mov	r3, r1
 8001c26:	70fb      	strb	r3, [r7, #3]
 8001c28:	4613      	mov	r3, r2
 8001c2a:	803b      	strh	r3, [r7, #0]
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8001c2c:	883b      	ldrh	r3, [r7, #0]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d903      	bls.n	8001c3a <GYRO_IO_Write+0x1e>
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8001c32:	78fb      	ldrb	r3, [r7, #3]
 8001c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c38:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2108      	movs	r1, #8
 8001c3e:	480f      	ldr	r0, [pc, #60]	; (8001c7c <GYRO_IO_Write+0x60>)
 8001c40:	f001 f81c 	bl	8002c7c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8001c44:	78fb      	ldrb	r3, [r7, #3]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff ff42 	bl	8001ad0 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8001c4c:	e00a      	b.n	8001c64 <GYRO_IO_Write+0x48>
  {
    SPIx_WriteRead(*pBuffer);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7ff ff3c 	bl	8001ad0 <SPIx_WriteRead>
    NumByteToWrite--;
 8001c58:	883b      	ldrh	r3, [r7, #0]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3301      	adds	r3, #1
 8001c62:	607b      	str	r3, [r7, #4]
  while(NumByteToWrite >= 0x01)
 8001c64:	883b      	ldrh	r3, [r7, #0]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1f1      	bne.n	8001c4e <GYRO_IO_Write+0x32>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	2108      	movs	r1, #8
 8001c6e:	4803      	ldr	r0, [pc, #12]	; (8001c7c <GYRO_IO_Write+0x60>)
 8001c70:	f001 f804 	bl	8002c7c <HAL_GPIO_WritePin>
}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	48001000 	.word	0x48001000

08001c80 <GYRO_IO_Read>:
  * @param  ReadAddr GYROSCOPE's internal address to read from.
  * @param  NumByteToRead number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	70fb      	strb	r3, [r7, #3]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	803b      	strh	r3, [r7, #0]
  if(NumByteToRead > 0x01)
 8001c90:	883b      	ldrh	r3, [r7, #0]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d904      	bls.n	8001ca0 <GYRO_IO_Read+0x20>
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001c9c:	70fb      	strb	r3, [r7, #3]
 8001c9e:	e003      	b.n	8001ca8 <GYRO_IO_Read+0x28>
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8001ca0:	78fb      	ldrb	r3, [r7, #3]
 8001ca2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ca6:	70fb      	strb	r3, [r7, #3]
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2108      	movs	r1, #8
 8001cac:	4810      	ldr	r0, [pc, #64]	; (8001cf0 <GYRO_IO_Read+0x70>)
 8001cae:	f000 ffe5 	bl	8002c7c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8001cb2:	78fb      	ldrb	r3, [r7, #3]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff0b 	bl	8001ad0 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8001cba:	e00c      	b.n	8001cd6 <GYRO_IO_Read+0x56>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8001cbc:	2000      	movs	r0, #0
 8001cbe:	f7ff ff07 	bl	8001ad0 <SPIx_WriteRead>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	701a      	strb	r2, [r3, #0]
    NumByteToRead--;
 8001cca:	883b      	ldrh	r3, [r7, #0]
 8001ccc:	3b01      	subs	r3, #1
 8001cce:	803b      	strh	r3, [r7, #0]
    pBuffer++;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	607b      	str	r3, [r7, #4]
  while(NumByteToRead > 0x00)
 8001cd6:	883b      	ldrh	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1ef      	bne.n	8001cbc <GYRO_IO_Read+0x3c>
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8001cdc:	2201      	movs	r2, #1
 8001cde:	2108      	movs	r1, #8
 8001ce0:	4803      	ldr	r0, [pc, #12]	; (8001cf0 <GYRO_IO_Read+0x70>)
 8001ce2:	f000 ffcb 	bl	8002c7c <HAL_GPIO_WritePin>
}  
 8001ce6:	bf00      	nop
 8001ce8:	3708      	adds	r7, #8
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	48001000 	.word	0x48001000

08001cf4 <BSP_GYRO_Init>:
/**
  * @brief  Set GYROSCOPE Initialization.
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8001d02:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <BSP_GYRO_Init+0xc4>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	4798      	blx	r3
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2bd4      	cmp	r3, #212	; 0xd4
 8001d0c:	d005      	beq.n	8001d1a <BSP_GYRO_Init+0x26>
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <BSP_GYRO_Init+0xc4>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	4798      	blx	r3
 8001d14:	4603      	mov	r3, r0
 8001d16:	2bd5      	cmp	r3, #213	; 0xd5
 8001d18:	d146      	bne.n	8001da8 <BSP_GYRO_Init+0xb4>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8001d1a:	4b28      	ldr	r3, [pc, #160]	; (8001dbc <BSP_GYRO_Init+0xc8>)
 8001d1c:	4a26      	ldr	r2, [pc, #152]	; (8001db8 <BSP_GYRO_Init+0xc4>)
 8001d1e:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    L3GD20_InitStructure.Power_Mode = L3GD20_MODE_ACTIVE;
 8001d20:	2308      	movs	r3, #8
 8001d22:	713b      	strb	r3, [r7, #4]
    L3GD20_InitStructure.Output_DataRate = L3GD20_OUTPUT_DATARATE_1;
 8001d24:	2300      	movs	r3, #0
 8001d26:	717b      	strb	r3, [r7, #5]
    L3GD20_InitStructure.Axes_Enable = L3GD20_AXES_ENABLE;
 8001d28:	2307      	movs	r3, #7
 8001d2a:	71bb      	strb	r3, [r7, #6]
    L3GD20_InitStructure.Band_Width = L3GD20_BANDWIDTH_4;
 8001d2c:	2330      	movs	r3, #48	; 0x30
 8001d2e:	71fb      	strb	r3, [r7, #7]
    L3GD20_InitStructure.BlockData_Update = L3GD20_BlockDataUpdate_Continous;
 8001d30:	2300      	movs	r3, #0
 8001d32:	723b      	strb	r3, [r7, #8]
    L3GD20_InitStructure.Endianness = L3GD20_BLE_LSB;
 8001d34:	2300      	movs	r3, #0
 8001d36:	727b      	strb	r3, [r7, #9]
    L3GD20_InitStructure.Full_Scale = L3GD20_FULLSCALE_500; 
 8001d38:	2310      	movs	r3, #16
 8001d3a:	72bb      	strb	r3, [r7, #10]

	
    /* Configure MEMS: data rate, power mode, full scale and axes */
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8001d3c:	793a      	ldrb	r2, [r7, #4]
 8001d3e:	797b      	ldrb	r3, [r7, #5]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8001d44:	79bb      	ldrb	r3, [r7, #6]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8001d46:	4313      	orrs	r3, r2
 8001d48:	b2da      	uxtb	r2, r3
                      L3GD20_InitStructure.Axes_Enable | L3GD20_InitStructure.Band_Width);
 8001d4a:	79fb      	ldrb	r3, [r7, #7]
    ctrl = (uint16_t) (L3GD20_InitStructure.Power_Mode | L3GD20_InitStructure.Output_DataRate | \
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	81bb      	strh	r3, [r7, #12]
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8001d52:	7a3a      	ldrb	r2, [r7, #8]
 8001d54:	7a7b      	ldrb	r3, [r7, #9]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b2da      	uxtb	r2, r3
                        L3GD20_InitStructure.Full_Scale) << 8);
 8001d5a:	7abb      	ldrb	r3, [r7, #10]
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	021b      	lsls	r3, r3, #8
 8001d64:	b29a      	uxth	r2, r3
 8001d66:	89bb      	ldrh	r3, [r7, #12]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	81bb      	strh	r3, [r7, #12]

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <BSP_GYRO_Init+0xc8>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	89ba      	ldrh	r2, [r7, #12]
 8001d74:	4610      	mov	r0, r2
 8001d76:	4798      	blx	r3
  
    L3GD20_FilterStructure.HighPassFilter_Mode_Selection =L3GD20_HPM_NORMAL_MODE_RES;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	703b      	strb	r3, [r7, #0]
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	707b      	strb	r3, [r7, #1]
	
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 8001d80:	783a      	ldrb	r2, [r7, #0]
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));		
 8001d82:	787b      	ldrb	r3, [r7, #1]
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
 8001d84:	4313      	orrs	r3, r2
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	81bb      	strh	r3, [r7, #12]
	
    GyroscopeDrv->FilterConfig(ctrl) ;
 8001d8a:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <BSP_GYRO_Init+0xc8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d90:	89ba      	ldrh	r2, [r7, #12]
 8001d92:	b2d2      	uxtb	r2, r2
 8001d94:	4610      	mov	r0, r2
 8001d96:	4798      	blx	r3
  
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <BSP_GYRO_Init+0xc8>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9e:	2010      	movs	r0, #16
 8001da0:	4798      	blx	r3
	
    ret = GYRO_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
 8001da6:	e001      	b.n	8001dac <BSP_GYRO_Init+0xb8>
  }
  else
  {
    ret = GYRO_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8001dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20000000 	.word	0x20000000
 8001dbc:	200002bc 	.word	0x200002bc

08001dc0 <BSP_GYRO_ReadID>:
/**
  * @brief  Read ID of Gyroscope component
  * @retval ID
  */
uint8_t BSP_GYRO_ReadID(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
  uint8_t id = 0x00;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	71fb      	strb	r3, [r7, #7]

  if(GyroscopeDrv->ReadID != NULL)
 8001dca:	4b08      	ldr	r3, [pc, #32]	; (8001dec <BSP_GYRO_ReadID+0x2c>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <BSP_GYRO_ReadID+0x20>
  {
    id = GyroscopeDrv->ReadID();
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <BSP_GYRO_ReadID+0x2c>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	4798      	blx	r3
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  }  
  return id;
 8001de0:	79fb      	ldrb	r3, [r7, #7]
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200002bc 	.word	0x200002bc

08001df0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df6:	4b0f      	ldr	r3, [pc, #60]	; (8001e34 <HAL_MspInit+0x44>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <HAL_MspInit+0x44>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	6193      	str	r3, [r2, #24]
 8001e02:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <HAL_MspInit+0x44>)
 8001e04:	699b      	ldr	r3, [r3, #24]
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <HAL_MspInit+0x44>)
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	4a08      	ldr	r2, [pc, #32]	; (8001e34 <HAL_MspInit+0x44>)
 8001e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e18:	61d3      	str	r3, [r2, #28]
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_MspInit+0x44>)
 8001e1c:	69db      	ldr	r3, [r3, #28]
 8001e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e22:	603b      	str	r3, [r7, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e26:	bf00      	nop
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	40021000 	.word	0x40021000

08001e38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08a      	sub	sp, #40	; 0x28
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e40:	f107 0314 	add.w	r3, r7, #20
 8001e44:	2200      	movs	r2, #0
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	605a      	str	r2, [r3, #4]
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	60da      	str	r2, [r3, #12]
 8001e4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a2a      	ldr	r2, [pc, #168]	; (8001f00 <HAL_SPI_MspInit+0xc8>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d14e      	bne.n	8001ef8 <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e5a:	4b2a      	ldr	r3, [pc, #168]	; (8001f04 <HAL_SPI_MspInit+0xcc>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	4a29      	ldr	r2, [pc, #164]	; (8001f04 <HAL_SPI_MspInit+0xcc>)
 8001e60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e64:	6193      	str	r3, [r2, #24]
 8001e66:	4b27      	ldr	r3, [pc, #156]	; (8001f04 <HAL_SPI_MspInit+0xcc>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e6e:	613b      	str	r3, [r7, #16]
 8001e70:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	4b24      	ldr	r3, [pc, #144]	; (8001f04 <HAL_SPI_MspInit+0xcc>)
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	4a23      	ldr	r2, [pc, #140]	; (8001f04 <HAL_SPI_MspInit+0xcc>)
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e7c:	6153      	str	r3, [r2, #20]
 8001e7e:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_SPI_MspInit+0xcc>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e8a:	23e0      	movs	r3, #224	; 0xe0
 8001e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e8e:	2302      	movs	r3, #2
 8001e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e96:	2303      	movs	r3, #3
 8001e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9e:	f107 0314 	add.w	r3, r7, #20
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ea8:	f000 fc94 	bl	80027d4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8001eac:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_SPI_MspInit+0xd0>)
 8001eae:	4a17      	ldr	r2, [pc, #92]	; (8001f0c <HAL_SPI_MspInit+0xd4>)
 8001eb0:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eb2:	4b15      	ldr	r3, [pc, #84]	; (8001f08 <HAL_SPI_MspInit+0xd0>)
 8001eb4:	2210      	movs	r2, #16
 8001eb6:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <HAL_SPI_MspInit+0xd0>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_SPI_MspInit+0xd0>)
 8001ec0:	2280      	movs	r2, #128	; 0x80
 8001ec2:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <HAL_SPI_MspInit+0xd0>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_SPI_MspInit+0xd0>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001ed0:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_SPI_MspInit+0xd0>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <HAL_SPI_MspInit+0xd0>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001edc:	480a      	ldr	r0, [pc, #40]	; (8001f08 <HAL_SPI_MspInit+0xd0>)
 8001ede:	f000 fb0a 	bl	80024f6 <HAL_DMA_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 8001ee8:	f7ff fdae 	bl	8001a48 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a06      	ldr	r2, [pc, #24]	; (8001f08 <HAL_SPI_MspInit+0xd0>)
 8001ef0:	655a      	str	r2, [r3, #84]	; 0x54
 8001ef2:	4a05      	ldr	r2, [pc, #20]	; (8001f08 <HAL_SPI_MspInit+0xd0>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001ef8:	bf00      	nop
 8001efa:	3728      	adds	r7, #40	; 0x28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40013000 	.word	0x40013000
 8001f04:	40021000 	.word	0x40021000
 8001f08:	200003c0 	.word	0x200003c0
 8001f0c:	40020030 	.word	0x40020030

08001f10 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a0b      	ldr	r2, [pc, #44]	; (8001f4c <HAL_SPI_MspDeInit+0x3c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d10f      	bne.n	8001f42 <HAL_SPI_MspDeInit+0x32>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_SPI_MspDeInit+0x40>)
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <HAL_SPI_MspDeInit+0x40>)
 8001f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001f2c:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001f2e:	21e0      	movs	r1, #224	; 0xe0
 8001f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f34:	f000 fdc8 	bl	8002ac8 <HAL_GPIO_DeInit>

    /* SPI1 DMA DeInit */
    HAL_DMA_DeInit(hspi->hdmatx);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f000 fb21 	bl	8002584 <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001f42:	bf00      	nop
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40013000 	.word	0x40013000
 8001f50:	40021000 	.word	0x40021000

08001f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	; 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a17      	ldr	r2, [pc, #92]	; (8001fd0 <HAL_UART_MspInit+0x7c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d128      	bne.n	8001fc8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f76:	4b17      	ldr	r3, [pc, #92]	; (8001fd4 <HAL_UART_MspInit+0x80>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	4a16      	ldr	r2, [pc, #88]	; (8001fd4 <HAL_UART_MspInit+0x80>)
 8001f7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f80:	61d3      	str	r3, [r2, #28]
 8001f82:	4b14      	ldr	r3, [pc, #80]	; (8001fd4 <HAL_UART_MspInit+0x80>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8e:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_UART_MspInit+0x80>)
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	4a10      	ldr	r2, [pc, #64]	; (8001fd4 <HAL_UART_MspInit+0x80>)
 8001f94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f98:	6153      	str	r3, [r2, #20]
 8001f9a:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_UART_MspInit+0x80>)
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fa6:	230c      	movs	r3, #12
 8001fa8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001faa:	2302      	movs	r3, #2
 8001fac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fb6:	2307      	movs	r3, #7
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fba:	f107 0314 	add.w	r3, r7, #20
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fc4:	f000 fc06 	bl	80027d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001fc8:	bf00      	nop
 8001fca:	3728      	adds	r7, #40	; 0x28
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40004400 	.word	0x40004400
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr

08001fe6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fea:	e7fe      	b.n	8001fea <HardFault_Handler+0x4>

08001fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff0:	e7fe      	b.n	8001ff0 <MemManage_Handler+0x4>

08001ff2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ff6:	e7fe      	b.n	8001ff6 <BusFault_Handler+0x4>

08001ff8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ffc:	e7fe      	b.n	8001ffc <UsageFault_Handler+0x4>

08001ffe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ffe:	b480      	push	{r7}
 8002000:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr

0800201a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800201a:	b480      	push	{r7}
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800202c:	f000 f910 	bl	8002250 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002030:	bf00      	nop
 8002032:	bd80      	pop	{r7, pc}

08002034 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <DMA1_Channel3_IRQHandler+0x10>)
 800203a:	f000 faeb 	bl	8002614 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */
//BSP_GYRO_GetXYZ(pfData);

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200003c0 	.word	0x200003c0

08002048 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	e00a      	b.n	8002070 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800205a:	f3af 8000 	nop.w
 800205e:	4601      	mov	r1, r0
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	1c5a      	adds	r2, r3, #1
 8002064:	60ba      	str	r2, [r7, #8]
 8002066:	b2ca      	uxtb	r2, r1
 8002068:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	3301      	adds	r3, #1
 800206e:	617b      	str	r3, [r7, #20]
 8002070:	697a      	ldr	r2, [r7, #20]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	dbf0      	blt.n	800205a <_read+0x12>
	}

return len;
 8002078:	687b      	ldr	r3, [r7, #4]
}
 800207a:	4618      	mov	r0, r3
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
	return -1;
 800208a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800208e:	4618      	mov	r0, r3
 8002090:	370c      	adds	r7, #12
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr

0800209a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020aa:	605a      	str	r2, [r3, #4]
	return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr

080020ba <_isatty>:

int _isatty(int file)
{
 80020ba:	b480      	push	{r7}
 80020bc:	b083      	sub	sp, #12
 80020be:	af00      	add	r7, sp, #0
 80020c0:	6078      	str	r0, [r7, #4]
	return 1;
 80020c2:	2301      	movs	r3, #1
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	607a      	str	r2, [r7, #4]
	return 0;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3714      	adds	r7, #20
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <_sbrk+0x50>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <_sbrk+0x16>
		heap_end = &end;
 80020fc:	4b0f      	ldr	r3, [pc, #60]	; (800213c <_sbrk+0x50>)
 80020fe:	4a10      	ldr	r2, [pc, #64]	; (8002140 <_sbrk+0x54>)
 8002100:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002102:	4b0e      	ldr	r3, [pc, #56]	; (800213c <_sbrk+0x50>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002108:	4b0c      	ldr	r3, [pc, #48]	; (800213c <_sbrk+0x50>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4413      	add	r3, r2
 8002110:	466a      	mov	r2, sp
 8002112:	4293      	cmp	r3, r2
 8002114:	d907      	bls.n	8002126 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002116:	f003 f879 	bl	800520c <__errno>
 800211a:	4602      	mov	r2, r0
 800211c:	230c      	movs	r3, #12
 800211e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002120:	f04f 33ff 	mov.w	r3, #4294967295
 8002124:	e006      	b.n	8002134 <_sbrk+0x48>
	}

	heap_end += incr;
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <_sbrk+0x50>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	4a03      	ldr	r2, [pc, #12]	; (800213c <_sbrk+0x50>)
 8002130:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002132:	68fb      	ldr	r3, [r7, #12]
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	200002c0 	.word	0x200002c0
 8002140:	20000410 	.word	0x20000410

08002144 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002148:	4b08      	ldr	r3, [pc, #32]	; (800216c <SystemInit+0x28>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	4a07      	ldr	r2, [pc, #28]	; (800216c <SystemInit+0x28>)
 8002150:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002154:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002158:	4b04      	ldr	r3, [pc, #16]	; (800216c <SystemInit+0x28>)
 800215a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800215e:	609a      	str	r2, [r3, #8]
#endif
}
 8002160:	bf00      	nop
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021a8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002174:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002176:	e003      	b.n	8002180 <LoopCopyDataInit>

08002178 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800217a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800217c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800217e:	3104      	adds	r1, #4

08002180 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002180:	480b      	ldr	r0, [pc, #44]	; (80021b0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002182:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002184:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002186:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002188:	d3f6      	bcc.n	8002178 <CopyDataInit>
	ldr	r2, =_sbss
 800218a:	4a0b      	ldr	r2, [pc, #44]	; (80021b8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800218c:	e002      	b.n	8002194 <LoopFillZerobss>

0800218e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800218e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002190:	f842 3b04 	str.w	r3, [r2], #4

08002194 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002194:	4b09      	ldr	r3, [pc, #36]	; (80021bc <LoopForever+0x16>)
	cmp	r2, r3
 8002196:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002198:	d3f9      	bcc.n	800218e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800219a:	f7ff ffd3 	bl	8002144 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800219e:	f003 f83b 	bl	8005218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80021a2:	f7fe ffb1 	bl	8001108 <main>

080021a6 <LoopForever>:

LoopForever:
    b LoopForever
 80021a6:	e7fe      	b.n	80021a6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80021a8:	2000a000 	.word	0x2000a000
	ldr	r3, =_sidata
 80021ac:	08009b10 	.word	0x08009b10
	ldr	r0, =_sdata
 80021b0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80021b4:	20000218 	.word	0x20000218
	ldr	r2, =_sbss
 80021b8:	20000218 	.word	0x20000218
	ldr	r3, = _ebss
 80021bc:	2000040c 	.word	0x2000040c

080021c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021c0:	e7fe      	b.n	80021c0 <ADC1_2_IRQHandler>
	...

080021c4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <HAL_Init+0x28>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a07      	ldr	r2, [pc, #28]	; (80021ec <HAL_Init+0x28>)
 80021ce:	f043 0310 	orr.w	r3, r3, #16
 80021d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d4:	2003      	movs	r0, #3
 80021d6:	f000 f94d 	bl	8002474 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021da:	2000      	movs	r0, #0
 80021dc:	f000 f808 	bl	80021f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e0:	f7ff fe06 	bl	8001df0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e4:	2300      	movs	r3, #0
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	40022000 	.word	0x40022000

080021f0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021f8:	4b12      	ldr	r3, [pc, #72]	; (8002244 <HAL_InitTick+0x54>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_InitTick+0x58>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4619      	mov	r1, r3
 8002202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002206:	fbb3 f3f1 	udiv	r3, r3, r1
 800220a:	fbb2 f3f3 	udiv	r3, r2, r3
 800220e:	4618      	mov	r0, r3
 8002210:	f000 f965 	bl	80024de <HAL_SYSTICK_Config>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e00e      	b.n	800223c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b0f      	cmp	r3, #15
 8002222:	d80a      	bhi.n	800223a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002224:	2200      	movs	r2, #0
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f000 f92d 	bl	800248a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002230:	4a06      	ldr	r2, [pc, #24]	; (800224c <HAL_InitTick+0x5c>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	e000      	b.n	800223c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
}
 800223c:	4618      	mov	r0, r3
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	2000003c 	.word	0x2000003c
 8002248:	20000044 	.word	0x20000044
 800224c:	20000040 	.word	0x20000040

08002250 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <HAL_IncTick+0x20>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	461a      	mov	r2, r3
 800225a:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_IncTick+0x24>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4413      	add	r3, r2
 8002260:	4a04      	ldr	r2, [pc, #16]	; (8002274 <HAL_IncTick+0x24>)
 8002262:	6013      	str	r3, [r2, #0]
}
 8002264:	bf00      	nop
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop
 8002270:	20000044 	.word	0x20000044
 8002274:	20000404 	.word	0x20000404

08002278 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return uwTick;  
 800227c:	4b03      	ldr	r3, [pc, #12]	; (800228c <HAL_GetTick+0x14>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	20000404 	.word	0x20000404

08002290 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002298:	f7ff ffee 	bl	8002278 <HAL_GetTick>
 800229c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a8:	d005      	beq.n	80022b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022aa:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <HAL_Delay+0x40>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	461a      	mov	r2, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	4413      	add	r3, r2
 80022b4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80022b6:	bf00      	nop
 80022b8:	f7ff ffde 	bl	8002278 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d8f7      	bhi.n	80022b8 <HAL_Delay+0x28>
  {
  }
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000044 	.word	0x20000044

080022d4 <__NVIC_SetPriorityGrouping>:
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <__NVIC_SetPriorityGrouping+0x44>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f0:	4013      	ands	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002306:	4a04      	ldr	r2, [pc, #16]	; (8002318 <__NVIC_SetPriorityGrouping+0x44>)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	60d3      	str	r3, [r2, #12]
}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_GetPriorityGrouping>:
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002320:	4b04      	ldr	r3, [pc, #16]	; (8002334 <__NVIC_GetPriorityGrouping+0x18>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 0307 	and.w	r3, r3, #7
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <__NVIC_EnableIRQ>:
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	2b00      	cmp	r3, #0
 8002348:	db0b      	blt.n	8002362 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	f003 021f 	and.w	r2, r3, #31
 8002350:	4907      	ldr	r1, [pc, #28]	; (8002370 <__NVIC_EnableIRQ+0x38>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2001      	movs	r0, #1
 800235a:	fa00 f202 	lsl.w	r2, r0, r2
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000e100 	.word	0xe000e100

08002374 <__NVIC_SetPriority>:
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002384:	2b00      	cmp	r3, #0
 8002386:	db0a      	blt.n	800239e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	b2da      	uxtb	r2, r3
 800238c:	490c      	ldr	r1, [pc, #48]	; (80023c0 <__NVIC_SetPriority+0x4c>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	0112      	lsls	r2, r2, #4
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	440b      	add	r3, r1
 8002398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800239c:	e00a      	b.n	80023b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4908      	ldr	r1, [pc, #32]	; (80023c4 <__NVIC_SetPriority+0x50>)
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	3b04      	subs	r3, #4
 80023ac:	0112      	lsls	r2, r2, #4
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	440b      	add	r3, r1
 80023b2:	761a      	strb	r2, [r3, #24]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000e100 	.word	0xe000e100
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <NVIC_EncodePriority>:
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	; 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f1c3 0307 	rsb	r3, r3, #7
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	bf28      	it	cs
 80023e6:	2304      	movcs	r3, #4
 80023e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3304      	adds	r3, #4
 80023ee:	2b06      	cmp	r3, #6
 80023f0:	d902      	bls.n	80023f8 <NVIC_EncodePriority+0x30>
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3b03      	subs	r3, #3
 80023f6:	e000      	b.n	80023fa <NVIC_EncodePriority+0x32>
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43da      	mvns	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	401a      	ands	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002410:	f04f 31ff 	mov.w	r1, #4294967295
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fa01 f303 	lsl.w	r3, r1, r3
 800241a:	43d9      	mvns	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	4313      	orrs	r3, r2
}
 8002422:	4618      	mov	r0, r3
 8002424:	3724      	adds	r7, #36	; 0x24
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <SysTick_Config>:
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002440:	d301      	bcc.n	8002446 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002442:	2301      	movs	r3, #1
 8002444:	e00f      	b.n	8002466 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002446:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <SysTick_Config+0x40>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800244e:	210f      	movs	r1, #15
 8002450:	f04f 30ff 	mov.w	r0, #4294967295
 8002454:	f7ff ff8e 	bl	8002374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <SysTick_Config+0x40>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <SysTick_Config+0x40>)
 8002460:	2207      	movs	r2, #7
 8002462:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	e000e010 	.word	0xe000e010

08002474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ff29 	bl	80022d4 <__NVIC_SetPriorityGrouping>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800249c:	f7ff ff3e 	bl	800231c <__NVIC_GetPriorityGrouping>
 80024a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	6978      	ldr	r0, [r7, #20]
 80024a8:	f7ff ff8e 	bl	80023c8 <NVIC_EncodePriority>
 80024ac:	4602      	mov	r2, r0
 80024ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff5d 	bl	8002374 <__NVIC_SetPriority>
}
 80024ba:	bf00      	nop
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff31 	bl	8002338 <__NVIC_EnableIRQ>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ffa2 	bl	8002430 <SysTick_Config>
 80024ec:	4603      	mov	r3, r0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}

080024f6 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e037      	b.n	800257c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2202      	movs	r2, #2
 8002510:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002522:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002526:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002530:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800253c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002548:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f8fc 	bl	800275c <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}  
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e03a      	b.n	800260c <HAL_DMA_DeInit+0x88>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0201 	bic.w	r2, r2, #1
 80025a4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2200      	movs	r2, #0
 80025ac:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2200      	movs	r2, #0
 80025b4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
  
  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2200      	movs	r2, #0
 80025c4:	60da      	str	r2, [r3, #12]

  /* Get DMA Base Address */  
  DMA_CalcBaseAndBitshift(hdma);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f8c8 	bl	800275c <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f202 	lsl.w	r2, r1, r2
 80025da:	605a      	str	r2, [r3, #4]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2200      	movs	r2, #0
 80025ec:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800260a:	2300      	movs	r3, #0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	2204      	movs	r2, #4
 8002632:	409a      	lsls	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d024      	beq.n	8002686 <HAL_DMA_IRQHandler+0x72>
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b00      	cmp	r3, #0
 8002644:	d01f      	beq.n	8002686 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0320 	and.w	r3, r3, #32
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f022 0204 	bic.w	r2, r2, #4
 8002662:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800266c:	2104      	movs	r1, #4
 800266e:	fa01 f202 	lsl.w	r2, r1, r2
 8002672:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002678:	2b00      	cmp	r3, #0
 800267a:	d06a      	beq.n	8002752 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002684:	e065      	b.n	8002752 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	2202      	movs	r2, #2
 800268c:	409a      	lsls	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	4013      	ands	r3, r2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d02c      	beq.n	80026f0 <HAL_DMA_IRQHandler+0xdc>
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f003 0302 	and.w	r3, r3, #2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d027      	beq.n	80026f0 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10b      	bne.n	80026c6 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 020a 	bic.w	r2, r2, #10
 80026bc:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2201      	movs	r2, #1
 80026c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ce:	2102      	movs	r1, #2
 80026d0:	fa01 f202 	lsl.w	r2, r1, r2
 80026d4:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d035      	beq.n	8002752 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80026ee:	e030      	b.n	8002752 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	2208      	movs	r2, #8
 80026f6:	409a      	lsls	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d028      	beq.n	8002752 <HAL_DMA_IRQHandler+0x13e>
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f003 0308 	and.w	r3, r3, #8
 8002706:	2b00      	cmp	r3, #0
 8002708:	d023      	beq.n	8002752 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 020e 	bic.w	r2, r2, #14
 8002718:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002722:	2101      	movs	r1, #1
 8002724:	fa01 f202 	lsl.w	r2, r1, r2
 8002728:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	4798      	blx	r3
    }
  }
}  
 8002750:	e7ff      	b.n	8002752 <HAL_DMA_IRQHandler+0x13e>
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	4b14      	ldr	r3, [pc, #80]	; (80027bc <DMA_CalcBaseAndBitshift+0x60>)
 800276c:	429a      	cmp	r2, r3
 800276e:	d80f      	bhi.n	8002790 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	461a      	mov	r2, r3
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <DMA_CalcBaseAndBitshift+0x64>)
 8002778:	4413      	add	r3, r2
 800277a:	4a12      	ldr	r2, [pc, #72]	; (80027c4 <DMA_CalcBaseAndBitshift+0x68>)
 800277c:	fba2 2303 	umull	r2, r3, r2, r3
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	009a      	lsls	r2, r3, #2
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a0f      	ldr	r2, [pc, #60]	; (80027c8 <DMA_CalcBaseAndBitshift+0x6c>)
 800278c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800278e:	e00e      	b.n	80027ae <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <DMA_CalcBaseAndBitshift+0x70>)
 8002798:	4413      	add	r3, r2
 800279a:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <DMA_CalcBaseAndBitshift+0x68>)
 800279c:	fba2 2303 	umull	r2, r3, r2, r3
 80027a0:	091b      	lsrs	r3, r3, #4
 80027a2:	009a      	lsls	r2, r3, #2
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <DMA_CalcBaseAndBitshift+0x74>)
 80027ac:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	40020407 	.word	0x40020407
 80027c0:	bffdfff8 	.word	0xbffdfff8
 80027c4:	cccccccd 	.word	0xcccccccd
 80027c8:	40020000 	.word	0x40020000
 80027cc:	bffdfbf8 	.word	0xbffdfbf8
 80027d0:	40020400 	.word	0x40020400

080027d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e2:	e154      	b.n	8002a8e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	2101      	movs	r1, #1
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	fa01 f303 	lsl.w	r3, r1, r3
 80027f0:	4013      	ands	r3, r2
 80027f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 8146 	beq.w	8002a88 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b02      	cmp	r3, #2
 8002802:	d003      	beq.n	800280c <HAL_GPIO_Init+0x38>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b12      	cmp	r3, #18
 800280a:	d123      	bne.n	8002854 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	08da      	lsrs	r2, r3, #3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	3208      	adds	r2, #8
 8002814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002818:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	220f      	movs	r2, #15
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	691a      	ldr	r2, [r3, #16]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	08da      	lsrs	r2, r3, #3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	3208      	adds	r2, #8
 800284e:	6939      	ldr	r1, [r7, #16]
 8002850:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	2203      	movs	r2, #3
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	693a      	ldr	r2, [r7, #16]
 8002868:	4013      	ands	r3, r2
 800286a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f003 0203 	and.w	r2, r3, #3
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	4313      	orrs	r3, r2
 8002880:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d00b      	beq.n	80028a8 <HAL_GPIO_Init+0xd4>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b02      	cmp	r3, #2
 8002896:	d007      	beq.n	80028a8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800289c:	2b11      	cmp	r3, #17
 800289e:	d003      	beq.n	80028a8 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b12      	cmp	r3, #18
 80028a6:	d130      	bne.n	800290a <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	2203      	movs	r2, #3
 80028b4:	fa02 f303 	lsl.w	r3, r2, r3
 80028b8:	43db      	mvns	r3, r3
 80028ba:	693a      	ldr	r2, [r7, #16]
 80028bc:	4013      	ands	r3, r2
 80028be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	005b      	lsls	r3, r3, #1
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	4313      	orrs	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	693a      	ldr	r2, [r7, #16]
 80028d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028de:	2201      	movs	r2, #1
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4013      	ands	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	091b      	lsrs	r3, r3, #4
 80028f4:	f003 0201 	and.w	r2, r3, #1
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	693a      	ldr	r2, [r7, #16]
 8002900:	4313      	orrs	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	2203      	movs	r2, #3
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43db      	mvns	r3, r3
 800291c:	693a      	ldr	r2, [r7, #16]
 800291e:	4013      	ands	r3, r2
 8002920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	693a      	ldr	r2, [r7, #16]
 8002938:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002942:	2b00      	cmp	r3, #0
 8002944:	f000 80a0 	beq.w	8002a88 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002948:	4b58      	ldr	r3, [pc, #352]	; (8002aac <HAL_GPIO_Init+0x2d8>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	4a57      	ldr	r2, [pc, #348]	; (8002aac <HAL_GPIO_Init+0x2d8>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6193      	str	r3, [r2, #24]
 8002954:	4b55      	ldr	r3, [pc, #340]	; (8002aac <HAL_GPIO_Init+0x2d8>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002960:	4a53      	ldr	r2, [pc, #332]	; (8002ab0 <HAL_GPIO_Init+0x2dc>)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	089b      	lsrs	r3, r3, #2
 8002966:	3302      	adds	r3, #2
 8002968:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800296c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f003 0303 	and.w	r3, r3, #3
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	220f      	movs	r2, #15
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	43db      	mvns	r3, r3
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	4013      	ands	r3, r2
 8002982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800298a:	d019      	beq.n	80029c0 <HAL_GPIO_Init+0x1ec>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4a49      	ldr	r2, [pc, #292]	; (8002ab4 <HAL_GPIO_Init+0x2e0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d013      	beq.n	80029bc <HAL_GPIO_Init+0x1e8>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a48      	ldr	r2, [pc, #288]	; (8002ab8 <HAL_GPIO_Init+0x2e4>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d00d      	beq.n	80029b8 <HAL_GPIO_Init+0x1e4>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a47      	ldr	r2, [pc, #284]	; (8002abc <HAL_GPIO_Init+0x2e8>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d007      	beq.n	80029b4 <HAL_GPIO_Init+0x1e0>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a46      	ldr	r2, [pc, #280]	; (8002ac0 <HAL_GPIO_Init+0x2ec>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d101      	bne.n	80029b0 <HAL_GPIO_Init+0x1dc>
 80029ac:	2304      	movs	r3, #4
 80029ae:	e008      	b.n	80029c2 <HAL_GPIO_Init+0x1ee>
 80029b0:	2305      	movs	r3, #5
 80029b2:	e006      	b.n	80029c2 <HAL_GPIO_Init+0x1ee>
 80029b4:	2303      	movs	r3, #3
 80029b6:	e004      	b.n	80029c2 <HAL_GPIO_Init+0x1ee>
 80029b8:	2302      	movs	r3, #2
 80029ba:	e002      	b.n	80029c2 <HAL_GPIO_Init+0x1ee>
 80029bc:	2301      	movs	r3, #1
 80029be:	e000      	b.n	80029c2 <HAL_GPIO_Init+0x1ee>
 80029c0:	2300      	movs	r3, #0
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	f002 0203 	and.w	r2, r2, #3
 80029c8:	0092      	lsls	r2, r2, #2
 80029ca:	4093      	lsls	r3, r2
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80029d2:	4937      	ldr	r1, [pc, #220]	; (8002ab0 <HAL_GPIO_Init+0x2dc>)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	089b      	lsrs	r3, r3, #2
 80029d8:	3302      	adds	r3, #2
 80029da:	693a      	ldr	r2, [r7, #16]
 80029dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029e0:	4b38      	ldr	r3, [pc, #224]	; (8002ac4 <HAL_GPIO_Init+0x2f0>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	43db      	mvns	r3, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002a04:	4a2f      	ldr	r2, [pc, #188]	; (8002ac4 <HAL_GPIO_Init+0x2f0>)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a0a:	4b2e      	ldr	r3, [pc, #184]	; (8002ac4 <HAL_GPIO_Init+0x2f0>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	43db      	mvns	r3, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d003      	beq.n	8002a2e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002a2e:	4a25      	ldr	r2, [pc, #148]	; (8002ac4 <HAL_GPIO_Init+0x2f0>)
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a34:	4b23      	ldr	r3, [pc, #140]	; (8002ac4 <HAL_GPIO_Init+0x2f0>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4013      	ands	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002a58:	4a1a      	ldr	r2, [pc, #104]	; (8002ac4 <HAL_GPIO_Init+0x2f0>)
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a5e:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <HAL_GPIO_Init+0x2f0>)
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	43db      	mvns	r3, r3
 8002a68:	693a      	ldr	r2, [r7, #16]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002a82:	4a10      	ldr	r2, [pc, #64]	; (8002ac4 <HAL_GPIO_Init+0x2f0>)
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f47f aea3 	bne.w	80027e4 <HAL_GPIO_Init+0x10>
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	371c      	adds	r7, #28
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40010000 	.word	0x40010000
 8002ab4:	48000400 	.word	0x48000400
 8002ab8:	48000800 	.word	0x48000800
 8002abc:	48000c00 	.word	0x48000c00
 8002ac0:	48001000 	.word	0x48001000
 8002ac4:	40010400 	.word	0x40010400

08002ac8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b087      	sub	sp, #28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002ad6:	e0b8      	b.n	8002c4a <HAL_GPIO_DeInit+0x182>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002ad8:	2201      	movs	r2, #1
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 80ab 	beq.w	8002c44 <HAL_GPIO_DeInit+0x17c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002aee:	4a5d      	ldr	r2, [pc, #372]	; (8002c64 <HAL_GPIO_DeInit+0x19c>)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	3302      	adds	r3, #2
 8002af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	220f      	movs	r2, #15
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b16:	d019      	beq.n	8002b4c <HAL_GPIO_DeInit+0x84>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a53      	ldr	r2, [pc, #332]	; (8002c68 <HAL_GPIO_DeInit+0x1a0>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d013      	beq.n	8002b48 <HAL_GPIO_DeInit+0x80>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a52      	ldr	r2, [pc, #328]	; (8002c6c <HAL_GPIO_DeInit+0x1a4>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00d      	beq.n	8002b44 <HAL_GPIO_DeInit+0x7c>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a51      	ldr	r2, [pc, #324]	; (8002c70 <HAL_GPIO_DeInit+0x1a8>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d007      	beq.n	8002b40 <HAL_GPIO_DeInit+0x78>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a50      	ldr	r2, [pc, #320]	; (8002c74 <HAL_GPIO_DeInit+0x1ac>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d101      	bne.n	8002b3c <HAL_GPIO_DeInit+0x74>
 8002b38:	2304      	movs	r3, #4
 8002b3a:	e008      	b.n	8002b4e <HAL_GPIO_DeInit+0x86>
 8002b3c:	2305      	movs	r3, #5
 8002b3e:	e006      	b.n	8002b4e <HAL_GPIO_DeInit+0x86>
 8002b40:	2303      	movs	r3, #3
 8002b42:	e004      	b.n	8002b4e <HAL_GPIO_DeInit+0x86>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e002      	b.n	8002b4e <HAL_GPIO_DeInit+0x86>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <HAL_GPIO_DeInit+0x86>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	f002 0203 	and.w	r2, r2, #3
 8002b54:	0092      	lsls	r2, r2, #2
 8002b56:	4093      	lsls	r3, r2
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d132      	bne.n	8002bc4 <HAL_GPIO_DeInit+0xfc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002b5e:	4b46      	ldr	r3, [pc, #280]	; (8002c78 <HAL_GPIO_DeInit+0x1b0>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	4944      	ldr	r1, [pc, #272]	; (8002c78 <HAL_GPIO_DeInit+0x1b0>)
 8002b68:	4013      	ands	r3, r2
 8002b6a:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002b6c:	4b42      	ldr	r3, [pc, #264]	; (8002c78 <HAL_GPIO_DeInit+0x1b0>)
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	4940      	ldr	r1, [pc, #256]	; (8002c78 <HAL_GPIO_DeInit+0x1b0>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002b7a:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <HAL_GPIO_DeInit+0x1b0>)
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	493d      	ldr	r1, [pc, #244]	; (8002c78 <HAL_GPIO_DeInit+0x1b0>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002b88:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <HAL_GPIO_DeInit+0x1b0>)
 8002b8a:	68da      	ldr	r2, [r3, #12]
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	4939      	ldr	r1, [pc, #228]	; (8002c78 <HAL_GPIO_DeInit+0x1b0>)
 8002b92:	4013      	ands	r3, r2
 8002b94:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	220f      	movs	r2, #15
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002ba6:	4a2f      	ldr	r2, [pc, #188]	; (8002c64 <HAL_GPIO_DeInit+0x19c>)
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	089b      	lsrs	r3, r3, #2
 8002bac:	3302      	adds	r3, #2
 8002bae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	43da      	mvns	r2, r3
 8002bb6:	482b      	ldr	r0, [pc, #172]	; (8002c64 <HAL_GPIO_DeInit+0x19c>)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	089b      	lsrs	r3, r3, #2
 8002bbc:	400a      	ands	r2, r1
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	005b      	lsls	r3, r3, #1
 8002bcc:	2103      	movs	r1, #3
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	401a      	ands	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	08da      	lsrs	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3208      	adds	r2, #8
 8002be2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	f003 0307 	and.w	r3, r3, #7
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	220f      	movs	r2, #15
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	43db      	mvns	r3, r3
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	08d2      	lsrs	r2, r2, #3
 8002bfa:	4019      	ands	r1, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3208      	adds	r2, #8
 8002c00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	2103      	movs	r1, #3
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	401a      	ands	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685a      	ldr	r2, [r3, #4]
 8002c1e:	2101      	movs	r1, #1
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	fa01 f303 	lsl.w	r3, r1, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	401a      	ands	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2103      	movs	r1, #3
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	401a      	ands	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	60da      	str	r2, [r3, #12]
    }

    position++;
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	3301      	adds	r3, #1
 8002c48:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002c4a:	683a      	ldr	r2, [r7, #0]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f47f af40 	bne.w	8002ad8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002c58:	bf00      	nop
 8002c5a:	371c      	adds	r7, #28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	40010000 	.word	0x40010000
 8002c68:	48000400 	.word	0x48000400
 8002c6c:	48000800 	.word	0x48000800
 8002c70:	48000c00 	.word	0x48000c00
 8002c74:	48001000 	.word	0x48001000
 8002c78:	40010400 	.word	0x40010400

08002c7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	460b      	mov	r3, r1
 8002c86:	807b      	strh	r3, [r7, #2]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c8c:	787b      	ldrb	r3, [r7, #1]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c92:	887a      	ldrh	r2, [r7, #2]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c98:	e002      	b.n	8002ca0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c9a:	887a      	ldrh	r2, [r7, #2]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	1d3b      	adds	r3, r7, #4
 8002cb6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cb8:	1d3b      	adds	r3, r7, #4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d102      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f000 bef4 	b.w	8003aae <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc6:	1d3b      	adds	r3, r7, #4
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f000 816a 	beq.w	8002faa <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002cd6:	4bb3      	ldr	r3, [pc, #716]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	f003 030c 	and.w	r3, r3, #12
 8002cde:	2b04      	cmp	r3, #4
 8002ce0:	d00c      	beq.n	8002cfc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ce2:	4bb0      	ldr	r3, [pc, #704]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d159      	bne.n	8002da2 <HAL_RCC_OscConfig+0xf6>
 8002cee:	4bad      	ldr	r3, [pc, #692]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfa:	d152      	bne.n	8002da2 <HAL_RCC_OscConfig+0xf6>
 8002cfc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d00:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d04:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d10:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d14:	fab3 f383 	clz	r3, r3
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	f043 0301 	orr.w	r3, r3, #1
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d102      	bne.n	8002d2e <HAL_RCC_OscConfig+0x82>
 8002d28:	4b9e      	ldr	r3, [pc, #632]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	e015      	b.n	8002d5a <HAL_RCC_OscConfig+0xae>
 8002d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d32:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d36:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002d3a:	fa93 f3a3 	rbit	r3, r3
 8002d3e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002d42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d46:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002d4a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002d56:	4b93      	ldr	r3, [pc, #588]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d5e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002d62:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002d66:	fa92 f2a2 	rbit	r2, r2
 8002d6a:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002d6e:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002d72:	fab2 f282 	clz	r2, r2
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	f042 0220 	orr.w	r2, r2, #32
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	f002 021f 	and.w	r2, r2, #31
 8002d82:	2101      	movs	r1, #1
 8002d84:	fa01 f202 	lsl.w	r2, r1, r2
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	f000 810c 	beq.w	8002fa8 <HAL_RCC_OscConfig+0x2fc>
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f040 8106 	bne.w	8002fa8 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	f000 be86 	b.w	8003aae <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dac:	d106      	bne.n	8002dbc <HAL_RCC_OscConfig+0x110>
 8002dae:	4b7d      	ldr	r3, [pc, #500]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a7c      	ldr	r2, [pc, #496]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002db4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e030      	b.n	8002e1e <HAL_RCC_OscConfig+0x172>
 8002dbc:	1d3b      	adds	r3, r7, #4
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x134>
 8002dc6:	4b77      	ldr	r3, [pc, #476]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a76      	ldr	r2, [pc, #472]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002dcc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	4b74      	ldr	r3, [pc, #464]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a73      	ldr	r2, [pc, #460]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002dd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	e01e      	b.n	8002e1e <HAL_RCC_OscConfig+0x172>
 8002de0:	1d3b      	adds	r3, r7, #4
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dea:	d10c      	bne.n	8002e06 <HAL_RCC_OscConfig+0x15a>
 8002dec:	4b6d      	ldr	r3, [pc, #436]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a6c      	ldr	r2, [pc, #432]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002df2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002df6:	6013      	str	r3, [r2, #0]
 8002df8:	4b6a      	ldr	r3, [pc, #424]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a69      	ldr	r2, [pc, #420]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002dfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	e00b      	b.n	8002e1e <HAL_RCC_OscConfig+0x172>
 8002e06:	4b67      	ldr	r3, [pc, #412]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a66      	ldr	r2, [pc, #408]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e10:	6013      	str	r3, [r2, #0]
 8002e12:	4b64      	ldr	r3, [pc, #400]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a63      	ldr	r2, [pc, #396]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002e18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e1c:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e1e:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	f023 020f 	bic.w	r2, r3, #15
 8002e26:	1d3b      	adds	r3, r7, #4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	495d      	ldr	r1, [pc, #372]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e32:	1d3b      	adds	r3, r7, #4
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d059      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7ff fa1c 	bl	8002278 <HAL_GetTick>
 8002e40:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e46:	f7ff fa17 	bl	8002278 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	; 0x64
 8002e54:	d902      	bls.n	8002e5c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	f000 be29 	b.w	8003aae <HAL_RCC_OscConfig+0xe02>
 8002e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e60:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002e70:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e74:	fab3 f383 	clz	r3, r3
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	095b      	lsrs	r3, r3, #5
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f043 0301 	orr.w	r3, r3, #1
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d102      	bne.n	8002e8e <HAL_RCC_OscConfig+0x1e2>
 8002e88:	4b46      	ldr	r3, [pc, #280]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	e015      	b.n	8002eba <HAL_RCC_OscConfig+0x20e>
 8002e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e92:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e96:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002e9a:	fa93 f3a3 	rbit	r3, r3
 8002e9e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002ea2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ea6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002eaa:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002eb6:	4b3b      	ldr	r3, [pc, #236]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ebe:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8002ec2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002ec6:	fa92 f2a2 	rbit	r2, r2
 8002eca:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002ece:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8002ed2:	fab2 f282 	clz	r2, r2
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	f042 0220 	orr.w	r2, r2, #32
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	f002 021f 	and.w	r2, r2, #31
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0ab      	beq.n	8002e46 <HAL_RCC_OscConfig+0x19a>
 8002eee:	e05c      	b.n	8002faa <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef0:	f7ff f9c2 	bl	8002278 <HAL_GetTick>
 8002ef4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002efa:	f7ff f9bd 	bl	8002278 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d902      	bls.n	8002f10 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	f000 bdcf 	b.w	8003aae <HAL_RCC_OscConfig+0xe02>
 8002f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f14:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f18:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002f1c:	fa93 f3a3 	rbit	r3, r3
 8002f20:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002f24:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f28:	fab3 f383 	clz	r3, r3
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	f043 0301 	orr.w	r3, r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d102      	bne.n	8002f42 <HAL_RCC_OscConfig+0x296>
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	e015      	b.n	8002f6e <HAL_RCC_OscConfig+0x2c2>
 8002f42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f46:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002f4e:	fa93 f3a3 	rbit	r3, r3
 8002f52:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002f56:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f5a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002f5e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002f62:	fa93 f3a3 	rbit	r3, r3
 8002f66:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <HAL_RCC_OscConfig+0x2f8>)
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f72:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002f76:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002f7a:	fa92 f2a2 	rbit	r2, r2
 8002f7e:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002f82:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002f86:	fab2 f282 	clz	r2, r2
 8002f8a:	b2d2      	uxtb	r2, r2
 8002f8c:	f042 0220 	orr.w	r2, r2, #32
 8002f90:	b2d2      	uxtb	r2, r2
 8002f92:	f002 021f 	and.w	r2, r2, #31
 8002f96:	2101      	movs	r1, #1
 8002f98:	fa01 f202 	lsl.w	r2, r1, r2
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1ab      	bne.n	8002efa <HAL_RCC_OscConfig+0x24e>
 8002fa2:	e002      	b.n	8002faa <HAL_RCC_OscConfig+0x2fe>
 8002fa4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002faa:	1d3b      	adds	r3, r7, #4
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 816f 	beq.w	8003298 <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002fba:	4bd0      	ldr	r3, [pc, #832]	; (80032fc <HAL_RCC_OscConfig+0x650>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 030c 	and.w	r3, r3, #12
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d00b      	beq.n	8002fde <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002fc6:	4bcd      	ldr	r3, [pc, #820]	; (80032fc <HAL_RCC_OscConfig+0x650>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f003 030c 	and.w	r3, r3, #12
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d16c      	bne.n	80030ac <HAL_RCC_OscConfig+0x400>
 8002fd2:	4bca      	ldr	r3, [pc, #808]	; (80032fc <HAL_RCC_OscConfig+0x650>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d166      	bne.n	80030ac <HAL_RCC_OscConfig+0x400>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe4:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002ff0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff4:	fab3 f383 	clz	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	b2db      	uxtb	r3, r3
 8003004:	2b01      	cmp	r3, #1
 8003006:	d102      	bne.n	800300e <HAL_RCC_OscConfig+0x362>
 8003008:	4bbc      	ldr	r3, [pc, #752]	; (80032fc <HAL_RCC_OscConfig+0x650>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	e013      	b.n	8003036 <HAL_RCC_OscConfig+0x38a>
 800300e:	2302      	movs	r3, #2
 8003010:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003020:	2302      	movs	r3, #2
 8003022:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003026:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800302a:	fa93 f3a3 	rbit	r3, r3
 800302e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003032:	4bb2      	ldr	r3, [pc, #712]	; (80032fc <HAL_RCC_OscConfig+0x650>)
 8003034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003036:	2202      	movs	r2, #2
 8003038:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800303c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003040:	fa92 f2a2 	rbit	r2, r2
 8003044:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003048:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800304c:	fab2 f282 	clz	r2, r2
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	f042 0220 	orr.w	r2, r2, #32
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	f002 021f 	and.w	r2, r2, #31
 800305c:	2101      	movs	r1, #1
 800305e:	fa01 f202 	lsl.w	r2, r1, r2
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d007      	beq.n	8003078 <HAL_RCC_OscConfig+0x3cc>
 8003068:	1d3b      	adds	r3, r7, #4
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d002      	beq.n	8003078 <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	f000 bd1b 	b.w	8003aae <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003078:	4ba0      	ldr	r3, [pc, #640]	; (80032fc <HAL_RCC_OscConfig+0x650>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	21f8      	movs	r1, #248	; 0xf8
 8003088:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003090:	fa91 f1a1 	rbit	r1, r1
 8003094:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003098:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800309c:	fab1 f181 	clz	r1, r1
 80030a0:	b2c9      	uxtb	r1, r1
 80030a2:	408b      	lsls	r3, r1
 80030a4:	4995      	ldr	r1, [pc, #596]	; (80032fc <HAL_RCC_OscConfig+0x650>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030aa:	e0f5      	b.n	8003298 <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ac:	1d3b      	adds	r3, r7, #4
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f000 8085 	beq.w	80031c2 <HAL_RCC_OscConfig+0x516>
 80030b8:	2301      	movs	r3, #1
 80030ba:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80030ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030ce:	fab3 f383 	clz	r3, r3
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80030d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	461a      	mov	r2, r3
 80030e0:	2301      	movs	r3, #1
 80030e2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7ff f8c8 	bl	8002278 <HAL_GetTick>
 80030e8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ec:	e00a      	b.n	8003104 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ee:	f7ff f8c3 	bl	8002278 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d902      	bls.n	8003104 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	f000 bcd5 	b.w	8003aae <HAL_RCC_OscConfig+0xe02>
 8003104:	2302      	movs	r3, #2
 8003106:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003116:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311a:	fab3 f383 	clz	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	095b      	lsrs	r3, r3, #5
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d102      	bne.n	8003134 <HAL_RCC_OscConfig+0x488>
 800312e:	4b73      	ldr	r3, [pc, #460]	; (80032fc <HAL_RCC_OscConfig+0x650>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	e013      	b.n	800315c <HAL_RCC_OscConfig+0x4b0>
 8003134:	2302      	movs	r3, #2
 8003136:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003146:	2302      	movs	r3, #2
 8003148:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800314c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003150:	fa93 f3a3 	rbit	r3, r3
 8003154:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003158:	4b68      	ldr	r3, [pc, #416]	; (80032fc <HAL_RCC_OscConfig+0x650>)
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	2202      	movs	r2, #2
 800315e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003162:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003166:	fa92 f2a2 	rbit	r2, r2
 800316a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 800316e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003172:	fab2 f282 	clz	r2, r2
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	f042 0220 	orr.w	r2, r2, #32
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	f002 021f 	and.w	r2, r2, #31
 8003182:	2101      	movs	r1, #1
 8003184:	fa01 f202 	lsl.w	r2, r1, r2
 8003188:	4013      	ands	r3, r2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0af      	beq.n	80030ee <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318e:	4b5b      	ldr	r3, [pc, #364]	; (80032fc <HAL_RCC_OscConfig+0x650>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003196:	1d3b      	adds	r3, r7, #4
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	21f8      	movs	r1, #248	; 0xf8
 800319e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a2:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80031a6:	fa91 f1a1 	rbit	r1, r1
 80031aa:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80031ae:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80031b2:	fab1 f181 	clz	r1, r1
 80031b6:	b2c9      	uxtb	r1, r1
 80031b8:	408b      	lsls	r3, r1
 80031ba:	4950      	ldr	r1, [pc, #320]	; (80032fc <HAL_RCC_OscConfig+0x650>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	600b      	str	r3, [r1, #0]
 80031c0:	e06a      	b.n	8003298 <HAL_RCC_OscConfig+0x5ec>
 80031c2:	2301      	movs	r3, #1
 80031c4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80031cc:	fa93 f3a3 	rbit	r3, r3
 80031d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80031d4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80031e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	461a      	mov	r2, r3
 80031ea:	2300      	movs	r3, #0
 80031ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ee:	f7ff f843 	bl	8002278 <HAL_GetTick>
 80031f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f6:	e00a      	b.n	800320e <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031f8:	f7ff f83e 	bl	8002278 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d902      	bls.n	800320e <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	f000 bc50 	b.w	8003aae <HAL_RCC_OscConfig+0xe02>
 800320e:	2302      	movs	r3, #2
 8003210:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003214:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003218:	fa93 f3a3 	rbit	r3, r3
 800321c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003220:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003224:	fab3 f383 	clz	r3, r3
 8003228:	b2db      	uxtb	r3, r3
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b01      	cmp	r3, #1
 8003236:	d102      	bne.n	800323e <HAL_RCC_OscConfig+0x592>
 8003238:	4b30      	ldr	r3, [pc, #192]	; (80032fc <HAL_RCC_OscConfig+0x650>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	e013      	b.n	8003266 <HAL_RCC_OscConfig+0x5ba>
 800323e:	2302      	movs	r3, #2
 8003240:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8003248:	fa93 f3a3 	rbit	r3, r3
 800324c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003250:	2302      	movs	r3, #2
 8003252:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003256:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8003262:	4b26      	ldr	r3, [pc, #152]	; (80032fc <HAL_RCC_OscConfig+0x650>)
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	2202      	movs	r2, #2
 8003268:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800326c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003270:	fa92 f2a2 	rbit	r2, r2
 8003274:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8003278:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800327c:	fab2 f282 	clz	r2, r2
 8003280:	b2d2      	uxtb	r2, r2
 8003282:	f042 0220 	orr.w	r2, r2, #32
 8003286:	b2d2      	uxtb	r2, r2
 8003288:	f002 021f 	and.w	r2, r2, #31
 800328c:	2101      	movs	r1, #1
 800328e:	fa01 f202 	lsl.w	r2, r1, r2
 8003292:	4013      	ands	r3, r2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1af      	bne.n	80031f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003298:	1d3b      	adds	r3, r7, #4
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80da 	beq.w	800345c <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032a8:	1d3b      	adds	r3, r7, #4
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d069      	beq.n	8003386 <HAL_RCC_OscConfig+0x6da>
 80032b2:	2301      	movs	r3, #1
 80032b4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80032bc:	fa93 f3a3 	rbit	r3, r3
 80032c0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80032c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCC_OscConfig+0x654>)
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	461a      	mov	r2, r3
 80032d8:	2301      	movs	r3, #1
 80032da:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032dc:	f7fe ffcc 	bl	8002278 <HAL_GetTick>
 80032e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e4:	e00e      	b.n	8003304 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032e6:	f7fe ffc7 	bl	8002278 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d906      	bls.n	8003304 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e3d9      	b.n	8003aae <HAL_RCC_OscConfig+0xe02>
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000
 8003300:	10908120 	.word	0x10908120
 8003304:	2302      	movs	r3, #2
 8003306:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003316:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800331a:	2202      	movs	r2, #2
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	fa93 f2a3 	rbit	r2, r3
 8003328:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003332:	2202      	movs	r2, #2
 8003334:	601a      	str	r2, [r3, #0]
 8003336:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	fa93 f2a3 	rbit	r2, r3
 8003340:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003344:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003346:	4ba5      	ldr	r3, [pc, #660]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 8003348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800334a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800334e:	2102      	movs	r1, #2
 8003350:	6019      	str	r1, [r3, #0]
 8003352:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	fa93 f1a3 	rbit	r1, r3
 800335c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003360:	6019      	str	r1, [r3, #0]
  return result;
 8003362:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	fab3 f383 	clz	r3, r3
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003372:	b2db      	uxtb	r3, r3
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	2101      	movs	r1, #1
 800337a:	fa01 f303 	lsl.w	r3, r1, r3
 800337e:	4013      	ands	r3, r2
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0b0      	beq.n	80032e6 <HAL_RCC_OscConfig+0x63a>
 8003384:	e06a      	b.n	800345c <HAL_RCC_OscConfig+0x7b0>
 8003386:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800338a:	2201      	movs	r2, #1
 800338c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	fa93 f2a3 	rbit	r2, r3
 8003398:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800339c:	601a      	str	r2, [r3, #0]
  return result;
 800339e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033a2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a4:	fab3 f383 	clz	r3, r3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	4b8c      	ldr	r3, [pc, #560]	; (80035e0 <HAL_RCC_OscConfig+0x934>)
 80033ae:	4413      	add	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	461a      	mov	r2, r3
 80033b4:	2300      	movs	r3, #0
 80033b6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b8:	f7fe ff5e 	bl	8002278 <HAL_GetTick>
 80033bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033c0:	e009      	b.n	80033d6 <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033c2:	f7fe ff59 	bl	8002278 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e36b      	b.n	8003aae <HAL_RCC_OscConfig+0xe02>
 80033d6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80033da:	2202      	movs	r2, #2
 80033dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	fa93 f2a3 	rbit	r2, r3
 80033e8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80033f2:	2202      	movs	r2, #2
 80033f4:	601a      	str	r2, [r3, #0]
 80033f6:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	fa93 f2a3 	rbit	r2, r3
 8003400:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003404:	601a      	str	r2, [r3, #0]
 8003406:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800340a:	2202      	movs	r2, #2
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	fa93 f2a3 	rbit	r2, r3
 8003418:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800341c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800341e:	4b6f      	ldr	r3, [pc, #444]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 8003420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003422:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8003426:	2102      	movs	r1, #2
 8003428:	6019      	str	r1, [r3, #0]
 800342a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	fa93 f1a3 	rbit	r1, r3
 8003434:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003438:	6019      	str	r1, [r3, #0]
  return result;
 800343a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	fab3 f383 	clz	r3, r3
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800344a:	b2db      	uxtb	r3, r3
 800344c:	f003 031f 	and.w	r3, r3, #31
 8003450:	2101      	movs	r1, #1
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1b2      	bne.n	80033c2 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345c:	1d3b      	adds	r3, r7, #4
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8158 	beq.w	800371c <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346c:	2300      	movs	r3, #0
 800346e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003472:	4b5a      	ldr	r3, [pc, #360]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d112      	bne.n	80034a4 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347e:	4b57      	ldr	r3, [pc, #348]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 8003480:	69db      	ldr	r3, [r3, #28]
 8003482:	4a56      	ldr	r2, [pc, #344]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003488:	61d3      	str	r3, [r2, #28]
 800348a:	4b54      	ldr	r3, [pc, #336]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003492:	f107 0308 	add.w	r3, r7, #8
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	f107 0308 	add.w	r3, r7, #8
 800349c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a4:	4b4f      	ldr	r3, [pc, #316]	; (80035e4 <HAL_RCC_OscConfig+0x938>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d11a      	bne.n	80034e6 <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034b0:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_RCC_OscConfig+0x938>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a4b      	ldr	r2, [pc, #300]	; (80035e4 <HAL_RCC_OscConfig+0x938>)
 80034b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034ba:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034bc:	f7fe fedc 	bl	8002278 <HAL_GetTick>
 80034c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c4:	e009      	b.n	80034da <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c6:	f7fe fed7 	bl	8002278 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b64      	cmp	r3, #100	; 0x64
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e2e9      	b.n	8003aae <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034da:	4b42      	ldr	r3, [pc, #264]	; (80035e4 <HAL_RCC_OscConfig+0x938>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0ef      	beq.n	80034c6 <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e6:	1d3b      	adds	r3, r7, #4
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d106      	bne.n	80034fe <HAL_RCC_OscConfig+0x852>
 80034f0:	4b3a      	ldr	r3, [pc, #232]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 80034f2:	6a1b      	ldr	r3, [r3, #32]
 80034f4:	4a39      	ldr	r2, [pc, #228]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	6213      	str	r3, [r2, #32]
 80034fc:	e02f      	b.n	800355e <HAL_RCC_OscConfig+0x8b2>
 80034fe:	1d3b      	adds	r3, r7, #4
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d10c      	bne.n	8003522 <HAL_RCC_OscConfig+0x876>
 8003508:	4b34      	ldr	r3, [pc, #208]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 800350a:	6a1b      	ldr	r3, [r3, #32]
 800350c:	4a33      	ldr	r2, [pc, #204]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 800350e:	f023 0301 	bic.w	r3, r3, #1
 8003512:	6213      	str	r3, [r2, #32]
 8003514:	4b31      	ldr	r3, [pc, #196]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4a30      	ldr	r2, [pc, #192]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 800351a:	f023 0304 	bic.w	r3, r3, #4
 800351e:	6213      	str	r3, [r2, #32]
 8003520:	e01d      	b.n	800355e <HAL_RCC_OscConfig+0x8b2>
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b05      	cmp	r3, #5
 800352a:	d10c      	bne.n	8003546 <HAL_RCC_OscConfig+0x89a>
 800352c:	4b2b      	ldr	r3, [pc, #172]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	4a2a      	ldr	r2, [pc, #168]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 8003532:	f043 0304 	orr.w	r3, r3, #4
 8003536:	6213      	str	r3, [r2, #32]
 8003538:	4b28      	ldr	r3, [pc, #160]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	4a27      	ldr	r2, [pc, #156]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	6213      	str	r3, [r2, #32]
 8003544:	e00b      	b.n	800355e <HAL_RCC_OscConfig+0x8b2>
 8003546:	4b25      	ldr	r3, [pc, #148]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	4a24      	ldr	r2, [pc, #144]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 800354c:	f023 0301 	bic.w	r3, r3, #1
 8003550:	6213      	str	r3, [r2, #32]
 8003552:	4b22      	ldr	r3, [pc, #136]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 8003554:	6a1b      	ldr	r3, [r3, #32]
 8003556:	4a21      	ldr	r2, [pc, #132]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 8003558:	f023 0304 	bic.w	r3, r3, #4
 800355c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800355e:	1d3b      	adds	r3, r7, #4
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d06b      	beq.n	8003640 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003568:	f7fe fe86 	bl	8002278 <HAL_GetTick>
 800356c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003570:	e00b      	b.n	800358a <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003572:	f7fe fe81 	bl	8002278 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e291      	b.n	8003aae <HAL_RCC_OscConfig+0xe02>
 800358a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800358e:	2202      	movs	r2, #2
 8003590:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003592:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	fa93 f2a3 	rbit	r2, r3
 800359c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035a6:	2202      	movs	r2, #2
 80035a8:	601a      	str	r2, [r3, #0]
 80035aa:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	fa93 f2a3 	rbit	r2, r3
 80035b4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80035b8:	601a      	str	r2, [r3, #0]
  return result;
 80035ba:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80035be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035c0:	fab3 f383 	clz	r3, r3
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	095b      	lsrs	r3, r3, #5
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f043 0302 	orr.w	r3, r3, #2
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d109      	bne.n	80035e8 <HAL_RCC_OscConfig+0x93c>
 80035d4:	4b01      	ldr	r3, [pc, #4]	; (80035dc <HAL_RCC_OscConfig+0x930>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	e014      	b.n	8003604 <HAL_RCC_OscConfig+0x958>
 80035da:	bf00      	nop
 80035dc:	40021000 	.word	0x40021000
 80035e0:	10908120 	.word	0x10908120
 80035e4:	40007000 	.word	0x40007000
 80035e8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80035ec:	2202      	movs	r2, #2
 80035ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	fa93 f2a3 	rbit	r2, r3
 80035fa:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80035fe:	601a      	str	r2, [r3, #0]
 8003600:	4bbb      	ldr	r3, [pc, #748]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003608:	2102      	movs	r1, #2
 800360a:	6011      	str	r1, [r2, #0]
 800360c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003610:	6812      	ldr	r2, [r2, #0]
 8003612:	fa92 f1a2 	rbit	r1, r2
 8003616:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800361a:	6011      	str	r1, [r2, #0]
  return result;
 800361c:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8003620:	6812      	ldr	r2, [r2, #0]
 8003622:	fab2 f282 	clz	r2, r2
 8003626:	b2d2      	uxtb	r2, r2
 8003628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800362c:	b2d2      	uxtb	r2, r2
 800362e:	f002 021f 	and.w	r2, r2, #31
 8003632:	2101      	movs	r1, #1
 8003634:	fa01 f202 	lsl.w	r2, r1, r2
 8003638:	4013      	ands	r3, r2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d099      	beq.n	8003572 <HAL_RCC_OscConfig+0x8c6>
 800363e:	e063      	b.n	8003708 <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003640:	f7fe fe1a 	bl	8002278 <HAL_GetTick>
 8003644:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003648:	e00b      	b.n	8003662 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800364a:	f7fe fe15 	bl	8002278 <HAL_GetTick>
 800364e:	4602      	mov	r2, r0
 8003650:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f241 3288 	movw	r2, #5000	; 0x1388
 800365a:	4293      	cmp	r3, r2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e225      	b.n	8003aae <HAL_RCC_OscConfig+0xe02>
 8003662:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8003666:	2202      	movs	r2, #2
 8003668:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	fa93 f2a3 	rbit	r2, r3
 8003674:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800367e:	2202      	movs	r2, #2
 8003680:	601a      	str	r2, [r3, #0]
 8003682:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	fa93 f2a3 	rbit	r2, r3
 800368c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003690:	601a      	str	r2, [r3, #0]
  return result;
 8003692:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003696:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	f043 0302 	orr.w	r3, r3, #2
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d102      	bne.n	80036b2 <HAL_RCC_OscConfig+0xa06>
 80036ac:	4b90      	ldr	r3, [pc, #576]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	e00d      	b.n	80036ce <HAL_RCC_OscConfig+0xa22>
 80036b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036b6:	2202      	movs	r2, #2
 80036b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	fa93 f2a3 	rbit	r2, r3
 80036c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80036c8:	601a      	str	r2, [r3, #0]
 80036ca:	4b89      	ldr	r3, [pc, #548]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 80036cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ce:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80036d2:	2102      	movs	r1, #2
 80036d4:	6011      	str	r1, [r2, #0]
 80036d6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	fa92 f1a2 	rbit	r1, r2
 80036e0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80036e4:	6011      	str	r1, [r2, #0]
  return result;
 80036e6:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	fab2 f282 	clz	r2, r2
 80036f0:	b2d2      	uxtb	r2, r2
 80036f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	f002 021f 	and.w	r2, r2, #31
 80036fc:	2101      	movs	r1, #1
 80036fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d1a0      	bne.n	800364a <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003708:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800370c:	2b01      	cmp	r3, #1
 800370e:	d105      	bne.n	800371c <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003710:	4b77      	ldr	r3, [pc, #476]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	4a76      	ldr	r2, [pc, #472]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 8003716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800371c:	1d3b      	adds	r3, r7, #4
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 81c2 	beq.w	8003aac <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003728:	4b71      	ldr	r3, [pc, #452]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 030c 	and.w	r3, r3, #12
 8003730:	2b08      	cmp	r3, #8
 8003732:	f000 819c 	beq.w	8003a6e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003736:	1d3b      	adds	r3, r7, #4
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69db      	ldr	r3, [r3, #28]
 800373c:	2b02      	cmp	r3, #2
 800373e:	f040 8114 	bne.w	800396a <HAL_RCC_OscConfig+0xcbe>
 8003742:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003746:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800374a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800374c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	fa93 f2a3 	rbit	r2, r3
 8003756:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800375a:	601a      	str	r2, [r3, #0]
  return result;
 800375c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003760:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003762:	fab3 f383 	clz	r3, r3
 8003766:	b2db      	uxtb	r3, r3
 8003768:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800376c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	461a      	mov	r2, r3
 8003774:	2300      	movs	r3, #0
 8003776:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7fe fd7e 	bl	8002278 <HAL_GetTick>
 800377c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003780:	e009      	b.n	8003796 <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003782:	f7fe fd79 	bl	8002278 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	2b02      	cmp	r3, #2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e18b      	b.n	8003aae <HAL_RCC_OscConfig+0xe02>
 8003796:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800379a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800379e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	fa93 f2a3 	rbit	r2, r3
 80037aa:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80037ae:	601a      	str	r2, [r3, #0]
  return result;
 80037b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80037b4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037b6:	fab3 f383 	clz	r3, r3
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	095b      	lsrs	r3, r3, #5
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d102      	bne.n	80037d0 <HAL_RCC_OscConfig+0xb24>
 80037ca:	4b49      	ldr	r3, [pc, #292]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	e01b      	b.n	8003808 <HAL_RCC_OscConfig+0xb5c>
 80037d0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	fa93 f2a3 	rbit	r2, r3
 80037e4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	fa93 f2a3 	rbit	r2, r3
 80037fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003802:	601a      	str	r2, [r3, #0]
 8003804:	4b3a      	ldr	r3, [pc, #232]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 8003806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003808:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800380c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003810:	6011      	str	r1, [r2, #0]
 8003812:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003816:	6812      	ldr	r2, [r2, #0]
 8003818:	fa92 f1a2 	rbit	r1, r2
 800381c:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003820:	6011      	str	r1, [r2, #0]
  return result;
 8003822:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8003826:	6812      	ldr	r2, [r2, #0]
 8003828:	fab2 f282 	clz	r2, r2
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	f042 0220 	orr.w	r2, r2, #32
 8003832:	b2d2      	uxtb	r2, r2
 8003834:	f002 021f 	and.w	r2, r2, #31
 8003838:	2101      	movs	r1, #1
 800383a:	fa01 f202 	lsl.w	r2, r1, r2
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d19e      	bne.n	8003782 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003844:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003852:	1d3b      	adds	r3, r7, #4
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	430b      	orrs	r3, r1
 800385a:	4925      	ldr	r1, [pc, #148]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 800385c:	4313      	orrs	r3, r2
 800385e:	604b      	str	r3, [r1, #4]
 8003860:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003864:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003868:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	fa93 f2a3 	rbit	r2, r3
 8003874:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003878:	601a      	str	r2, [r3, #0]
  return result;
 800387a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800387e:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003880:	fab3 f383 	clz	r3, r3
 8003884:	b2db      	uxtb	r3, r3
 8003886:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800388a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	461a      	mov	r2, r3
 8003892:	2301      	movs	r3, #1
 8003894:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003896:	f7fe fcef 	bl	8002278 <HAL_GetTick>
 800389a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800389e:	e009      	b.n	80038b4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038a0:	f7fe fcea 	bl	8002278 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e0fc      	b.n	8003aae <HAL_RCC_OscConfig+0xe02>
 80038b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	fa93 f2a3 	rbit	r2, r3
 80038c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038cc:	601a      	str	r2, [r3, #0]
  return result;
 80038ce:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80038d2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038d4:	fab3 f383 	clz	r3, r3
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	f043 0301 	orr.w	r3, r3, #1
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d105      	bne.n	80038f4 <HAL_RCC_OscConfig+0xc48>
 80038e8:	4b01      	ldr	r3, [pc, #4]	; (80038f0 <HAL_RCC_OscConfig+0xc44>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	e01e      	b.n	800392c <HAL_RCC_OscConfig+0xc80>
 80038ee:	bf00      	nop
 80038f0:	40021000 	.word	0x40021000
 80038f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80038f8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80038fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038fe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	fa93 f2a3 	rbit	r2, r3
 8003908:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003912:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	fa93 f2a3 	rbit	r2, r3
 8003922:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	4b63      	ldr	r3, [pc, #396]	; (8003ab8 <HAL_RCC_OscConfig+0xe0c>)
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003930:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003934:	6011      	str	r1, [r2, #0]
 8003936:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	fa92 f1a2 	rbit	r1, r2
 8003940:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8003944:	6011      	str	r1, [r2, #0]
  return result;
 8003946:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	fab2 f282 	clz	r2, r2
 8003950:	b2d2      	uxtb	r2, r2
 8003952:	f042 0220 	orr.w	r2, r2, #32
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	f002 021f 	and.w	r2, r2, #31
 800395c:	2101      	movs	r1, #1
 800395e:	fa01 f202 	lsl.w	r2, r1, r2
 8003962:	4013      	ands	r3, r2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d09b      	beq.n	80038a0 <HAL_RCC_OscConfig+0xbf4>
 8003968:	e0a0      	b.n	8003aac <HAL_RCC_OscConfig+0xe00>
 800396a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800396e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003972:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003974:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	fa93 f2a3 	rbit	r2, r3
 800397e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003982:	601a      	str	r2, [r3, #0]
  return result;
 8003984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003988:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800398a:	fab3 f383 	clz	r3, r3
 800398e:	b2db      	uxtb	r3, r3
 8003990:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003994:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	461a      	mov	r2, r3
 800399c:	2300      	movs	r3, #0
 800399e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a0:	f7fe fc6a 	bl	8002278 <HAL_GetTick>
 80039a4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039a8:	e009      	b.n	80039be <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039aa:	f7fe fc65 	bl	8002278 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e077      	b.n	8003aae <HAL_RCC_OscConfig+0xe02>
 80039be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80039c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	fa93 f2a3 	rbit	r2, r3
 80039d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d6:	601a      	str	r2, [r3, #0]
  return result;
 80039d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039dc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80039de:	fab3 f383 	clz	r3, r3
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	095b      	lsrs	r3, r3, #5
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	f043 0301 	orr.w	r3, r3, #1
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d102      	bne.n	80039f8 <HAL_RCC_OscConfig+0xd4c>
 80039f2:	4b31      	ldr	r3, [pc, #196]	; (8003ab8 <HAL_RCC_OscConfig+0xe0c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	e01b      	b.n	8003a30 <HAL_RCC_OscConfig+0xd84>
 80039f8:	f107 0320 	add.w	r3, r7, #32
 80039fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a02:	f107 0320 	add.w	r3, r7, #32
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	fa93 f2a3 	rbit	r2, r3
 8003a0c:	f107 031c 	add.w	r3, r7, #28
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	f107 0318 	add.w	r3, r7, #24
 8003a16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	f107 0318 	add.w	r3, r7, #24
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	fa93 f2a3 	rbit	r2, r3
 8003a26:	f107 0314 	add.w	r3, r7, #20
 8003a2a:	601a      	str	r2, [r3, #0]
 8003a2c:	4b22      	ldr	r3, [pc, #136]	; (8003ab8 <HAL_RCC_OscConfig+0xe0c>)
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	f107 0210 	add.w	r2, r7, #16
 8003a34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003a38:	6011      	str	r1, [r2, #0]
 8003a3a:	f107 0210 	add.w	r2, r7, #16
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	fa92 f1a2 	rbit	r1, r2
 8003a44:	f107 020c 	add.w	r2, r7, #12
 8003a48:	6011      	str	r1, [r2, #0]
  return result;
 8003a4a:	f107 020c 	add.w	r2, r7, #12
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	fab2 f282 	clz	r2, r2
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	f042 0220 	orr.w	r2, r2, #32
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	f002 021f 	and.w	r2, r2, #31
 8003a60:	2101      	movs	r1, #1
 8003a62:	fa01 f202 	lsl.w	r2, r1, r2
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d19e      	bne.n	80039aa <HAL_RCC_OscConfig+0xcfe>
 8003a6c:	e01e      	b.n	8003aac <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a6e:	1d3b      	adds	r3, r7, #4
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d101      	bne.n	8003a7c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e018      	b.n	8003aae <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a7c:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <HAL_RCC_OscConfig+0xe0c>)
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003a84:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a88:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a8c:	1d3b      	adds	r3, r7, #4
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d108      	bne.n	8003aa8 <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003a96:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003a9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a9e:	1d3b      	adds	r3, r7, #4
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40021000 	.word	0x40021000

08003abc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b09e      	sub	sp, #120	; 0x78
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e162      	b.n	8003d9a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b90      	ldr	r3, [pc, #576]	; (8003d18 <HAL_RCC_ClockConfig+0x25c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d910      	bls.n	8003b04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b8d      	ldr	r3, [pc, #564]	; (8003d18 <HAL_RCC_ClockConfig+0x25c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 0207 	bic.w	r2, r3, #7
 8003aea:	498b      	ldr	r1, [pc, #556]	; (8003d18 <HAL_RCC_ClockConfig+0x25c>)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b89      	ldr	r3, [pc, #548]	; (8003d18 <HAL_RCC_ClockConfig+0x25c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0307 	and.w	r3, r3, #7
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e14a      	b.n	8003d9a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b10:	4b82      	ldr	r3, [pc, #520]	; (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	497f      	ldr	r1, [pc, #508]	; (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 80dc 	beq.w	8003ce8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d13c      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xf6>
 8003b38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b40:	fa93 f3a3 	rbit	r3, r3
 8003b44:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b48:	fab3 f383 	clz	r3, r3
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d102      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xa6>
 8003b5c:	4b6f      	ldr	r3, [pc, #444]	; (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	e00f      	b.n	8003b82 <HAL_RCC_ClockConfig+0xc6>
 8003b62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b6a:	fa93 f3a3 	rbit	r3, r3
 8003b6e:	667b      	str	r3, [r7, #100]	; 0x64
 8003b70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b74:	663b      	str	r3, [r7, #96]	; 0x60
 8003b76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b78:	fa93 f3a3 	rbit	r3, r3
 8003b7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b7e:	4b67      	ldr	r3, [pc, #412]	; (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003b86:	65ba      	str	r2, [r7, #88]	; 0x58
 8003b88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b8a:	fa92 f2a2 	rbit	r2, r2
 8003b8e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003b90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003b92:	fab2 f282 	clz	r2, r2
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	f042 0220 	orr.w	r2, r2, #32
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	f002 021f 	and.w	r2, r2, #31
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d17b      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e0f3      	b.n	8003d9a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d13c      	bne.n	8003c34 <HAL_RCC_ClockConfig+0x178>
 8003bba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bbe:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc2:	fa93 f3a3 	rbit	r3, r3
 8003bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bca:	fab3 f383 	clz	r3, r3
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	095b      	lsrs	r3, r3, #5
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d102      	bne.n	8003be4 <HAL_RCC_ClockConfig+0x128>
 8003bde:	4b4f      	ldr	r3, [pc, #316]	; (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	e00f      	b.n	8003c04 <HAL_RCC_ClockConfig+0x148>
 8003be4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003be8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bec:	fa93 f3a3 	rbit	r3, r3
 8003bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8003bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf6:	643b      	str	r3, [r7, #64]	; 0x40
 8003bf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bfa:	fa93 f3a3 	rbit	r3, r3
 8003bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c00:	4b46      	ldr	r3, [pc, #280]	; (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c08:	63ba      	str	r2, [r7, #56]	; 0x38
 8003c0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c0c:	fa92 f2a2 	rbit	r2, r2
 8003c10:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003c12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c14:	fab2 f282 	clz	r2, r2
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	f042 0220 	orr.w	r2, r2, #32
 8003c1e:	b2d2      	uxtb	r2, r2
 8003c20:	f002 021f 	and.w	r2, r2, #31
 8003c24:	2101      	movs	r1, #1
 8003c26:	fa01 f202 	lsl.w	r2, r1, r2
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d13a      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e0b2      	b.n	8003d9a <HAL_RCC_ClockConfig+0x2de>
 8003c34:	2302      	movs	r3, #2
 8003c36:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	fa93 f3a3 	rbit	r3, r3
 8003c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c42:	fab3 f383 	clz	r3, r3
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d102      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x1a0>
 8003c56:	4b31      	ldr	r3, [pc, #196]	; (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	e00d      	b.n	8003c78 <HAL_RCC_ClockConfig+0x1bc>
 8003c5c:	2302      	movs	r3, #2
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	627b      	str	r3, [r7, #36]	; 0x24
 8003c68:	2302      	movs	r3, #2
 8003c6a:	623b      	str	r3, [r7, #32]
 8003c6c:	6a3b      	ldr	r3, [r7, #32]
 8003c6e:	fa93 f3a3 	rbit	r3, r3
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	4b29      	ldr	r3, [pc, #164]	; (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	2202      	movs	r2, #2
 8003c7a:	61ba      	str	r2, [r7, #24]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	fa92 f2a2 	rbit	r2, r2
 8003c82:	617a      	str	r2, [r7, #20]
  return result;
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	fab2 f282 	clz	r2, r2
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	f042 0220 	orr.w	r2, r2, #32
 8003c90:	b2d2      	uxtb	r2, r2
 8003c92:	f002 021f 	and.w	r2, r2, #31
 8003c96:	2101      	movs	r1, #1
 8003c98:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e079      	b.n	8003d9a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ca6:	4b1d      	ldr	r3, [pc, #116]	; (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f023 0203 	bic.w	r2, r3, #3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	491a      	ldr	r1, [pc, #104]	; (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cb8:	f7fe fade 	bl	8002278 <HAL_GetTick>
 8003cbc:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cc0:	f7fe fada 	bl	8002278 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e061      	b.n	8003d9a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cd6:	4b11      	ldr	r3, [pc, #68]	; (8003d1c <HAL_RCC_ClockConfig+0x260>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f003 020c 	and.w	r2, r3, #12
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d1eb      	bne.n	8003cc0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCC_ClockConfig+0x25c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0307 	and.w	r3, r3, #7
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d214      	bcs.n	8003d20 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf6:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <HAL_RCC_ClockConfig+0x25c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 0207 	bic.w	r2, r3, #7
 8003cfe:	4906      	ldr	r1, [pc, #24]	; (8003d18 <HAL_RCC_ClockConfig+0x25c>)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d06:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <HAL_RCC_ClockConfig+0x25c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0307 	and.w	r3, r3, #7
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d005      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e040      	b.n	8003d9a <HAL_RCC_ClockConfig+0x2de>
 8003d18:	40022000 	.word	0x40022000
 8003d1c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d2c:	4b1d      	ldr	r3, [pc, #116]	; (8003da4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	491a      	ldr	r1, [pc, #104]	; (8003da4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d4a:	4b16      	ldr	r3, [pc, #88]	; (8003da4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	4912      	ldr	r1, [pc, #72]	; (8003da4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003d5e:	f000 f829 	bl	8003db4 <HAL_RCC_GetSysClockFreq>
 8003d62:	4601      	mov	r1, r0
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <HAL_RCC_ClockConfig+0x2e8>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d6c:	22f0      	movs	r2, #240	; 0xf0
 8003d6e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	fa92 f2a2 	rbit	r2, r2
 8003d76:	60fa      	str	r2, [r7, #12]
  return result;
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	fab2 f282 	clz	r2, r2
 8003d7e:	b2d2      	uxtb	r2, r2
 8003d80:	40d3      	lsrs	r3, r2
 8003d82:	4a09      	ldr	r2, [pc, #36]	; (8003da8 <HAL_RCC_ClockConfig+0x2ec>)
 8003d84:	5cd3      	ldrb	r3, [r2, r3]
 8003d86:	fa21 f303 	lsr.w	r3, r1, r3
 8003d8a:	4a08      	ldr	r2, [pc, #32]	; (8003dac <HAL_RCC_ClockConfig+0x2f0>)
 8003d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003d8e:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <HAL_RCC_ClockConfig+0x2f4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fe fa2c 	bl	80021f0 <HAL_InitTick>
  
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3778      	adds	r7, #120	; 0x78
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40021000 	.word	0x40021000
 8003da8:	080097ac 	.word	0x080097ac
 8003dac:	2000003c 	.word	0x2000003c
 8003db0:	20000040 	.word	0x20000040

08003db4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b08b      	sub	sp, #44	; 0x2c
 8003db8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003dce:	4b29      	ldr	r3, [pc, #164]	; (8003e74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 030c 	and.w	r3, r3, #12
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d002      	beq.n	8003de4 <HAL_RCC_GetSysClockFreq+0x30>
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d003      	beq.n	8003dea <HAL_RCC_GetSysClockFreq+0x36>
 8003de2:	e03c      	b.n	8003e5e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003de4:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003de6:	623b      	str	r3, [r7, #32]
      break;
 8003de8:	e03c      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003df0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003df4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	fa92 f2a2 	rbit	r2, r2
 8003dfc:	607a      	str	r2, [r7, #4]
  return result;
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	fab2 f282 	clz	r2, r2
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	40d3      	lsrs	r3, r2
 8003e08:	4a1c      	ldr	r2, [pc, #112]	; (8003e7c <HAL_RCC_GetSysClockFreq+0xc8>)
 8003e0a:	5cd3      	ldrb	r3, [r2, r3]
 8003e0c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003e0e:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	220f      	movs	r2, #15
 8003e18:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	fa92 f2a2 	rbit	r2, r2
 8003e20:	60fa      	str	r2, [r7, #12]
  return result;
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	fab2 f282 	clz	r2, r2
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	40d3      	lsrs	r3, r2
 8003e2c:	4a14      	ldr	r2, [pc, #80]	; (8003e80 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003e2e:	5cd3      	ldrb	r3, [r2, r3]
 8003e30:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003e3c:	4a0e      	ldr	r2, [pc, #56]	; (8003e78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	fbb2 f2f3 	udiv	r2, r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	fb02 f303 	mul.w	r3, r2, r3
 8003e4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4c:	e004      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	4a0c      	ldr	r2, [pc, #48]	; (8003e84 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003e52:	fb02 f303 	mul.w	r3, r2, r3
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	623b      	str	r3, [r7, #32]
      break;
 8003e5c:	e002      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e5e:	4b06      	ldr	r3, [pc, #24]	; (8003e78 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003e60:	623b      	str	r3, [r7, #32]
      break;
 8003e62:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e64:	6a3b      	ldr	r3, [r7, #32]
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	372c      	adds	r7, #44	; 0x2c
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	40021000 	.word	0x40021000
 8003e78:	007a1200 	.word	0x007a1200
 8003e7c:	080097c4 	.word	0x080097c4
 8003e80:	080097d4 	.word	0x080097d4
 8003e84:	003d0900 	.word	0x003d0900

08003e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e8c:	4b03      	ldr	r3, [pc, #12]	; (8003e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
 8003e9a:	bf00      	nop
 8003e9c:	2000003c 	.word	0x2000003c

08003ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003ea6:	f7ff ffef 	bl	8003e88 <HAL_RCC_GetHCLKFreq>
 8003eaa:	4601      	mov	r1, r0
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003eb4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003eb8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	fa92 f2a2 	rbit	r2, r2
 8003ec0:	603a      	str	r2, [r7, #0]
  return result;
 8003ec2:	683a      	ldr	r2, [r7, #0]
 8003ec4:	fab2 f282 	clz	r2, r2
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	40d3      	lsrs	r3, r2
 8003ecc:	4a04      	ldr	r2, [pc, #16]	; (8003ee0 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003ece:	5cd3      	ldrb	r3, [r2, r3]
 8003ed0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	080097bc 	.word	0x080097bc

08003ee4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b082      	sub	sp, #8
 8003ee8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003eea:	f7ff ffcd 	bl	8003e88 <HAL_RCC_GetHCLKFreq>
 8003eee:	4601      	mov	r1, r0
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	; (8003f20 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8003ef8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003efc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efe:	687a      	ldr	r2, [r7, #4]
 8003f00:	fa92 f2a2 	rbit	r2, r2
 8003f04:	603a      	str	r2, [r7, #0]
  return result;
 8003f06:	683a      	ldr	r2, [r7, #0]
 8003f08:	fab2 f282 	clz	r2, r2
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	40d3      	lsrs	r3, r2
 8003f10:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003f12:	5cd3      	ldrb	r3, [r2, r3]
 8003f14:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40021000 	.word	0x40021000
 8003f24:	080097bc 	.word	0x080097bc

08003f28 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b092      	sub	sp, #72	; 0x48
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f30:	2300      	movs	r3, #0
 8003f32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80d7 	beq.w	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8003f46:	2300      	movs	r3, #0
 8003f48:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f4c:	4b4e      	ldr	r3, [pc, #312]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10e      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f58:	4b4b      	ldr	r3, [pc, #300]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	4a4a      	ldr	r2, [pc, #296]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f62:	61d3      	str	r3, [r2, #28]
 8003f64:	4b48      	ldr	r3, [pc, #288]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6c:	60bb      	str	r3, [r7, #8]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f70:	2301      	movs	r3, #1
 8003f72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f76:	4b45      	ldr	r3, [pc, #276]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d118      	bne.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f82:	4b42      	ldr	r3, [pc, #264]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a41      	ldr	r2, [pc, #260]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003f88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f8c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f8e:	f7fe f973 	bl	8002278 <HAL_GetTick>
 8003f92:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f94:	e008      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f96:	f7fe f96f 	bl	8002278 <HAL_GetTick>
 8003f9a:	4602      	mov	r2, r0
 8003f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	2b64      	cmp	r3, #100	; 0x64
 8003fa2:	d901      	bls.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e169      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa8:	4b38      	ldr	r3, [pc, #224]	; (800408c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d0f0      	beq.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fb4:	4b34      	ldr	r3, [pc, #208]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fb6:	6a1b      	ldr	r3, [r3, #32]
 8003fb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f000 8084 	beq.w	80040ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d07c      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fd4:	4b2c      	ldr	r3, [pc, #176]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fde:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fe2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe6:	fa93 f3a3 	rbit	r3, r3
 8003fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fee:	fab3 f383 	clz	r3, r3
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	4b26      	ldr	r3, [pc, #152]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	2301      	movs	r3, #1
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004006:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004012:	fab3 f383 	clz	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	461a      	mov	r2, r3
 800401a:	4b1d      	ldr	r3, [pc, #116]	; (8004090 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800401c:	4413      	add	r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	461a      	mov	r2, r3
 8004022:	2300      	movs	r3, #0
 8004024:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004026:	4a18      	ldr	r2, [pc, #96]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800402c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	2b00      	cmp	r3, #0
 8004034:	d04b      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004036:	f7fe f91f 	bl	8002278 <HAL_GetTick>
 800403a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800403c:	e00a      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403e:	f7fe f91b 	bl	8002278 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	f241 3288 	movw	r2, #5000	; 0x1388
 800404c:	4293      	cmp	r3, r2
 800404e:	d901      	bls.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e113      	b.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8004054:	2302      	movs	r3, #2
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	fa93 f3a3 	rbit	r3, r3
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
 8004060:	2302      	movs	r3, #2
 8004062:	623b      	str	r3, [r7, #32]
 8004064:	6a3b      	ldr	r3, [r7, #32]
 8004066:	fa93 f3a3 	rbit	r3, r3
 800406a:	61fb      	str	r3, [r7, #28]
  return result;
 800406c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800406e:	fab3 f383 	clz	r3, r3
 8004072:	b2db      	uxtb	r3, r3
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f043 0302 	orr.w	r3, r3, #2
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b02      	cmp	r3, #2
 8004080:	d108      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004082:	4b01      	ldr	r3, [pc, #4]	; (8004088 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	e00d      	b.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004088:	40021000 	.word	0x40021000
 800408c:	40007000 	.word	0x40007000
 8004090:	10908100 	.word	0x10908100
 8004094:	2302      	movs	r3, #2
 8004096:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	fa93 f3a3 	rbit	r3, r3
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	4b78      	ldr	r3, [pc, #480]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	2202      	movs	r2, #2
 80040a6:	613a      	str	r2, [r7, #16]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	fa92 f2a2 	rbit	r2, r2
 80040ae:	60fa      	str	r2, [r7, #12]
  return result;
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	fab2 f282 	clz	r2, r2
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	f002 021f 	and.w	r2, r2, #31
 80040c2:	2101      	movs	r1, #1
 80040c4:	fa01 f202 	lsl.w	r2, r1, r2
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d0b7      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80040ce:	4b6d      	ldr	r3, [pc, #436]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	496a      	ldr	r1, [pc, #424]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80040e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d105      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040e8:	4b66      	ldr	r3, [pc, #408]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ea:	69db      	ldr	r3, [r3, #28]
 80040ec:	4a65      	ldr	r2, [pc, #404]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80040ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d008      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004100:	4b60      	ldr	r3, [pc, #384]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004104:	f023 0203 	bic.w	r2, r3, #3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	495d      	ldr	r1, [pc, #372]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800410e:	4313      	orrs	r3, r2
 8004110:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d008      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800411e:	4b59      	ldr	r3, [pc, #356]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	4956      	ldr	r1, [pc, #344]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800412c:	4313      	orrs	r3, r2
 800412e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0304 	and.w	r3, r3, #4
 8004138:	2b00      	cmp	r3, #0
 800413a:	d008      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800413c:	4b51      	ldr	r3, [pc, #324]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800413e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004140:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	494e      	ldr	r1, [pc, #312]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800414a:	4313      	orrs	r3, r2
 800414c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0320 	and.w	r3, r3, #32
 8004156:	2b00      	cmp	r3, #0
 8004158:	d008      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800415a:	4b4a      	ldr	r3, [pc, #296]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415e:	f023 0210 	bic.w	r2, r3, #16
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	4947      	ldr	r1, [pc, #284]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004168:	4313      	orrs	r3, r2
 800416a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d008      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004178:	4b42      	ldr	r3, [pc, #264]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004184:	493f      	ldr	r1, [pc, #252]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004186:	4313      	orrs	r3, r2
 8004188:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004192:	2b00      	cmp	r3, #0
 8004194:	d008      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004196:	4b3b      	ldr	r3, [pc, #236]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	f023 0220 	bic.w	r2, r3, #32
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	4938      	ldr	r1, [pc, #224]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d008      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041b4:	4b33      	ldr	r3, [pc, #204]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	695b      	ldr	r3, [r3, #20]
 80041c0:	4930      	ldr	r1, [pc, #192]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0310 	and.w	r3, r3, #16
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d008      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041d2:	4b2c      	ldr	r3, [pc, #176]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	4929      	ldr	r1, [pc, #164]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041f0:	4b24      	ldr	r3, [pc, #144]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fc:	4921      	ldr	r1, [pc, #132]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420a:	2b00      	cmp	r3, #0
 800420c:	d008      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800420e:	4b1d      	ldr	r3, [pc, #116]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	491a      	ldr	r1, [pc, #104]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800421c:	4313      	orrs	r3, r2
 800421e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800422c:	4b15      	ldr	r3, [pc, #84]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800422e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004230:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004238:	4912      	ldr	r1, [pc, #72]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800423a:	4313      	orrs	r3, r2
 800423c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d008      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800424a:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004256:	490b      	ldr	r1, [pc, #44]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004258:	4313      	orrs	r3, r2
 800425a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d008      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004268:	4b06      	ldr	r3, [pc, #24]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004274:	4903      	ldr	r1, [pc, #12]	; (8004284 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8004276:	4313      	orrs	r3, r2
 8004278:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3748      	adds	r7, #72	; 0x48
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	40021000 	.word	0x40021000

08004288 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e084      	b.n	80043a4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d106      	bne.n	80042ba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042b4:	6878      	ldr	r0, [r7, #4]
 80042b6:	f7fd fdbf 	bl	8001e38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2202      	movs	r2, #2
 80042be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042d0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042da:	d902      	bls.n	80042e2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042dc:	2300      	movs	r3, #0
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	e002      	b.n	80042e8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80042e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80042e6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80042f0:	d007      	beq.n	8004302 <HAL_SPI_Init+0x7a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042fa:	d002      	beq.n	8004302 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2200      	movs	r2, #0
 8004300:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10b      	bne.n	8004322 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004312:	d903      	bls.n	800431c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
 800431a:	e002      	b.n	8004322 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	431a      	orrs	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	431a      	orrs	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004340:	431a      	orrs	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	431a      	orrs	r2, r3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	ea42 0103 	orr.w	r1, r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	430a      	orrs	r2, r1
 800435a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	0c1b      	lsrs	r3, r3, #16
 8004362:	f003 0204 	and.w	r2, r3, #4
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436a:	431a      	orrs	r2, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	ea42 0103 	orr.w	r1, r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	430a      	orrs	r2, r1
 8004382:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	69da      	ldr	r2, [r3, #28]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004392:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}

080043ac <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b082      	sub	sp, #8
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e01a      	b.n	80043f4 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2202      	movs	r2, #2
 80043c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fd fd9a 	bl	8001f10 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b08a      	sub	sp, #40	; 0x28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800440a:	2301      	movs	r3, #1
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800441a:	2b01      	cmp	r3, #1
 800441c:	d101      	bne.n	8004422 <HAL_SPI_TransmitReceive+0x26>
 800441e:	2302      	movs	r3, #2
 8004420:	e1fb      	b.n	800481a <HAL_SPI_TransmitReceive+0x41e>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800442a:	f7fd ff25 	bl	8002278 <HAL_GetTick>
 800442e:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004436:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800443e:	887b      	ldrh	r3, [r7, #2]
 8004440:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004442:	887b      	ldrh	r3, [r7, #2]
 8004444:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004446:	7efb      	ldrb	r3, [r7, #27]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d00e      	beq.n	800446a <HAL_SPI_TransmitReceive+0x6e>
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004452:	d106      	bne.n	8004462 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d102      	bne.n	8004462 <HAL_SPI_TransmitReceive+0x66>
 800445c:	7efb      	ldrb	r3, [r7, #27]
 800445e:	2b04      	cmp	r3, #4
 8004460:	d003      	beq.n	800446a <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004462:	2302      	movs	r3, #2
 8004464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004468:	e1cd      	b.n	8004806 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <HAL_SPI_TransmitReceive+0x80>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <HAL_SPI_TransmitReceive+0x80>
 8004476:	887b      	ldrh	r3, [r7, #2]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d103      	bne.n	8004484 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004482:	e1c0      	b.n	8004806 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b04      	cmp	r3, #4
 800448e:	d003      	beq.n	8004498 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2205      	movs	r2, #5
 8004494:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	887a      	ldrh	r2, [r7, #2]
 80044a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	887a      	ldrh	r2, [r7, #2]
 80044b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	887a      	ldrh	r2, [r7, #2]
 80044be:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	887a      	ldrh	r2, [r7, #2]
 80044c4:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80044da:	d802      	bhi.n	80044e2 <HAL_SPI_TransmitReceive+0xe6>
 80044dc:	8a3b      	ldrh	r3, [r7, #16]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d908      	bls.n	80044f4 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	685a      	ldr	r2, [r3, #4]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044f0:	605a      	str	r2, [r3, #4]
 80044f2:	e007      	b.n	8004504 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685a      	ldr	r2, [r3, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004502:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800450e:	2b40      	cmp	r3, #64	; 0x40
 8004510:	d007      	beq.n	8004522 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004520:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800452a:	d97c      	bls.n	8004626 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d002      	beq.n	800453a <HAL_SPI_TransmitReceive+0x13e>
 8004534:	8a7b      	ldrh	r3, [r7, #18]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d169      	bne.n	800460e <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	881a      	ldrh	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	1c9a      	adds	r2, r3, #2
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800455e:	e056      	b.n	800460e <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b02      	cmp	r3, #2
 800456c:	d11b      	bne.n	80045a6 <HAL_SPI_TransmitReceive+0x1aa>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004572:	b29b      	uxth	r3, r3
 8004574:	2b00      	cmp	r3, #0
 8004576:	d016      	beq.n	80045a6 <HAL_SPI_TransmitReceive+0x1aa>
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	2b01      	cmp	r3, #1
 800457c:	d113      	bne.n	80045a6 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004582:	881a      	ldrh	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	1c9a      	adds	r2, r3, #2
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004598:	b29b      	uxth	r3, r3
 800459a:	3b01      	subs	r3, #1
 800459c:	b29a      	uxth	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80045a2:	2300      	movs	r3, #0
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d11c      	bne.n	80045ee <HAL_SPI_TransmitReceive+0x1f2>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d016      	beq.n	80045ee <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	b292      	uxth	r2, r2
 80045cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	1c9a      	adds	r2, r3, #2
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045de:	b29b      	uxth	r3, r3
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045ea:	2301      	movs	r3, #1
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045ee:	f7fd fe43 	bl	8002278 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d807      	bhi.n	800460e <HAL_SPI_TransmitReceive+0x212>
 80045fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d003      	beq.n	800460e <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800460c:	e0fb      	b.n	8004806 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1a3      	bne.n	8004560 <HAL_SPI_TransmitReceive+0x164>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800461e:	b29b      	uxth	r3, r3
 8004620:	2b00      	cmp	r3, #0
 8004622:	d19d      	bne.n	8004560 <HAL_SPI_TransmitReceive+0x164>
 8004624:	e0df      	b.n	80047e6 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_SPI_TransmitReceive+0x23a>
 800462e:	8a7b      	ldrh	r3, [r7, #18]
 8004630:	2b01      	cmp	r3, #1
 8004632:	f040 80cb 	bne.w	80047cc <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800463a:	b29b      	uxth	r3, r3
 800463c:	2b01      	cmp	r3, #1
 800463e:	d912      	bls.n	8004666 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	881a      	ldrh	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004650:	1c9a      	adds	r2, r3, #2
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b02      	subs	r3, #2
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004664:	e0b2      	b.n	80047cc <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	330c      	adds	r3, #12
 8004670:	7812      	ldrb	r2, [r2, #0]
 8004672:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004678:	1c5a      	adds	r2, r3, #1
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800468c:	e09e      	b.n	80047cc <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b02      	cmp	r3, #2
 800469a:	d134      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x30a>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d02f      	beq.n	8004706 <HAL_SPI_TransmitReceive+0x30a>
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d12c      	bne.n	8004706 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d912      	bls.n	80046dc <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ba:	881a      	ldrh	r2, [r3, #0]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c6:	1c9a      	adds	r2, r3, #2
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b02      	subs	r3, #2
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046da:	e012      	b.n	8004702 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	330c      	adds	r3, #12
 80046e6:	7812      	ldrb	r2, [r2, #0]
 80046e8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ee:	1c5a      	adds	r2, r3, #1
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3b01      	subs	r3, #1
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004702:	2300      	movs	r3, #0
 8004704:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 0301 	and.w	r3, r3, #1
 8004710:	2b01      	cmp	r3, #1
 8004712:	d148      	bne.n	80047a6 <HAL_SPI_TransmitReceive+0x3aa>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d042      	beq.n	80047a6 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004726:	b29b      	uxth	r3, r3
 8004728:	2b01      	cmp	r3, #1
 800472a:	d923      	bls.n	8004774 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	b292      	uxth	r2, r2
 8004738:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473e:	1c9a      	adds	r2, r3, #2
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800474a:	b29b      	uxth	r3, r3
 800474c:	3b02      	subs	r3, #2
 800474e:	b29a      	uxth	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b01      	cmp	r3, #1
 8004760:	d81f      	bhi.n	80047a2 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004770:	605a      	str	r2, [r3, #4]
 8004772:	e016      	b.n	80047a2 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f103 020c 	add.w	r2, r3, #12
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	7812      	ldrb	r2, [r2, #0]
 8004782:	b2d2      	uxtb	r2, r2
 8004784:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478a:	1c5a      	adds	r2, r3, #1
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004796:	b29b      	uxth	r3, r3
 8004798:	3b01      	subs	r3, #1
 800479a:	b29a      	uxth	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80047a2:	2301      	movs	r3, #1
 80047a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80047a6:	f7fd fd67 	bl	8002278 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d803      	bhi.n	80047be <HAL_SPI_TransmitReceive+0x3c2>
 80047b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047bc:	d102      	bne.n	80047c4 <HAL_SPI_TransmitReceive+0x3c8>
 80047be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d103      	bne.n	80047cc <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80047ca:	e01c      	b.n	8004806 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f47f af5b 	bne.w	800468e <HAL_SPI_TransmitReceive+0x292>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f47f af54 	bne.w	800468e <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047e6:	69fa      	ldr	r2, [r7, #28]
 80047e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 f8fe 	bl	80049ec <SPI_EndRxTxTransaction>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d006      	beq.n	8004804 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	2220      	movs	r2, #32
 8004800:	661a      	str	r2, [r3, #96]	; 0x60
 8004802:	e000      	b.n	8004806 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8004804:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004816:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800481a:	4618      	mov	r0, r3
 800481c:	3728      	adds	r7, #40	; 0x28
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004830:	b2db      	uxtb	r3, r3
}
 8004832:	4618      	mov	r0, r3
 8004834:	370c      	adds	r7, #12
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr

0800483e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	603b      	str	r3, [r7, #0]
 800484a:	4613      	mov	r3, r2
 800484c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800484e:	e04c      	b.n	80048ea <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004856:	d048      	beq.n	80048ea <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004858:	f7fd fd0e 	bl	8002278 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	683a      	ldr	r2, [r7, #0]
 8004864:	429a      	cmp	r2, r3
 8004866:	d902      	bls.n	800486e <SPI_WaitFlagStateUntilTimeout+0x30>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d13d      	bne.n	80048ea <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685a      	ldr	r2, [r3, #4]
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800487c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004886:	d111      	bne.n	80048ac <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004890:	d004      	beq.n	800489c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800489a:	d107      	bne.n	80048ac <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048aa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b4:	d10f      	bne.n	80048d6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	e00f      	b.n	800490a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	4013      	ands	r3, r2
 80048f4:	68ba      	ldr	r2, [r7, #8]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	bf0c      	ite	eq
 80048fa:	2301      	moveq	r3, #1
 80048fc:	2300      	movne	r3, #0
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	461a      	mov	r2, r3
 8004902:	79fb      	ldrb	r3, [r7, #7]
 8004904:	429a      	cmp	r2, r3
 8004906:	d1a3      	bne.n	8004850 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b084      	sub	sp, #16
 8004916:	af00      	add	r7, sp, #0
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	607a      	str	r2, [r7, #4]
 800491e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004920:	e057      	b.n	80049d2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004928:	d106      	bne.n	8004938 <SPI_WaitFifoStateUntilTimeout+0x26>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d103      	bne.n	8004938 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	330c      	adds	r3, #12
 8004936:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d048      	beq.n	80049d2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004940:	f7fd fc9a 	bl	8002278 <HAL_GetTick>
 8004944:	4602      	mov	r2, r0
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	683a      	ldr	r2, [r7, #0]
 800494c:	429a      	cmp	r2, r3
 800494e:	d902      	bls.n	8004956 <SPI_WaitFifoStateUntilTimeout+0x44>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d13d      	bne.n	80049d2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004964:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800496e:	d111      	bne.n	8004994 <SPI_WaitFifoStateUntilTimeout+0x82>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004978:	d004      	beq.n	8004984 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004982:	d107      	bne.n	8004994 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004992:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800499c:	d10f      	bne.n	80049be <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049ac:	601a      	str	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e008      	b.n	80049e4 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	689a      	ldr	r2, [r3, #8]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4013      	ands	r3, r2
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d19f      	bne.n	8004922 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}

080049ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004a04:	68f8      	ldr	r0, [r7, #12]
 8004a06:	f7ff ff84 	bl	8004912 <SPI_WaitFifoStateUntilTimeout>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d007      	beq.n	8004a20 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a14:	f043 0220 	orr.w	r2, r3, #32
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e027      	b.n	8004a70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2200      	movs	r2, #0
 8004a28:	2180      	movs	r1, #128	; 0x80
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f7ff ff07 	bl	800483e <SPI_WaitFlagStateUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d007      	beq.n	8004a46 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a3a:	f043 0220 	orr.w	r2, r3, #32
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e014      	b.n	8004a70 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	9300      	str	r3, [sp, #0]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004a52:	68f8      	ldr	r0, [r7, #12]
 8004a54:	f7ff ff5d 	bl	8004912 <SPI_WaitFifoStateUntilTimeout>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d007      	beq.n	8004a6e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a62:	f043 0220 	orr.w	r2, r3, #32
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e000      	b.n	8004a70 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004a6e:	2300      	movs	r3, #0
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3710      	adds	r7, #16
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e040      	b.n	8004b0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fd fa5a 	bl	8001f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2224      	movs	r2, #36	; 0x24
 8004aa4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0201 	bic.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 f82c 	bl	8004b14 <UART_SetConfig>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d101      	bne.n	8004ac6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e022      	b.n	8004b0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 fa3a 	bl	8004f48 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	685a      	ldr	r2, [r3, #4]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ae2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689a      	ldr	r2, [r3, #8]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004af2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f042 0201 	orr.w	r2, r2, #1
 8004b02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fac1 	bl	800508c <UART_CheckIdleState>
 8004b0a:	4603      	mov	r3, r0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3708      	adds	r7, #8
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	431a      	orrs	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	695b      	ldr	r3, [r3, #20]
 8004b32:	431a      	orrs	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b46:	f023 030c 	bic.w	r3, r3, #12
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6812      	ldr	r2, [r2, #0]
 8004b4e:	6939      	ldr	r1, [r7, #16]
 8004b50:	430b      	orrs	r3, r1
 8004b52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699b      	ldr	r3, [r3, #24]
 8004b6e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4aa9      	ldr	r2, [pc, #676]	; (8004e38 <UART_SetConfig+0x324>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d121      	bne.n	8004bdc <UART_SetConfig+0xc8>
 8004b98:	4ba8      	ldr	r3, [pc, #672]	; (8004e3c <UART_SetConfig+0x328>)
 8004b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9c:	f003 0303 	and.w	r3, r3, #3
 8004ba0:	2b03      	cmp	r3, #3
 8004ba2:	d817      	bhi.n	8004bd4 <UART_SetConfig+0xc0>
 8004ba4:	a201      	add	r2, pc, #4	; (adr r2, 8004bac <UART_SetConfig+0x98>)
 8004ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004baa:	bf00      	nop
 8004bac:	08004bbd 	.word	0x08004bbd
 8004bb0:	08004bc9 	.word	0x08004bc9
 8004bb4:	08004bcf 	.word	0x08004bcf
 8004bb8:	08004bc3 	.word	0x08004bc3
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	77fb      	strb	r3, [r7, #31]
 8004bc0:	e0b2      	b.n	8004d28 <UART_SetConfig+0x214>
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	77fb      	strb	r3, [r7, #31]
 8004bc6:	e0af      	b.n	8004d28 <UART_SetConfig+0x214>
 8004bc8:	2304      	movs	r3, #4
 8004bca:	77fb      	strb	r3, [r7, #31]
 8004bcc:	e0ac      	b.n	8004d28 <UART_SetConfig+0x214>
 8004bce:	2308      	movs	r3, #8
 8004bd0:	77fb      	strb	r3, [r7, #31]
 8004bd2:	e0a9      	b.n	8004d28 <UART_SetConfig+0x214>
 8004bd4:	2310      	movs	r3, #16
 8004bd6:	77fb      	strb	r3, [r7, #31]
 8004bd8:	bf00      	nop
 8004bda:	e0a5      	b.n	8004d28 <UART_SetConfig+0x214>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a97      	ldr	r2, [pc, #604]	; (8004e40 <UART_SetConfig+0x32c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d123      	bne.n	8004c2e <UART_SetConfig+0x11a>
 8004be6:	4b95      	ldr	r3, [pc, #596]	; (8004e3c <UART_SetConfig+0x328>)
 8004be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf2:	d012      	beq.n	8004c1a <UART_SetConfig+0x106>
 8004bf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf8:	d802      	bhi.n	8004c00 <UART_SetConfig+0xec>
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d007      	beq.n	8004c0e <UART_SetConfig+0xfa>
 8004bfe:	e012      	b.n	8004c26 <UART_SetConfig+0x112>
 8004c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c04:	d00c      	beq.n	8004c20 <UART_SetConfig+0x10c>
 8004c06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004c0a:	d003      	beq.n	8004c14 <UART_SetConfig+0x100>
 8004c0c:	e00b      	b.n	8004c26 <UART_SetConfig+0x112>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	77fb      	strb	r3, [r7, #31]
 8004c12:	e089      	b.n	8004d28 <UART_SetConfig+0x214>
 8004c14:	2302      	movs	r3, #2
 8004c16:	77fb      	strb	r3, [r7, #31]
 8004c18:	e086      	b.n	8004d28 <UART_SetConfig+0x214>
 8004c1a:	2304      	movs	r3, #4
 8004c1c:	77fb      	strb	r3, [r7, #31]
 8004c1e:	e083      	b.n	8004d28 <UART_SetConfig+0x214>
 8004c20:	2308      	movs	r3, #8
 8004c22:	77fb      	strb	r3, [r7, #31]
 8004c24:	e080      	b.n	8004d28 <UART_SetConfig+0x214>
 8004c26:	2310      	movs	r3, #16
 8004c28:	77fb      	strb	r3, [r7, #31]
 8004c2a:	bf00      	nop
 8004c2c:	e07c      	b.n	8004d28 <UART_SetConfig+0x214>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a84      	ldr	r2, [pc, #528]	; (8004e44 <UART_SetConfig+0x330>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d123      	bne.n	8004c80 <UART_SetConfig+0x16c>
 8004c38:	4b80      	ldr	r3, [pc, #512]	; (8004e3c <UART_SetConfig+0x328>)
 8004c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c3c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004c40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c44:	d012      	beq.n	8004c6c <UART_SetConfig+0x158>
 8004c46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c4a:	d802      	bhi.n	8004c52 <UART_SetConfig+0x13e>
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d007      	beq.n	8004c60 <UART_SetConfig+0x14c>
 8004c50:	e012      	b.n	8004c78 <UART_SetConfig+0x164>
 8004c52:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004c56:	d00c      	beq.n	8004c72 <UART_SetConfig+0x15e>
 8004c58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004c5c:	d003      	beq.n	8004c66 <UART_SetConfig+0x152>
 8004c5e:	e00b      	b.n	8004c78 <UART_SetConfig+0x164>
 8004c60:	2300      	movs	r3, #0
 8004c62:	77fb      	strb	r3, [r7, #31]
 8004c64:	e060      	b.n	8004d28 <UART_SetConfig+0x214>
 8004c66:	2302      	movs	r3, #2
 8004c68:	77fb      	strb	r3, [r7, #31]
 8004c6a:	e05d      	b.n	8004d28 <UART_SetConfig+0x214>
 8004c6c:	2304      	movs	r3, #4
 8004c6e:	77fb      	strb	r3, [r7, #31]
 8004c70:	e05a      	b.n	8004d28 <UART_SetConfig+0x214>
 8004c72:	2308      	movs	r3, #8
 8004c74:	77fb      	strb	r3, [r7, #31]
 8004c76:	e057      	b.n	8004d28 <UART_SetConfig+0x214>
 8004c78:	2310      	movs	r3, #16
 8004c7a:	77fb      	strb	r3, [r7, #31]
 8004c7c:	bf00      	nop
 8004c7e:	e053      	b.n	8004d28 <UART_SetConfig+0x214>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a70      	ldr	r2, [pc, #448]	; (8004e48 <UART_SetConfig+0x334>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d123      	bne.n	8004cd2 <UART_SetConfig+0x1be>
 8004c8a:	4b6c      	ldr	r3, [pc, #432]	; (8004e3c <UART_SetConfig+0x328>)
 8004c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004c92:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c96:	d012      	beq.n	8004cbe <UART_SetConfig+0x1aa>
 8004c98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c9c:	d802      	bhi.n	8004ca4 <UART_SetConfig+0x190>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d007      	beq.n	8004cb2 <UART_SetConfig+0x19e>
 8004ca2:	e012      	b.n	8004cca <UART_SetConfig+0x1b6>
 8004ca4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004ca8:	d00c      	beq.n	8004cc4 <UART_SetConfig+0x1b0>
 8004caa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004cae:	d003      	beq.n	8004cb8 <UART_SetConfig+0x1a4>
 8004cb0:	e00b      	b.n	8004cca <UART_SetConfig+0x1b6>
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	77fb      	strb	r3, [r7, #31]
 8004cb6:	e037      	b.n	8004d28 <UART_SetConfig+0x214>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	77fb      	strb	r3, [r7, #31]
 8004cbc:	e034      	b.n	8004d28 <UART_SetConfig+0x214>
 8004cbe:	2304      	movs	r3, #4
 8004cc0:	77fb      	strb	r3, [r7, #31]
 8004cc2:	e031      	b.n	8004d28 <UART_SetConfig+0x214>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e02e      	b.n	8004d28 <UART_SetConfig+0x214>
 8004cca:	2310      	movs	r3, #16
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	bf00      	nop
 8004cd0:	e02a      	b.n	8004d28 <UART_SetConfig+0x214>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a5d      	ldr	r2, [pc, #372]	; (8004e4c <UART_SetConfig+0x338>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d123      	bne.n	8004d24 <UART_SetConfig+0x210>
 8004cdc:	4b57      	ldr	r3, [pc, #348]	; (8004e3c <UART_SetConfig+0x328>)
 8004cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004ce4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ce8:	d012      	beq.n	8004d10 <UART_SetConfig+0x1fc>
 8004cea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cee:	d802      	bhi.n	8004cf6 <UART_SetConfig+0x1e2>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d007      	beq.n	8004d04 <UART_SetConfig+0x1f0>
 8004cf4:	e012      	b.n	8004d1c <UART_SetConfig+0x208>
 8004cf6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cfa:	d00c      	beq.n	8004d16 <UART_SetConfig+0x202>
 8004cfc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004d00:	d003      	beq.n	8004d0a <UART_SetConfig+0x1f6>
 8004d02:	e00b      	b.n	8004d1c <UART_SetConfig+0x208>
 8004d04:	2300      	movs	r3, #0
 8004d06:	77fb      	strb	r3, [r7, #31]
 8004d08:	e00e      	b.n	8004d28 <UART_SetConfig+0x214>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	77fb      	strb	r3, [r7, #31]
 8004d0e:	e00b      	b.n	8004d28 <UART_SetConfig+0x214>
 8004d10:	2304      	movs	r3, #4
 8004d12:	77fb      	strb	r3, [r7, #31]
 8004d14:	e008      	b.n	8004d28 <UART_SetConfig+0x214>
 8004d16:	2308      	movs	r3, #8
 8004d18:	77fb      	strb	r3, [r7, #31]
 8004d1a:	e005      	b.n	8004d28 <UART_SetConfig+0x214>
 8004d1c:	2310      	movs	r3, #16
 8004d1e:	77fb      	strb	r3, [r7, #31]
 8004d20:	bf00      	nop
 8004d22:	e001      	b.n	8004d28 <UART_SetConfig+0x214>
 8004d24:	2310      	movs	r3, #16
 8004d26:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d30:	f040 808e 	bne.w	8004e50 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8004d34:	7ffb      	ldrb	r3, [r7, #31]
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d85e      	bhi.n	8004df8 <UART_SetConfig+0x2e4>
 8004d3a:	a201      	add	r2, pc, #4	; (adr r2, 8004d40 <UART_SetConfig+0x22c>)
 8004d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d40:	08004d65 	.word	0x08004d65
 8004d44:	08004d85 	.word	0x08004d85
 8004d48:	08004da5 	.word	0x08004da5
 8004d4c:	08004df9 	.word	0x08004df9
 8004d50:	08004dc1 	.word	0x08004dc1
 8004d54:	08004df9 	.word	0x08004df9
 8004d58:	08004df9 	.word	0x08004df9
 8004d5c:	08004df9 	.word	0x08004df9
 8004d60:	08004de1 	.word	0x08004de1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d64:	f7ff f89c 	bl	8003ea0 <HAL_RCC_GetPCLK1Freq>
 8004d68:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	005a      	lsls	r2, r3, #1
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	085b      	lsrs	r3, r3, #1
 8004d74:	441a      	add	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	61bb      	str	r3, [r7, #24]
        break;
 8004d82:	e03c      	b.n	8004dfe <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d84:	f7ff f8ae 	bl	8003ee4 <HAL_RCC_GetPCLK2Freq>
 8004d88:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	005a      	lsls	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	085b      	lsrs	r3, r3, #1
 8004d94:	441a      	add	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	61bb      	str	r3, [r7, #24]
        break;
 8004da2:	e02c      	b.n	8004dfe <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	085b      	lsrs	r3, r3, #1
 8004daa:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8004dae:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6852      	ldr	r2, [r2, #4]
 8004db6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dba:	b29b      	uxth	r3, r3
 8004dbc:	61bb      	str	r3, [r7, #24]
        break;
 8004dbe:	e01e      	b.n	8004dfe <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dc0:	f7fe fff8 	bl	8003db4 <HAL_RCC_GetSysClockFreq>
 8004dc4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	005a      	lsls	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	441a      	add	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	61bb      	str	r3, [r7, #24]
        break;
 8004dde:	e00e      	b.n	8004dfe <UART_SetConfig+0x2ea>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	085b      	lsrs	r3, r3, #1
 8004de6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	61bb      	str	r3, [r7, #24]
        break;
 8004df6:	e002      	b.n	8004dfe <UART_SetConfig+0x2ea>
      default:
        ret = HAL_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	75fb      	strb	r3, [r7, #23]
        break;
 8004dfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b0f      	cmp	r3, #15
 8004e02:	d916      	bls.n	8004e32 <UART_SetConfig+0x31e>
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e0a:	d212      	bcs.n	8004e32 <UART_SetConfig+0x31e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	f023 030f 	bic.w	r3, r3, #15
 8004e14:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	085b      	lsrs	r3, r3, #1
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	b29a      	uxth	r2, r3
 8004e22:	897b      	ldrh	r3, [r7, #10]
 8004e24:	4313      	orrs	r3, r2
 8004e26:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	897a      	ldrh	r2, [r7, #10]
 8004e2e:	60da      	str	r2, [r3, #12]
 8004e30:	e07e      	b.n	8004f30 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	75fb      	strb	r3, [r7, #23]
 8004e36:	e07b      	b.n	8004f30 <UART_SetConfig+0x41c>
 8004e38:	40013800 	.word	0x40013800
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	40004400 	.word	0x40004400
 8004e44:	40004800 	.word	0x40004800
 8004e48:	40004c00 	.word	0x40004c00
 8004e4c:	40005000 	.word	0x40005000
    }
  }
  else
  {
    switch (clocksource)
 8004e50:	7ffb      	ldrb	r3, [r7, #31]
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	d85b      	bhi.n	8004f0e <UART_SetConfig+0x3fa>
 8004e56:	a201      	add	r2, pc, #4	; (adr r2, 8004e5c <UART_SetConfig+0x348>)
 8004e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e5c:	08004e81 	.word	0x08004e81
 8004e60:	08004e9f 	.word	0x08004e9f
 8004e64:	08004ebd 	.word	0x08004ebd
 8004e68:	08004f0f 	.word	0x08004f0f
 8004e6c:	08004ed9 	.word	0x08004ed9
 8004e70:	08004f0f 	.word	0x08004f0f
 8004e74:	08004f0f 	.word	0x08004f0f
 8004e78:	08004f0f 	.word	0x08004f0f
 8004e7c:	08004ef7 	.word	0x08004ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e80:	f7ff f80e 	bl	8003ea0 <HAL_RCC_GetPCLK1Freq>
 8004e84:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	085a      	lsrs	r2, r3, #1
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	441a      	add	r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	61bb      	str	r3, [r7, #24]
        break;
 8004e9c:	e03a      	b.n	8004f14 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e9e:	f7ff f821 	bl	8003ee4 <HAL_RCC_GetPCLK2Freq>
 8004ea2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	085a      	lsrs	r2, r3, #1
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	441a      	add	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	61bb      	str	r3, [r7, #24]
        break;
 8004eba:	e02b      	b.n	8004f14 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	085b      	lsrs	r3, r3, #1
 8004ec2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8004ec6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6852      	ldr	r2, [r2, #4]
 8004ece:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	61bb      	str	r3, [r7, #24]
        break;
 8004ed6:	e01d      	b.n	8004f14 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ed8:	f7fe ff6c 	bl	8003db4 <HAL_RCC_GetSysClockFreq>
 8004edc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	085a      	lsrs	r2, r3, #1
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	441a      	add	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	61bb      	str	r3, [r7, #24]
        break;
 8004ef4:	e00e      	b.n	8004f14 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	085b      	lsrs	r3, r3, #1
 8004efc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f08:	b29b      	uxth	r3, r3
 8004f0a:	61bb      	str	r3, [r7, #24]
        break;
 8004f0c:	e002      	b.n	8004f14 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	75fb      	strb	r3, [r7, #23]
        break;
 8004f12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	2b0f      	cmp	r3, #15
 8004f18:	d908      	bls.n	8004f2c <UART_SetConfig+0x418>
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f20:	d204      	bcs.n	8004f2c <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	60da      	str	r2, [r3, #12]
 8004f2a:	e001      	b.n	8004f30 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3720      	adds	r7, #32
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop

08004f48 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00a      	beq.n	8004f72 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d00a      	beq.n	8004f94 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	430a      	orrs	r2, r1
 8004f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00a      	beq.n	8004fb6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fdc:	f003 0310 	and.w	r3, r3, #16
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01a      	beq.n	800505e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	430a      	orrs	r2, r1
 800503c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005046:	d10a      	bne.n	800505e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005066:	2b00      	cmp	r3, #0
 8005068:	d00a      	beq.n	8005080 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	430a      	orrs	r2, r1
 800507e:	605a      	str	r2, [r3, #4]
  }
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af02      	add	r7, sp, #8
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800509a:	f7fd f8ed 	bl	8002278 <HAL_GetTick>
 800509e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d10e      	bne.n	80050cc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f000 f82a 	bl	8005116 <UART_WaitOnFlagUntilTimeout>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e020      	b.n	800510e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d10e      	bne.n	80050f8 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f814 	bl	8005116 <UART_WaitOnFlagUntilTimeout>
 80050ee:	4603      	mov	r3, r0
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d001      	beq.n	80050f8 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e00a      	b.n	800510e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3710      	adds	r7, #16
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b084      	sub	sp, #16
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	603b      	str	r3, [r7, #0]
 8005122:	4613      	mov	r3, r2
 8005124:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005126:	e05d      	b.n	80051e4 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005128:	69bb      	ldr	r3, [r7, #24]
 800512a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512e:	d059      	beq.n	80051e4 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005130:	f7fd f8a2 	bl	8002278 <HAL_GetTick>
 8005134:	4602      	mov	r2, r0
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	1ad3      	subs	r3, r2, r3
 800513a:	69ba      	ldr	r2, [r7, #24]
 800513c:	429a      	cmp	r2, r3
 800513e:	d302      	bcc.n	8005146 <UART_WaitOnFlagUntilTimeout+0x30>
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d11b      	bne.n	800517e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005154:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0201 	bic.w	r2, r2, #1
 8005164:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2220      	movs	r2, #32
 800516a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e042      	b.n	8005204 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d02b      	beq.n	80051e4 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800519a:	d123      	bne.n	80051e4 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051a4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80051b4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	689a      	ldr	r2, [r3, #8]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0201 	bic.w	r2, r2, #1
 80051c4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2220      	movs	r2, #32
 80051ca:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2220      	movs	r2, #32
 80051d0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2220      	movs	r2, #32
 80051d6:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e00f      	b.n	8005204 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	69da      	ldr	r2, [r3, #28]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	4013      	ands	r3, r2
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	bf0c      	ite	eq
 80051f4:	2301      	moveq	r3, #1
 80051f6:	2300      	movne	r3, #0
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	79fb      	ldrb	r3, [r7, #7]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d092      	beq.n	8005128 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <__errno>:
 800520c:	4b01      	ldr	r3, [pc, #4]	; (8005214 <__errno+0x8>)
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	20000048 	.word	0x20000048

08005218 <__libc_init_array>:
 8005218:	b570      	push	{r4, r5, r6, lr}
 800521a:	4e0d      	ldr	r6, [pc, #52]	; (8005250 <__libc_init_array+0x38>)
 800521c:	4c0d      	ldr	r4, [pc, #52]	; (8005254 <__libc_init_array+0x3c>)
 800521e:	1ba4      	subs	r4, r4, r6
 8005220:	10a4      	asrs	r4, r4, #2
 8005222:	2500      	movs	r5, #0
 8005224:	42a5      	cmp	r5, r4
 8005226:	d109      	bne.n	800523c <__libc_init_array+0x24>
 8005228:	4e0b      	ldr	r6, [pc, #44]	; (8005258 <__libc_init_array+0x40>)
 800522a:	4c0c      	ldr	r4, [pc, #48]	; (800525c <__libc_init_array+0x44>)
 800522c:	f004 fa5c 	bl	80096e8 <_init>
 8005230:	1ba4      	subs	r4, r4, r6
 8005232:	10a4      	asrs	r4, r4, #2
 8005234:	2500      	movs	r5, #0
 8005236:	42a5      	cmp	r5, r4
 8005238:	d105      	bne.n	8005246 <__libc_init_array+0x2e>
 800523a:	bd70      	pop	{r4, r5, r6, pc}
 800523c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005240:	4798      	blx	r3
 8005242:	3501      	adds	r5, #1
 8005244:	e7ee      	b.n	8005224 <__libc_init_array+0xc>
 8005246:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800524a:	4798      	blx	r3
 800524c:	3501      	adds	r5, #1
 800524e:	e7f2      	b.n	8005236 <__libc_init_array+0x1e>
 8005250:	08009b08 	.word	0x08009b08
 8005254:	08009b08 	.word	0x08009b08
 8005258:	08009b08 	.word	0x08009b08
 800525c:	08009b0c 	.word	0x08009b0c

08005260 <memset>:
 8005260:	4402      	add	r2, r0
 8005262:	4603      	mov	r3, r0
 8005264:	4293      	cmp	r3, r2
 8005266:	d100      	bne.n	800526a <memset+0xa>
 8005268:	4770      	bx	lr
 800526a:	f803 1b01 	strb.w	r1, [r3], #1
 800526e:	e7f9      	b.n	8005264 <memset+0x4>

08005270 <__cvt>:
 8005270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005274:	ec55 4b10 	vmov	r4, r5, d0
 8005278:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800527a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800527e:	2d00      	cmp	r5, #0
 8005280:	460e      	mov	r6, r1
 8005282:	4691      	mov	r9, r2
 8005284:	4619      	mov	r1, r3
 8005286:	bfb8      	it	lt
 8005288:	4622      	movlt	r2, r4
 800528a:	462b      	mov	r3, r5
 800528c:	f027 0720 	bic.w	r7, r7, #32
 8005290:	bfbb      	ittet	lt
 8005292:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005296:	461d      	movlt	r5, r3
 8005298:	2300      	movge	r3, #0
 800529a:	232d      	movlt	r3, #45	; 0x2d
 800529c:	bfb8      	it	lt
 800529e:	4614      	movlt	r4, r2
 80052a0:	2f46      	cmp	r7, #70	; 0x46
 80052a2:	700b      	strb	r3, [r1, #0]
 80052a4:	d004      	beq.n	80052b0 <__cvt+0x40>
 80052a6:	2f45      	cmp	r7, #69	; 0x45
 80052a8:	d100      	bne.n	80052ac <__cvt+0x3c>
 80052aa:	3601      	adds	r6, #1
 80052ac:	2102      	movs	r1, #2
 80052ae:	e000      	b.n	80052b2 <__cvt+0x42>
 80052b0:	2103      	movs	r1, #3
 80052b2:	ab03      	add	r3, sp, #12
 80052b4:	9301      	str	r3, [sp, #4]
 80052b6:	ab02      	add	r3, sp, #8
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	4632      	mov	r2, r6
 80052bc:	4653      	mov	r3, sl
 80052be:	ec45 4b10 	vmov	d0, r4, r5
 80052c2:	f001 feb1 	bl	8007028 <_dtoa_r>
 80052c6:	2f47      	cmp	r7, #71	; 0x47
 80052c8:	4680      	mov	r8, r0
 80052ca:	d102      	bne.n	80052d2 <__cvt+0x62>
 80052cc:	f019 0f01 	tst.w	r9, #1
 80052d0:	d026      	beq.n	8005320 <__cvt+0xb0>
 80052d2:	2f46      	cmp	r7, #70	; 0x46
 80052d4:	eb08 0906 	add.w	r9, r8, r6
 80052d8:	d111      	bne.n	80052fe <__cvt+0x8e>
 80052da:	f898 3000 	ldrb.w	r3, [r8]
 80052de:	2b30      	cmp	r3, #48	; 0x30
 80052e0:	d10a      	bne.n	80052f8 <__cvt+0x88>
 80052e2:	2200      	movs	r2, #0
 80052e4:	2300      	movs	r3, #0
 80052e6:	4620      	mov	r0, r4
 80052e8:	4629      	mov	r1, r5
 80052ea:	f7fb fbed 	bl	8000ac8 <__aeabi_dcmpeq>
 80052ee:	b918      	cbnz	r0, 80052f8 <__cvt+0x88>
 80052f0:	f1c6 0601 	rsb	r6, r6, #1
 80052f4:	f8ca 6000 	str.w	r6, [sl]
 80052f8:	f8da 3000 	ldr.w	r3, [sl]
 80052fc:	4499      	add	r9, r3
 80052fe:	2200      	movs	r2, #0
 8005300:	2300      	movs	r3, #0
 8005302:	4620      	mov	r0, r4
 8005304:	4629      	mov	r1, r5
 8005306:	f7fb fbdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800530a:	b938      	cbnz	r0, 800531c <__cvt+0xac>
 800530c:	2230      	movs	r2, #48	; 0x30
 800530e:	9b03      	ldr	r3, [sp, #12]
 8005310:	454b      	cmp	r3, r9
 8005312:	d205      	bcs.n	8005320 <__cvt+0xb0>
 8005314:	1c59      	adds	r1, r3, #1
 8005316:	9103      	str	r1, [sp, #12]
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	e7f8      	b.n	800530e <__cvt+0x9e>
 800531c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005320:	9b03      	ldr	r3, [sp, #12]
 8005322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005324:	eba3 0308 	sub.w	r3, r3, r8
 8005328:	4640      	mov	r0, r8
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	b004      	add	sp, #16
 800532e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005332 <__exponent>:
 8005332:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005334:	2900      	cmp	r1, #0
 8005336:	4604      	mov	r4, r0
 8005338:	bfba      	itte	lt
 800533a:	4249      	neglt	r1, r1
 800533c:	232d      	movlt	r3, #45	; 0x2d
 800533e:	232b      	movge	r3, #43	; 0x2b
 8005340:	2909      	cmp	r1, #9
 8005342:	f804 2b02 	strb.w	r2, [r4], #2
 8005346:	7043      	strb	r3, [r0, #1]
 8005348:	dd20      	ble.n	800538c <__exponent+0x5a>
 800534a:	f10d 0307 	add.w	r3, sp, #7
 800534e:	461f      	mov	r7, r3
 8005350:	260a      	movs	r6, #10
 8005352:	fb91 f5f6 	sdiv	r5, r1, r6
 8005356:	fb06 1115 	mls	r1, r6, r5, r1
 800535a:	3130      	adds	r1, #48	; 0x30
 800535c:	2d09      	cmp	r5, #9
 800535e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005362:	f103 32ff 	add.w	r2, r3, #4294967295
 8005366:	4629      	mov	r1, r5
 8005368:	dc09      	bgt.n	800537e <__exponent+0x4c>
 800536a:	3130      	adds	r1, #48	; 0x30
 800536c:	3b02      	subs	r3, #2
 800536e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005372:	42bb      	cmp	r3, r7
 8005374:	4622      	mov	r2, r4
 8005376:	d304      	bcc.n	8005382 <__exponent+0x50>
 8005378:	1a10      	subs	r0, r2, r0
 800537a:	b003      	add	sp, #12
 800537c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800537e:	4613      	mov	r3, r2
 8005380:	e7e7      	b.n	8005352 <__exponent+0x20>
 8005382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005386:	f804 2b01 	strb.w	r2, [r4], #1
 800538a:	e7f2      	b.n	8005372 <__exponent+0x40>
 800538c:	2330      	movs	r3, #48	; 0x30
 800538e:	4419      	add	r1, r3
 8005390:	7083      	strb	r3, [r0, #2]
 8005392:	1d02      	adds	r2, r0, #4
 8005394:	70c1      	strb	r1, [r0, #3]
 8005396:	e7ef      	b.n	8005378 <__exponent+0x46>

08005398 <_printf_float>:
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539c:	b08d      	sub	sp, #52	; 0x34
 800539e:	460c      	mov	r4, r1
 80053a0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80053a4:	4616      	mov	r6, r2
 80053a6:	461f      	mov	r7, r3
 80053a8:	4605      	mov	r5, r0
 80053aa:	f003 f89b 	bl	80084e4 <_localeconv_r>
 80053ae:	6803      	ldr	r3, [r0, #0]
 80053b0:	9304      	str	r3, [sp, #16]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fa ff0c 	bl	80001d0 <strlen>
 80053b8:	2300      	movs	r3, #0
 80053ba:	930a      	str	r3, [sp, #40]	; 0x28
 80053bc:	f8d8 3000 	ldr.w	r3, [r8]
 80053c0:	9005      	str	r0, [sp, #20]
 80053c2:	3307      	adds	r3, #7
 80053c4:	f023 0307 	bic.w	r3, r3, #7
 80053c8:	f103 0208 	add.w	r2, r3, #8
 80053cc:	f894 a018 	ldrb.w	sl, [r4, #24]
 80053d0:	f8d4 b000 	ldr.w	fp, [r4]
 80053d4:	f8c8 2000 	str.w	r2, [r8]
 80053d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053dc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80053e0:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80053e4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80053e8:	9307      	str	r3, [sp, #28]
 80053ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80053ee:	f04f 32ff 	mov.w	r2, #4294967295
 80053f2:	4ba7      	ldr	r3, [pc, #668]	; (8005690 <_printf_float+0x2f8>)
 80053f4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053f8:	f7fb fb98 	bl	8000b2c <__aeabi_dcmpun>
 80053fc:	bb70      	cbnz	r0, 800545c <_printf_float+0xc4>
 80053fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005402:	4ba3      	ldr	r3, [pc, #652]	; (8005690 <_printf_float+0x2f8>)
 8005404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005408:	f7fb fb72 	bl	8000af0 <__aeabi_dcmple>
 800540c:	bb30      	cbnz	r0, 800545c <_printf_float+0xc4>
 800540e:	2200      	movs	r2, #0
 8005410:	2300      	movs	r3, #0
 8005412:	4640      	mov	r0, r8
 8005414:	4649      	mov	r1, r9
 8005416:	f7fb fb61 	bl	8000adc <__aeabi_dcmplt>
 800541a:	b110      	cbz	r0, 8005422 <_printf_float+0x8a>
 800541c:	232d      	movs	r3, #45	; 0x2d
 800541e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005422:	4a9c      	ldr	r2, [pc, #624]	; (8005694 <_printf_float+0x2fc>)
 8005424:	4b9c      	ldr	r3, [pc, #624]	; (8005698 <_printf_float+0x300>)
 8005426:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800542a:	bf8c      	ite	hi
 800542c:	4690      	movhi	r8, r2
 800542e:	4698      	movls	r8, r3
 8005430:	2303      	movs	r3, #3
 8005432:	f02b 0204 	bic.w	r2, fp, #4
 8005436:	6123      	str	r3, [r4, #16]
 8005438:	6022      	str	r2, [r4, #0]
 800543a:	f04f 0900 	mov.w	r9, #0
 800543e:	9700      	str	r7, [sp, #0]
 8005440:	4633      	mov	r3, r6
 8005442:	aa0b      	add	r2, sp, #44	; 0x2c
 8005444:	4621      	mov	r1, r4
 8005446:	4628      	mov	r0, r5
 8005448:	f000 f9e6 	bl	8005818 <_printf_common>
 800544c:	3001      	adds	r0, #1
 800544e:	f040 808d 	bne.w	800556c <_printf_float+0x1d4>
 8005452:	f04f 30ff 	mov.w	r0, #4294967295
 8005456:	b00d      	add	sp, #52	; 0x34
 8005458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800545c:	4642      	mov	r2, r8
 800545e:	464b      	mov	r3, r9
 8005460:	4640      	mov	r0, r8
 8005462:	4649      	mov	r1, r9
 8005464:	f7fb fb62 	bl	8000b2c <__aeabi_dcmpun>
 8005468:	b110      	cbz	r0, 8005470 <_printf_float+0xd8>
 800546a:	4a8c      	ldr	r2, [pc, #560]	; (800569c <_printf_float+0x304>)
 800546c:	4b8c      	ldr	r3, [pc, #560]	; (80056a0 <_printf_float+0x308>)
 800546e:	e7da      	b.n	8005426 <_printf_float+0x8e>
 8005470:	6861      	ldr	r1, [r4, #4]
 8005472:	1c4b      	adds	r3, r1, #1
 8005474:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005478:	a80a      	add	r0, sp, #40	; 0x28
 800547a:	d13e      	bne.n	80054fa <_printf_float+0x162>
 800547c:	2306      	movs	r3, #6
 800547e:	6063      	str	r3, [r4, #4]
 8005480:	2300      	movs	r3, #0
 8005482:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005486:	ab09      	add	r3, sp, #36	; 0x24
 8005488:	9300      	str	r3, [sp, #0]
 800548a:	ec49 8b10 	vmov	d0, r8, r9
 800548e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005492:	6022      	str	r2, [r4, #0]
 8005494:	f8cd a004 	str.w	sl, [sp, #4]
 8005498:	6861      	ldr	r1, [r4, #4]
 800549a:	4628      	mov	r0, r5
 800549c:	f7ff fee8 	bl	8005270 <__cvt>
 80054a0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80054a4:	2b47      	cmp	r3, #71	; 0x47
 80054a6:	4680      	mov	r8, r0
 80054a8:	d109      	bne.n	80054be <_printf_float+0x126>
 80054aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ac:	1cd8      	adds	r0, r3, #3
 80054ae:	db02      	blt.n	80054b6 <_printf_float+0x11e>
 80054b0:	6862      	ldr	r2, [r4, #4]
 80054b2:	4293      	cmp	r3, r2
 80054b4:	dd47      	ble.n	8005546 <_printf_float+0x1ae>
 80054b6:	f1aa 0a02 	sub.w	sl, sl, #2
 80054ba:	fa5f fa8a 	uxtb.w	sl, sl
 80054be:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80054c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80054c4:	d824      	bhi.n	8005510 <_printf_float+0x178>
 80054c6:	3901      	subs	r1, #1
 80054c8:	4652      	mov	r2, sl
 80054ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80054ce:	9109      	str	r1, [sp, #36]	; 0x24
 80054d0:	f7ff ff2f 	bl	8005332 <__exponent>
 80054d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80054d6:	1813      	adds	r3, r2, r0
 80054d8:	2a01      	cmp	r2, #1
 80054da:	4681      	mov	r9, r0
 80054dc:	6123      	str	r3, [r4, #16]
 80054de:	dc02      	bgt.n	80054e6 <_printf_float+0x14e>
 80054e0:	6822      	ldr	r2, [r4, #0]
 80054e2:	07d1      	lsls	r1, r2, #31
 80054e4:	d501      	bpl.n	80054ea <_printf_float+0x152>
 80054e6:	3301      	adds	r3, #1
 80054e8:	6123      	str	r3, [r4, #16]
 80054ea:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0a5      	beq.n	800543e <_printf_float+0xa6>
 80054f2:	232d      	movs	r3, #45	; 0x2d
 80054f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054f8:	e7a1      	b.n	800543e <_printf_float+0xa6>
 80054fa:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80054fe:	f000 8177 	beq.w	80057f0 <_printf_float+0x458>
 8005502:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005506:	d1bb      	bne.n	8005480 <_printf_float+0xe8>
 8005508:	2900      	cmp	r1, #0
 800550a:	d1b9      	bne.n	8005480 <_printf_float+0xe8>
 800550c:	2301      	movs	r3, #1
 800550e:	e7b6      	b.n	800547e <_printf_float+0xe6>
 8005510:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005514:	d119      	bne.n	800554a <_printf_float+0x1b2>
 8005516:	2900      	cmp	r1, #0
 8005518:	6863      	ldr	r3, [r4, #4]
 800551a:	dd0c      	ble.n	8005536 <_printf_float+0x19e>
 800551c:	6121      	str	r1, [r4, #16]
 800551e:	b913      	cbnz	r3, 8005526 <_printf_float+0x18e>
 8005520:	6822      	ldr	r2, [r4, #0]
 8005522:	07d2      	lsls	r2, r2, #31
 8005524:	d502      	bpl.n	800552c <_printf_float+0x194>
 8005526:	3301      	adds	r3, #1
 8005528:	440b      	add	r3, r1
 800552a:	6123      	str	r3, [r4, #16]
 800552c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800552e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005530:	f04f 0900 	mov.w	r9, #0
 8005534:	e7d9      	b.n	80054ea <_printf_float+0x152>
 8005536:	b913      	cbnz	r3, 800553e <_printf_float+0x1a6>
 8005538:	6822      	ldr	r2, [r4, #0]
 800553a:	07d0      	lsls	r0, r2, #31
 800553c:	d501      	bpl.n	8005542 <_printf_float+0x1aa>
 800553e:	3302      	adds	r3, #2
 8005540:	e7f3      	b.n	800552a <_printf_float+0x192>
 8005542:	2301      	movs	r3, #1
 8005544:	e7f1      	b.n	800552a <_printf_float+0x192>
 8005546:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800554a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800554e:	4293      	cmp	r3, r2
 8005550:	db05      	blt.n	800555e <_printf_float+0x1c6>
 8005552:	6822      	ldr	r2, [r4, #0]
 8005554:	6123      	str	r3, [r4, #16]
 8005556:	07d1      	lsls	r1, r2, #31
 8005558:	d5e8      	bpl.n	800552c <_printf_float+0x194>
 800555a:	3301      	adds	r3, #1
 800555c:	e7e5      	b.n	800552a <_printf_float+0x192>
 800555e:	2b00      	cmp	r3, #0
 8005560:	bfd4      	ite	le
 8005562:	f1c3 0302 	rsble	r3, r3, #2
 8005566:	2301      	movgt	r3, #1
 8005568:	4413      	add	r3, r2
 800556a:	e7de      	b.n	800552a <_printf_float+0x192>
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	055a      	lsls	r2, r3, #21
 8005570:	d407      	bmi.n	8005582 <_printf_float+0x1ea>
 8005572:	6923      	ldr	r3, [r4, #16]
 8005574:	4642      	mov	r2, r8
 8005576:	4631      	mov	r1, r6
 8005578:	4628      	mov	r0, r5
 800557a:	47b8      	blx	r7
 800557c:	3001      	adds	r0, #1
 800557e:	d12b      	bne.n	80055d8 <_printf_float+0x240>
 8005580:	e767      	b.n	8005452 <_printf_float+0xba>
 8005582:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005586:	f240 80dc 	bls.w	8005742 <_printf_float+0x3aa>
 800558a:	2200      	movs	r2, #0
 800558c:	2300      	movs	r3, #0
 800558e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005592:	f7fb fa99 	bl	8000ac8 <__aeabi_dcmpeq>
 8005596:	2800      	cmp	r0, #0
 8005598:	d033      	beq.n	8005602 <_printf_float+0x26a>
 800559a:	2301      	movs	r3, #1
 800559c:	4a41      	ldr	r2, [pc, #260]	; (80056a4 <_printf_float+0x30c>)
 800559e:	4631      	mov	r1, r6
 80055a0:	4628      	mov	r0, r5
 80055a2:	47b8      	blx	r7
 80055a4:	3001      	adds	r0, #1
 80055a6:	f43f af54 	beq.w	8005452 <_printf_float+0xba>
 80055aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055ae:	429a      	cmp	r2, r3
 80055b0:	db02      	blt.n	80055b8 <_printf_float+0x220>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	07d8      	lsls	r0, r3, #31
 80055b6:	d50f      	bpl.n	80055d8 <_printf_float+0x240>
 80055b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055bc:	4631      	mov	r1, r6
 80055be:	4628      	mov	r0, r5
 80055c0:	47b8      	blx	r7
 80055c2:	3001      	adds	r0, #1
 80055c4:	f43f af45 	beq.w	8005452 <_printf_float+0xba>
 80055c8:	f04f 0800 	mov.w	r8, #0
 80055cc:	f104 091a 	add.w	r9, r4, #26
 80055d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055d2:	3b01      	subs	r3, #1
 80055d4:	4543      	cmp	r3, r8
 80055d6:	dc09      	bgt.n	80055ec <_printf_float+0x254>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	079b      	lsls	r3, r3, #30
 80055dc:	f100 8103 	bmi.w	80057e6 <_printf_float+0x44e>
 80055e0:	68e0      	ldr	r0, [r4, #12]
 80055e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055e4:	4298      	cmp	r0, r3
 80055e6:	bfb8      	it	lt
 80055e8:	4618      	movlt	r0, r3
 80055ea:	e734      	b.n	8005456 <_printf_float+0xbe>
 80055ec:	2301      	movs	r3, #1
 80055ee:	464a      	mov	r2, r9
 80055f0:	4631      	mov	r1, r6
 80055f2:	4628      	mov	r0, r5
 80055f4:	47b8      	blx	r7
 80055f6:	3001      	adds	r0, #1
 80055f8:	f43f af2b 	beq.w	8005452 <_printf_float+0xba>
 80055fc:	f108 0801 	add.w	r8, r8, #1
 8005600:	e7e6      	b.n	80055d0 <_printf_float+0x238>
 8005602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	dc2b      	bgt.n	8005660 <_printf_float+0x2c8>
 8005608:	2301      	movs	r3, #1
 800560a:	4a26      	ldr	r2, [pc, #152]	; (80056a4 <_printf_float+0x30c>)
 800560c:	4631      	mov	r1, r6
 800560e:	4628      	mov	r0, r5
 8005610:	47b8      	blx	r7
 8005612:	3001      	adds	r0, #1
 8005614:	f43f af1d 	beq.w	8005452 <_printf_float+0xba>
 8005618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800561a:	b923      	cbnz	r3, 8005626 <_printf_float+0x28e>
 800561c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800561e:	b913      	cbnz	r3, 8005626 <_printf_float+0x28e>
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	07d9      	lsls	r1, r3, #31
 8005624:	d5d8      	bpl.n	80055d8 <_printf_float+0x240>
 8005626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800562a:	4631      	mov	r1, r6
 800562c:	4628      	mov	r0, r5
 800562e:	47b8      	blx	r7
 8005630:	3001      	adds	r0, #1
 8005632:	f43f af0e 	beq.w	8005452 <_printf_float+0xba>
 8005636:	f04f 0900 	mov.w	r9, #0
 800563a:	f104 0a1a 	add.w	sl, r4, #26
 800563e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005640:	425b      	negs	r3, r3
 8005642:	454b      	cmp	r3, r9
 8005644:	dc01      	bgt.n	800564a <_printf_float+0x2b2>
 8005646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005648:	e794      	b.n	8005574 <_printf_float+0x1dc>
 800564a:	2301      	movs	r3, #1
 800564c:	4652      	mov	r2, sl
 800564e:	4631      	mov	r1, r6
 8005650:	4628      	mov	r0, r5
 8005652:	47b8      	blx	r7
 8005654:	3001      	adds	r0, #1
 8005656:	f43f aefc 	beq.w	8005452 <_printf_float+0xba>
 800565a:	f109 0901 	add.w	r9, r9, #1
 800565e:	e7ee      	b.n	800563e <_printf_float+0x2a6>
 8005660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005662:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005664:	429a      	cmp	r2, r3
 8005666:	bfa8      	it	ge
 8005668:	461a      	movge	r2, r3
 800566a:	2a00      	cmp	r2, #0
 800566c:	4691      	mov	r9, r2
 800566e:	dd07      	ble.n	8005680 <_printf_float+0x2e8>
 8005670:	4613      	mov	r3, r2
 8005672:	4631      	mov	r1, r6
 8005674:	4642      	mov	r2, r8
 8005676:	4628      	mov	r0, r5
 8005678:	47b8      	blx	r7
 800567a:	3001      	adds	r0, #1
 800567c:	f43f aee9 	beq.w	8005452 <_printf_float+0xba>
 8005680:	f104 031a 	add.w	r3, r4, #26
 8005684:	f04f 0b00 	mov.w	fp, #0
 8005688:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800568c:	9306      	str	r3, [sp, #24]
 800568e:	e015      	b.n	80056bc <_printf_float+0x324>
 8005690:	7fefffff 	.word	0x7fefffff
 8005694:	080097ec 	.word	0x080097ec
 8005698:	080097e8 	.word	0x080097e8
 800569c:	080097f4 	.word	0x080097f4
 80056a0:	080097f0 	.word	0x080097f0
 80056a4:	080097f8 	.word	0x080097f8
 80056a8:	2301      	movs	r3, #1
 80056aa:	9a06      	ldr	r2, [sp, #24]
 80056ac:	4631      	mov	r1, r6
 80056ae:	4628      	mov	r0, r5
 80056b0:	47b8      	blx	r7
 80056b2:	3001      	adds	r0, #1
 80056b4:	f43f aecd 	beq.w	8005452 <_printf_float+0xba>
 80056b8:	f10b 0b01 	add.w	fp, fp, #1
 80056bc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80056c0:	ebaa 0309 	sub.w	r3, sl, r9
 80056c4:	455b      	cmp	r3, fp
 80056c6:	dcef      	bgt.n	80056a8 <_printf_float+0x310>
 80056c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056cc:	429a      	cmp	r2, r3
 80056ce:	44d0      	add	r8, sl
 80056d0:	db15      	blt.n	80056fe <_printf_float+0x366>
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	07da      	lsls	r2, r3, #31
 80056d6:	d412      	bmi.n	80056fe <_printf_float+0x366>
 80056d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80056da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056dc:	eba3 020a 	sub.w	r2, r3, sl
 80056e0:	eba3 0a01 	sub.w	sl, r3, r1
 80056e4:	4592      	cmp	sl, r2
 80056e6:	bfa8      	it	ge
 80056e8:	4692      	movge	sl, r2
 80056ea:	f1ba 0f00 	cmp.w	sl, #0
 80056ee:	dc0e      	bgt.n	800570e <_printf_float+0x376>
 80056f0:	f04f 0800 	mov.w	r8, #0
 80056f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80056f8:	f104 091a 	add.w	r9, r4, #26
 80056fc:	e019      	b.n	8005732 <_printf_float+0x39a>
 80056fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005702:	4631      	mov	r1, r6
 8005704:	4628      	mov	r0, r5
 8005706:	47b8      	blx	r7
 8005708:	3001      	adds	r0, #1
 800570a:	d1e5      	bne.n	80056d8 <_printf_float+0x340>
 800570c:	e6a1      	b.n	8005452 <_printf_float+0xba>
 800570e:	4653      	mov	r3, sl
 8005710:	4642      	mov	r2, r8
 8005712:	4631      	mov	r1, r6
 8005714:	4628      	mov	r0, r5
 8005716:	47b8      	blx	r7
 8005718:	3001      	adds	r0, #1
 800571a:	d1e9      	bne.n	80056f0 <_printf_float+0x358>
 800571c:	e699      	b.n	8005452 <_printf_float+0xba>
 800571e:	2301      	movs	r3, #1
 8005720:	464a      	mov	r2, r9
 8005722:	4631      	mov	r1, r6
 8005724:	4628      	mov	r0, r5
 8005726:	47b8      	blx	r7
 8005728:	3001      	adds	r0, #1
 800572a:	f43f ae92 	beq.w	8005452 <_printf_float+0xba>
 800572e:	f108 0801 	add.w	r8, r8, #1
 8005732:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005736:	1a9b      	subs	r3, r3, r2
 8005738:	eba3 030a 	sub.w	r3, r3, sl
 800573c:	4543      	cmp	r3, r8
 800573e:	dcee      	bgt.n	800571e <_printf_float+0x386>
 8005740:	e74a      	b.n	80055d8 <_printf_float+0x240>
 8005742:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005744:	2a01      	cmp	r2, #1
 8005746:	dc01      	bgt.n	800574c <_printf_float+0x3b4>
 8005748:	07db      	lsls	r3, r3, #31
 800574a:	d53a      	bpl.n	80057c2 <_printf_float+0x42a>
 800574c:	2301      	movs	r3, #1
 800574e:	4642      	mov	r2, r8
 8005750:	4631      	mov	r1, r6
 8005752:	4628      	mov	r0, r5
 8005754:	47b8      	blx	r7
 8005756:	3001      	adds	r0, #1
 8005758:	f43f ae7b 	beq.w	8005452 <_printf_float+0xba>
 800575c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005760:	4631      	mov	r1, r6
 8005762:	4628      	mov	r0, r5
 8005764:	47b8      	blx	r7
 8005766:	3001      	adds	r0, #1
 8005768:	f108 0801 	add.w	r8, r8, #1
 800576c:	f43f ae71 	beq.w	8005452 <_printf_float+0xba>
 8005770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005772:	2200      	movs	r2, #0
 8005774:	f103 3aff 	add.w	sl, r3, #4294967295
 8005778:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800577c:	2300      	movs	r3, #0
 800577e:	f7fb f9a3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005782:	b9c8      	cbnz	r0, 80057b8 <_printf_float+0x420>
 8005784:	4653      	mov	r3, sl
 8005786:	4642      	mov	r2, r8
 8005788:	4631      	mov	r1, r6
 800578a:	4628      	mov	r0, r5
 800578c:	47b8      	blx	r7
 800578e:	3001      	adds	r0, #1
 8005790:	d10e      	bne.n	80057b0 <_printf_float+0x418>
 8005792:	e65e      	b.n	8005452 <_printf_float+0xba>
 8005794:	2301      	movs	r3, #1
 8005796:	4652      	mov	r2, sl
 8005798:	4631      	mov	r1, r6
 800579a:	4628      	mov	r0, r5
 800579c:	47b8      	blx	r7
 800579e:	3001      	adds	r0, #1
 80057a0:	f43f ae57 	beq.w	8005452 <_printf_float+0xba>
 80057a4:	f108 0801 	add.w	r8, r8, #1
 80057a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057aa:	3b01      	subs	r3, #1
 80057ac:	4543      	cmp	r3, r8
 80057ae:	dcf1      	bgt.n	8005794 <_printf_float+0x3fc>
 80057b0:	464b      	mov	r3, r9
 80057b2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80057b6:	e6de      	b.n	8005576 <_printf_float+0x1de>
 80057b8:	f04f 0800 	mov.w	r8, #0
 80057bc:	f104 0a1a 	add.w	sl, r4, #26
 80057c0:	e7f2      	b.n	80057a8 <_printf_float+0x410>
 80057c2:	2301      	movs	r3, #1
 80057c4:	e7df      	b.n	8005786 <_printf_float+0x3ee>
 80057c6:	2301      	movs	r3, #1
 80057c8:	464a      	mov	r2, r9
 80057ca:	4631      	mov	r1, r6
 80057cc:	4628      	mov	r0, r5
 80057ce:	47b8      	blx	r7
 80057d0:	3001      	adds	r0, #1
 80057d2:	f43f ae3e 	beq.w	8005452 <_printf_float+0xba>
 80057d6:	f108 0801 	add.w	r8, r8, #1
 80057da:	68e3      	ldr	r3, [r4, #12]
 80057dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80057de:	1a9b      	subs	r3, r3, r2
 80057e0:	4543      	cmp	r3, r8
 80057e2:	dcf0      	bgt.n	80057c6 <_printf_float+0x42e>
 80057e4:	e6fc      	b.n	80055e0 <_printf_float+0x248>
 80057e6:	f04f 0800 	mov.w	r8, #0
 80057ea:	f104 0919 	add.w	r9, r4, #25
 80057ee:	e7f4      	b.n	80057da <_printf_float+0x442>
 80057f0:	2900      	cmp	r1, #0
 80057f2:	f43f ae8b 	beq.w	800550c <_printf_float+0x174>
 80057f6:	2300      	movs	r3, #0
 80057f8:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80057fc:	ab09      	add	r3, sp, #36	; 0x24
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	ec49 8b10 	vmov	d0, r8, r9
 8005804:	6022      	str	r2, [r4, #0]
 8005806:	f8cd a004 	str.w	sl, [sp, #4]
 800580a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800580e:	4628      	mov	r0, r5
 8005810:	f7ff fd2e 	bl	8005270 <__cvt>
 8005814:	4680      	mov	r8, r0
 8005816:	e648      	b.n	80054aa <_printf_float+0x112>

08005818 <_printf_common>:
 8005818:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800581c:	4691      	mov	r9, r2
 800581e:	461f      	mov	r7, r3
 8005820:	688a      	ldr	r2, [r1, #8]
 8005822:	690b      	ldr	r3, [r1, #16]
 8005824:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005828:	4293      	cmp	r3, r2
 800582a:	bfb8      	it	lt
 800582c:	4613      	movlt	r3, r2
 800582e:	f8c9 3000 	str.w	r3, [r9]
 8005832:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005836:	4606      	mov	r6, r0
 8005838:	460c      	mov	r4, r1
 800583a:	b112      	cbz	r2, 8005842 <_printf_common+0x2a>
 800583c:	3301      	adds	r3, #1
 800583e:	f8c9 3000 	str.w	r3, [r9]
 8005842:	6823      	ldr	r3, [r4, #0]
 8005844:	0699      	lsls	r1, r3, #26
 8005846:	bf42      	ittt	mi
 8005848:	f8d9 3000 	ldrmi.w	r3, [r9]
 800584c:	3302      	addmi	r3, #2
 800584e:	f8c9 3000 	strmi.w	r3, [r9]
 8005852:	6825      	ldr	r5, [r4, #0]
 8005854:	f015 0506 	ands.w	r5, r5, #6
 8005858:	d107      	bne.n	800586a <_printf_common+0x52>
 800585a:	f104 0a19 	add.w	sl, r4, #25
 800585e:	68e3      	ldr	r3, [r4, #12]
 8005860:	f8d9 2000 	ldr.w	r2, [r9]
 8005864:	1a9b      	subs	r3, r3, r2
 8005866:	42ab      	cmp	r3, r5
 8005868:	dc28      	bgt.n	80058bc <_printf_common+0xa4>
 800586a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800586e:	6822      	ldr	r2, [r4, #0]
 8005870:	3300      	adds	r3, #0
 8005872:	bf18      	it	ne
 8005874:	2301      	movne	r3, #1
 8005876:	0692      	lsls	r2, r2, #26
 8005878:	d42d      	bmi.n	80058d6 <_printf_common+0xbe>
 800587a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800587e:	4639      	mov	r1, r7
 8005880:	4630      	mov	r0, r6
 8005882:	47c0      	blx	r8
 8005884:	3001      	adds	r0, #1
 8005886:	d020      	beq.n	80058ca <_printf_common+0xb2>
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	68e5      	ldr	r5, [r4, #12]
 800588c:	f8d9 2000 	ldr.w	r2, [r9]
 8005890:	f003 0306 	and.w	r3, r3, #6
 8005894:	2b04      	cmp	r3, #4
 8005896:	bf08      	it	eq
 8005898:	1aad      	subeq	r5, r5, r2
 800589a:	68a3      	ldr	r3, [r4, #8]
 800589c:	6922      	ldr	r2, [r4, #16]
 800589e:	bf0c      	ite	eq
 80058a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80058a4:	2500      	movne	r5, #0
 80058a6:	4293      	cmp	r3, r2
 80058a8:	bfc4      	itt	gt
 80058aa:	1a9b      	subgt	r3, r3, r2
 80058ac:	18ed      	addgt	r5, r5, r3
 80058ae:	f04f 0900 	mov.w	r9, #0
 80058b2:	341a      	adds	r4, #26
 80058b4:	454d      	cmp	r5, r9
 80058b6:	d11a      	bne.n	80058ee <_printf_common+0xd6>
 80058b8:	2000      	movs	r0, #0
 80058ba:	e008      	b.n	80058ce <_printf_common+0xb6>
 80058bc:	2301      	movs	r3, #1
 80058be:	4652      	mov	r2, sl
 80058c0:	4639      	mov	r1, r7
 80058c2:	4630      	mov	r0, r6
 80058c4:	47c0      	blx	r8
 80058c6:	3001      	adds	r0, #1
 80058c8:	d103      	bne.n	80058d2 <_printf_common+0xba>
 80058ca:	f04f 30ff 	mov.w	r0, #4294967295
 80058ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d2:	3501      	adds	r5, #1
 80058d4:	e7c3      	b.n	800585e <_printf_common+0x46>
 80058d6:	18e1      	adds	r1, r4, r3
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	2030      	movs	r0, #48	; 0x30
 80058dc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058e0:	4422      	add	r2, r4
 80058e2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058ea:	3302      	adds	r3, #2
 80058ec:	e7c5      	b.n	800587a <_printf_common+0x62>
 80058ee:	2301      	movs	r3, #1
 80058f0:	4622      	mov	r2, r4
 80058f2:	4639      	mov	r1, r7
 80058f4:	4630      	mov	r0, r6
 80058f6:	47c0      	blx	r8
 80058f8:	3001      	adds	r0, #1
 80058fa:	d0e6      	beq.n	80058ca <_printf_common+0xb2>
 80058fc:	f109 0901 	add.w	r9, r9, #1
 8005900:	e7d8      	b.n	80058b4 <_printf_common+0x9c>
	...

08005904 <_printf_i>:
 8005904:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005908:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800590c:	460c      	mov	r4, r1
 800590e:	7e09      	ldrb	r1, [r1, #24]
 8005910:	b085      	sub	sp, #20
 8005912:	296e      	cmp	r1, #110	; 0x6e
 8005914:	4617      	mov	r7, r2
 8005916:	4606      	mov	r6, r0
 8005918:	4698      	mov	r8, r3
 800591a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800591c:	f000 80b3 	beq.w	8005a86 <_printf_i+0x182>
 8005920:	d822      	bhi.n	8005968 <_printf_i+0x64>
 8005922:	2963      	cmp	r1, #99	; 0x63
 8005924:	d036      	beq.n	8005994 <_printf_i+0x90>
 8005926:	d80a      	bhi.n	800593e <_printf_i+0x3a>
 8005928:	2900      	cmp	r1, #0
 800592a:	f000 80b9 	beq.w	8005aa0 <_printf_i+0x19c>
 800592e:	2958      	cmp	r1, #88	; 0x58
 8005930:	f000 8083 	beq.w	8005a3a <_printf_i+0x136>
 8005934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005938:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800593c:	e032      	b.n	80059a4 <_printf_i+0xa0>
 800593e:	2964      	cmp	r1, #100	; 0x64
 8005940:	d001      	beq.n	8005946 <_printf_i+0x42>
 8005942:	2969      	cmp	r1, #105	; 0x69
 8005944:	d1f6      	bne.n	8005934 <_printf_i+0x30>
 8005946:	6820      	ldr	r0, [r4, #0]
 8005948:	6813      	ldr	r3, [r2, #0]
 800594a:	0605      	lsls	r5, r0, #24
 800594c:	f103 0104 	add.w	r1, r3, #4
 8005950:	d52a      	bpl.n	80059a8 <_printf_i+0xa4>
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	6011      	str	r1, [r2, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	da03      	bge.n	8005962 <_printf_i+0x5e>
 800595a:	222d      	movs	r2, #45	; 0x2d
 800595c:	425b      	negs	r3, r3
 800595e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005962:	486f      	ldr	r0, [pc, #444]	; (8005b20 <_printf_i+0x21c>)
 8005964:	220a      	movs	r2, #10
 8005966:	e039      	b.n	80059dc <_printf_i+0xd8>
 8005968:	2973      	cmp	r1, #115	; 0x73
 800596a:	f000 809d 	beq.w	8005aa8 <_printf_i+0x1a4>
 800596e:	d808      	bhi.n	8005982 <_printf_i+0x7e>
 8005970:	296f      	cmp	r1, #111	; 0x6f
 8005972:	d020      	beq.n	80059b6 <_printf_i+0xb2>
 8005974:	2970      	cmp	r1, #112	; 0x70
 8005976:	d1dd      	bne.n	8005934 <_printf_i+0x30>
 8005978:	6823      	ldr	r3, [r4, #0]
 800597a:	f043 0320 	orr.w	r3, r3, #32
 800597e:	6023      	str	r3, [r4, #0]
 8005980:	e003      	b.n	800598a <_printf_i+0x86>
 8005982:	2975      	cmp	r1, #117	; 0x75
 8005984:	d017      	beq.n	80059b6 <_printf_i+0xb2>
 8005986:	2978      	cmp	r1, #120	; 0x78
 8005988:	d1d4      	bne.n	8005934 <_printf_i+0x30>
 800598a:	2378      	movs	r3, #120	; 0x78
 800598c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005990:	4864      	ldr	r0, [pc, #400]	; (8005b24 <_printf_i+0x220>)
 8005992:	e055      	b.n	8005a40 <_printf_i+0x13c>
 8005994:	6813      	ldr	r3, [r2, #0]
 8005996:	1d19      	adds	r1, r3, #4
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6011      	str	r1, [r2, #0]
 800599c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80059a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80059a4:	2301      	movs	r3, #1
 80059a6:	e08c      	b.n	8005ac2 <_printf_i+0x1be>
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	6011      	str	r1, [r2, #0]
 80059ac:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059b0:	bf18      	it	ne
 80059b2:	b21b      	sxthne	r3, r3
 80059b4:	e7cf      	b.n	8005956 <_printf_i+0x52>
 80059b6:	6813      	ldr	r3, [r2, #0]
 80059b8:	6825      	ldr	r5, [r4, #0]
 80059ba:	1d18      	adds	r0, r3, #4
 80059bc:	6010      	str	r0, [r2, #0]
 80059be:	0628      	lsls	r0, r5, #24
 80059c0:	d501      	bpl.n	80059c6 <_printf_i+0xc2>
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	e002      	b.n	80059cc <_printf_i+0xc8>
 80059c6:	0668      	lsls	r0, r5, #25
 80059c8:	d5fb      	bpl.n	80059c2 <_printf_i+0xbe>
 80059ca:	881b      	ldrh	r3, [r3, #0]
 80059cc:	4854      	ldr	r0, [pc, #336]	; (8005b20 <_printf_i+0x21c>)
 80059ce:	296f      	cmp	r1, #111	; 0x6f
 80059d0:	bf14      	ite	ne
 80059d2:	220a      	movne	r2, #10
 80059d4:	2208      	moveq	r2, #8
 80059d6:	2100      	movs	r1, #0
 80059d8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059dc:	6865      	ldr	r5, [r4, #4]
 80059de:	60a5      	str	r5, [r4, #8]
 80059e0:	2d00      	cmp	r5, #0
 80059e2:	f2c0 8095 	blt.w	8005b10 <_printf_i+0x20c>
 80059e6:	6821      	ldr	r1, [r4, #0]
 80059e8:	f021 0104 	bic.w	r1, r1, #4
 80059ec:	6021      	str	r1, [r4, #0]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d13d      	bne.n	8005a6e <_printf_i+0x16a>
 80059f2:	2d00      	cmp	r5, #0
 80059f4:	f040 808e 	bne.w	8005b14 <_printf_i+0x210>
 80059f8:	4665      	mov	r5, ip
 80059fa:	2a08      	cmp	r2, #8
 80059fc:	d10b      	bne.n	8005a16 <_printf_i+0x112>
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	07db      	lsls	r3, r3, #31
 8005a02:	d508      	bpl.n	8005a16 <_printf_i+0x112>
 8005a04:	6923      	ldr	r3, [r4, #16]
 8005a06:	6862      	ldr	r2, [r4, #4]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	bfde      	ittt	le
 8005a0c:	2330      	movle	r3, #48	; 0x30
 8005a0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a16:	ebac 0305 	sub.w	r3, ip, r5
 8005a1a:	6123      	str	r3, [r4, #16]
 8005a1c:	f8cd 8000 	str.w	r8, [sp]
 8005a20:	463b      	mov	r3, r7
 8005a22:	aa03      	add	r2, sp, #12
 8005a24:	4621      	mov	r1, r4
 8005a26:	4630      	mov	r0, r6
 8005a28:	f7ff fef6 	bl	8005818 <_printf_common>
 8005a2c:	3001      	adds	r0, #1
 8005a2e:	d14d      	bne.n	8005acc <_printf_i+0x1c8>
 8005a30:	f04f 30ff 	mov.w	r0, #4294967295
 8005a34:	b005      	add	sp, #20
 8005a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a3a:	4839      	ldr	r0, [pc, #228]	; (8005b20 <_printf_i+0x21c>)
 8005a3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005a40:	6813      	ldr	r3, [r2, #0]
 8005a42:	6821      	ldr	r1, [r4, #0]
 8005a44:	1d1d      	adds	r5, r3, #4
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6015      	str	r5, [r2, #0]
 8005a4a:	060a      	lsls	r2, r1, #24
 8005a4c:	d50b      	bpl.n	8005a66 <_printf_i+0x162>
 8005a4e:	07ca      	lsls	r2, r1, #31
 8005a50:	bf44      	itt	mi
 8005a52:	f041 0120 	orrmi.w	r1, r1, #32
 8005a56:	6021      	strmi	r1, [r4, #0]
 8005a58:	b91b      	cbnz	r3, 8005a62 <_printf_i+0x15e>
 8005a5a:	6822      	ldr	r2, [r4, #0]
 8005a5c:	f022 0220 	bic.w	r2, r2, #32
 8005a60:	6022      	str	r2, [r4, #0]
 8005a62:	2210      	movs	r2, #16
 8005a64:	e7b7      	b.n	80059d6 <_printf_i+0xd2>
 8005a66:	064d      	lsls	r5, r1, #25
 8005a68:	bf48      	it	mi
 8005a6a:	b29b      	uxthmi	r3, r3
 8005a6c:	e7ef      	b.n	8005a4e <_printf_i+0x14a>
 8005a6e:	4665      	mov	r5, ip
 8005a70:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a74:	fb02 3311 	mls	r3, r2, r1, r3
 8005a78:	5cc3      	ldrb	r3, [r0, r3]
 8005a7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005a7e:	460b      	mov	r3, r1
 8005a80:	2900      	cmp	r1, #0
 8005a82:	d1f5      	bne.n	8005a70 <_printf_i+0x16c>
 8005a84:	e7b9      	b.n	80059fa <_printf_i+0xf6>
 8005a86:	6813      	ldr	r3, [r2, #0]
 8005a88:	6825      	ldr	r5, [r4, #0]
 8005a8a:	6961      	ldr	r1, [r4, #20]
 8005a8c:	1d18      	adds	r0, r3, #4
 8005a8e:	6010      	str	r0, [r2, #0]
 8005a90:	0628      	lsls	r0, r5, #24
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	d501      	bpl.n	8005a9a <_printf_i+0x196>
 8005a96:	6019      	str	r1, [r3, #0]
 8005a98:	e002      	b.n	8005aa0 <_printf_i+0x19c>
 8005a9a:	066a      	lsls	r2, r5, #25
 8005a9c:	d5fb      	bpl.n	8005a96 <_printf_i+0x192>
 8005a9e:	8019      	strh	r1, [r3, #0]
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	6123      	str	r3, [r4, #16]
 8005aa4:	4665      	mov	r5, ip
 8005aa6:	e7b9      	b.n	8005a1c <_printf_i+0x118>
 8005aa8:	6813      	ldr	r3, [r2, #0]
 8005aaa:	1d19      	adds	r1, r3, #4
 8005aac:	6011      	str	r1, [r2, #0]
 8005aae:	681d      	ldr	r5, [r3, #0]
 8005ab0:	6862      	ldr	r2, [r4, #4]
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	4628      	mov	r0, r5
 8005ab6:	f7fa fb93 	bl	80001e0 <memchr>
 8005aba:	b108      	cbz	r0, 8005ac0 <_printf_i+0x1bc>
 8005abc:	1b40      	subs	r0, r0, r5
 8005abe:	6060      	str	r0, [r4, #4]
 8005ac0:	6863      	ldr	r3, [r4, #4]
 8005ac2:	6123      	str	r3, [r4, #16]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005aca:	e7a7      	b.n	8005a1c <_printf_i+0x118>
 8005acc:	6923      	ldr	r3, [r4, #16]
 8005ace:	462a      	mov	r2, r5
 8005ad0:	4639      	mov	r1, r7
 8005ad2:	4630      	mov	r0, r6
 8005ad4:	47c0      	blx	r8
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	d0aa      	beq.n	8005a30 <_printf_i+0x12c>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	079b      	lsls	r3, r3, #30
 8005ade:	d413      	bmi.n	8005b08 <_printf_i+0x204>
 8005ae0:	68e0      	ldr	r0, [r4, #12]
 8005ae2:	9b03      	ldr	r3, [sp, #12]
 8005ae4:	4298      	cmp	r0, r3
 8005ae6:	bfb8      	it	lt
 8005ae8:	4618      	movlt	r0, r3
 8005aea:	e7a3      	b.n	8005a34 <_printf_i+0x130>
 8005aec:	2301      	movs	r3, #1
 8005aee:	464a      	mov	r2, r9
 8005af0:	4639      	mov	r1, r7
 8005af2:	4630      	mov	r0, r6
 8005af4:	47c0      	blx	r8
 8005af6:	3001      	adds	r0, #1
 8005af8:	d09a      	beq.n	8005a30 <_printf_i+0x12c>
 8005afa:	3501      	adds	r5, #1
 8005afc:	68e3      	ldr	r3, [r4, #12]
 8005afe:	9a03      	ldr	r2, [sp, #12]
 8005b00:	1a9b      	subs	r3, r3, r2
 8005b02:	42ab      	cmp	r3, r5
 8005b04:	dcf2      	bgt.n	8005aec <_printf_i+0x1e8>
 8005b06:	e7eb      	b.n	8005ae0 <_printf_i+0x1dc>
 8005b08:	2500      	movs	r5, #0
 8005b0a:	f104 0919 	add.w	r9, r4, #25
 8005b0e:	e7f5      	b.n	8005afc <_printf_i+0x1f8>
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1ac      	bne.n	8005a6e <_printf_i+0x16a>
 8005b14:	7803      	ldrb	r3, [r0, #0]
 8005b16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b1e:	e76c      	b.n	80059fa <_printf_i+0xf6>
 8005b20:	080097fa 	.word	0x080097fa
 8005b24:	0800980b 	.word	0x0800980b

08005b28 <_scanf_float>:
 8005b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b2c:	469a      	mov	sl, r3
 8005b2e:	688b      	ldr	r3, [r1, #8]
 8005b30:	4616      	mov	r6, r2
 8005b32:	1e5a      	subs	r2, r3, #1
 8005b34:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005b38:	b087      	sub	sp, #28
 8005b3a:	bf83      	ittte	hi
 8005b3c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8005b40:	189b      	addhi	r3, r3, r2
 8005b42:	9301      	strhi	r3, [sp, #4]
 8005b44:	2300      	movls	r3, #0
 8005b46:	bf86      	itte	hi
 8005b48:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005b4c:	608b      	strhi	r3, [r1, #8]
 8005b4e:	9301      	strls	r3, [sp, #4]
 8005b50:	680b      	ldr	r3, [r1, #0]
 8005b52:	4688      	mov	r8, r1
 8005b54:	f04f 0b00 	mov.w	fp, #0
 8005b58:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005b5c:	f848 3b1c 	str.w	r3, [r8], #28
 8005b60:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8005b64:	4607      	mov	r7, r0
 8005b66:	460c      	mov	r4, r1
 8005b68:	4645      	mov	r5, r8
 8005b6a:	465a      	mov	r2, fp
 8005b6c:	46d9      	mov	r9, fp
 8005b6e:	f8cd b008 	str.w	fp, [sp, #8]
 8005b72:	68a1      	ldr	r1, [r4, #8]
 8005b74:	b181      	cbz	r1, 8005b98 <_scanf_float+0x70>
 8005b76:	6833      	ldr	r3, [r6, #0]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b49      	cmp	r3, #73	; 0x49
 8005b7c:	d071      	beq.n	8005c62 <_scanf_float+0x13a>
 8005b7e:	d84d      	bhi.n	8005c1c <_scanf_float+0xf4>
 8005b80:	2b39      	cmp	r3, #57	; 0x39
 8005b82:	d840      	bhi.n	8005c06 <_scanf_float+0xde>
 8005b84:	2b31      	cmp	r3, #49	; 0x31
 8005b86:	f080 8088 	bcs.w	8005c9a <_scanf_float+0x172>
 8005b8a:	2b2d      	cmp	r3, #45	; 0x2d
 8005b8c:	f000 8090 	beq.w	8005cb0 <_scanf_float+0x188>
 8005b90:	d815      	bhi.n	8005bbe <_scanf_float+0x96>
 8005b92:	2b2b      	cmp	r3, #43	; 0x2b
 8005b94:	f000 808c 	beq.w	8005cb0 <_scanf_float+0x188>
 8005b98:	f1b9 0f00 	cmp.w	r9, #0
 8005b9c:	d003      	beq.n	8005ba6 <_scanf_float+0x7e>
 8005b9e:	6823      	ldr	r3, [r4, #0]
 8005ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	3a01      	subs	r2, #1
 8005ba8:	2a01      	cmp	r2, #1
 8005baa:	f200 80ea 	bhi.w	8005d82 <_scanf_float+0x25a>
 8005bae:	4545      	cmp	r5, r8
 8005bb0:	f200 80dc 	bhi.w	8005d6c <_scanf_float+0x244>
 8005bb4:	2601      	movs	r6, #1
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	b007      	add	sp, #28
 8005bba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bbe:	2b2e      	cmp	r3, #46	; 0x2e
 8005bc0:	f000 809f 	beq.w	8005d02 <_scanf_float+0x1da>
 8005bc4:	2b30      	cmp	r3, #48	; 0x30
 8005bc6:	d1e7      	bne.n	8005b98 <_scanf_float+0x70>
 8005bc8:	6820      	ldr	r0, [r4, #0]
 8005bca:	f410 7f80 	tst.w	r0, #256	; 0x100
 8005bce:	d064      	beq.n	8005c9a <_scanf_float+0x172>
 8005bd0:	9b01      	ldr	r3, [sp, #4]
 8005bd2:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8005bd6:	6020      	str	r0, [r4, #0]
 8005bd8:	f109 0901 	add.w	r9, r9, #1
 8005bdc:	b11b      	cbz	r3, 8005be6 <_scanf_float+0xbe>
 8005bde:	3b01      	subs	r3, #1
 8005be0:	3101      	adds	r1, #1
 8005be2:	9301      	str	r3, [sp, #4]
 8005be4:	60a1      	str	r1, [r4, #8]
 8005be6:	68a3      	ldr	r3, [r4, #8]
 8005be8:	3b01      	subs	r3, #1
 8005bea:	60a3      	str	r3, [r4, #8]
 8005bec:	6923      	ldr	r3, [r4, #16]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	6123      	str	r3, [r4, #16]
 8005bf2:	6873      	ldr	r3, [r6, #4]
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	6073      	str	r3, [r6, #4]
 8005bfa:	f340 80ac 	ble.w	8005d56 <_scanf_float+0x22e>
 8005bfe:	6833      	ldr	r3, [r6, #0]
 8005c00:	3301      	adds	r3, #1
 8005c02:	6033      	str	r3, [r6, #0]
 8005c04:	e7b5      	b.n	8005b72 <_scanf_float+0x4a>
 8005c06:	2b45      	cmp	r3, #69	; 0x45
 8005c08:	f000 8085 	beq.w	8005d16 <_scanf_float+0x1ee>
 8005c0c:	2b46      	cmp	r3, #70	; 0x46
 8005c0e:	d06a      	beq.n	8005ce6 <_scanf_float+0x1be>
 8005c10:	2b41      	cmp	r3, #65	; 0x41
 8005c12:	d1c1      	bne.n	8005b98 <_scanf_float+0x70>
 8005c14:	2a01      	cmp	r2, #1
 8005c16:	d1bf      	bne.n	8005b98 <_scanf_float+0x70>
 8005c18:	2202      	movs	r2, #2
 8005c1a:	e046      	b.n	8005caa <_scanf_float+0x182>
 8005c1c:	2b65      	cmp	r3, #101	; 0x65
 8005c1e:	d07a      	beq.n	8005d16 <_scanf_float+0x1ee>
 8005c20:	d818      	bhi.n	8005c54 <_scanf_float+0x12c>
 8005c22:	2b54      	cmp	r3, #84	; 0x54
 8005c24:	d066      	beq.n	8005cf4 <_scanf_float+0x1cc>
 8005c26:	d811      	bhi.n	8005c4c <_scanf_float+0x124>
 8005c28:	2b4e      	cmp	r3, #78	; 0x4e
 8005c2a:	d1b5      	bne.n	8005b98 <_scanf_float+0x70>
 8005c2c:	2a00      	cmp	r2, #0
 8005c2e:	d146      	bne.n	8005cbe <_scanf_float+0x196>
 8005c30:	f1b9 0f00 	cmp.w	r9, #0
 8005c34:	d145      	bne.n	8005cc2 <_scanf_float+0x19a>
 8005c36:	6821      	ldr	r1, [r4, #0]
 8005c38:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005c3c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005c40:	d13f      	bne.n	8005cc2 <_scanf_float+0x19a>
 8005c42:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005c46:	6021      	str	r1, [r4, #0]
 8005c48:	2201      	movs	r2, #1
 8005c4a:	e02e      	b.n	8005caa <_scanf_float+0x182>
 8005c4c:	2b59      	cmp	r3, #89	; 0x59
 8005c4e:	d01e      	beq.n	8005c8e <_scanf_float+0x166>
 8005c50:	2b61      	cmp	r3, #97	; 0x61
 8005c52:	e7de      	b.n	8005c12 <_scanf_float+0xea>
 8005c54:	2b6e      	cmp	r3, #110	; 0x6e
 8005c56:	d0e9      	beq.n	8005c2c <_scanf_float+0x104>
 8005c58:	d815      	bhi.n	8005c86 <_scanf_float+0x15e>
 8005c5a:	2b66      	cmp	r3, #102	; 0x66
 8005c5c:	d043      	beq.n	8005ce6 <_scanf_float+0x1be>
 8005c5e:	2b69      	cmp	r3, #105	; 0x69
 8005c60:	d19a      	bne.n	8005b98 <_scanf_float+0x70>
 8005c62:	f1bb 0f00 	cmp.w	fp, #0
 8005c66:	d138      	bne.n	8005cda <_scanf_float+0x1b2>
 8005c68:	f1b9 0f00 	cmp.w	r9, #0
 8005c6c:	d197      	bne.n	8005b9e <_scanf_float+0x76>
 8005c6e:	6821      	ldr	r1, [r4, #0]
 8005c70:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8005c74:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8005c78:	d195      	bne.n	8005ba6 <_scanf_float+0x7e>
 8005c7a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005c7e:	6021      	str	r1, [r4, #0]
 8005c80:	f04f 0b01 	mov.w	fp, #1
 8005c84:	e011      	b.n	8005caa <_scanf_float+0x182>
 8005c86:	2b74      	cmp	r3, #116	; 0x74
 8005c88:	d034      	beq.n	8005cf4 <_scanf_float+0x1cc>
 8005c8a:	2b79      	cmp	r3, #121	; 0x79
 8005c8c:	d184      	bne.n	8005b98 <_scanf_float+0x70>
 8005c8e:	f1bb 0f07 	cmp.w	fp, #7
 8005c92:	d181      	bne.n	8005b98 <_scanf_float+0x70>
 8005c94:	f04f 0b08 	mov.w	fp, #8
 8005c98:	e007      	b.n	8005caa <_scanf_float+0x182>
 8005c9a:	eb12 0f0b 	cmn.w	r2, fp
 8005c9e:	f47f af7b 	bne.w	8005b98 <_scanf_float+0x70>
 8005ca2:	6821      	ldr	r1, [r4, #0]
 8005ca4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8005ca8:	6021      	str	r1, [r4, #0]
 8005caa:	702b      	strb	r3, [r5, #0]
 8005cac:	3501      	adds	r5, #1
 8005cae:	e79a      	b.n	8005be6 <_scanf_float+0xbe>
 8005cb0:	6821      	ldr	r1, [r4, #0]
 8005cb2:	0608      	lsls	r0, r1, #24
 8005cb4:	f57f af70 	bpl.w	8005b98 <_scanf_float+0x70>
 8005cb8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005cbc:	e7f4      	b.n	8005ca8 <_scanf_float+0x180>
 8005cbe:	2a02      	cmp	r2, #2
 8005cc0:	d047      	beq.n	8005d52 <_scanf_float+0x22a>
 8005cc2:	f1bb 0f01 	cmp.w	fp, #1
 8005cc6:	d003      	beq.n	8005cd0 <_scanf_float+0x1a8>
 8005cc8:	f1bb 0f04 	cmp.w	fp, #4
 8005ccc:	f47f af64 	bne.w	8005b98 <_scanf_float+0x70>
 8005cd0:	f10b 0b01 	add.w	fp, fp, #1
 8005cd4:	fa5f fb8b 	uxtb.w	fp, fp
 8005cd8:	e7e7      	b.n	8005caa <_scanf_float+0x182>
 8005cda:	f1bb 0f03 	cmp.w	fp, #3
 8005cde:	d0f7      	beq.n	8005cd0 <_scanf_float+0x1a8>
 8005ce0:	f1bb 0f05 	cmp.w	fp, #5
 8005ce4:	e7f2      	b.n	8005ccc <_scanf_float+0x1a4>
 8005ce6:	f1bb 0f02 	cmp.w	fp, #2
 8005cea:	f47f af55 	bne.w	8005b98 <_scanf_float+0x70>
 8005cee:	f04f 0b03 	mov.w	fp, #3
 8005cf2:	e7da      	b.n	8005caa <_scanf_float+0x182>
 8005cf4:	f1bb 0f06 	cmp.w	fp, #6
 8005cf8:	f47f af4e 	bne.w	8005b98 <_scanf_float+0x70>
 8005cfc:	f04f 0b07 	mov.w	fp, #7
 8005d00:	e7d3      	b.n	8005caa <_scanf_float+0x182>
 8005d02:	6821      	ldr	r1, [r4, #0]
 8005d04:	0588      	lsls	r0, r1, #22
 8005d06:	f57f af47 	bpl.w	8005b98 <_scanf_float+0x70>
 8005d0a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8005d0e:	6021      	str	r1, [r4, #0]
 8005d10:	f8cd 9008 	str.w	r9, [sp, #8]
 8005d14:	e7c9      	b.n	8005caa <_scanf_float+0x182>
 8005d16:	6821      	ldr	r1, [r4, #0]
 8005d18:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8005d1c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005d20:	d006      	beq.n	8005d30 <_scanf_float+0x208>
 8005d22:	0548      	lsls	r0, r1, #21
 8005d24:	f57f af38 	bpl.w	8005b98 <_scanf_float+0x70>
 8005d28:	f1b9 0f00 	cmp.w	r9, #0
 8005d2c:	f43f af3b 	beq.w	8005ba6 <_scanf_float+0x7e>
 8005d30:	0588      	lsls	r0, r1, #22
 8005d32:	bf58      	it	pl
 8005d34:	9802      	ldrpl	r0, [sp, #8]
 8005d36:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8005d3a:	bf58      	it	pl
 8005d3c:	eba9 0000 	subpl.w	r0, r9, r0
 8005d40:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8005d44:	bf58      	it	pl
 8005d46:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8005d4a:	6021      	str	r1, [r4, #0]
 8005d4c:	f04f 0900 	mov.w	r9, #0
 8005d50:	e7ab      	b.n	8005caa <_scanf_float+0x182>
 8005d52:	2203      	movs	r2, #3
 8005d54:	e7a9      	b.n	8005caa <_scanf_float+0x182>
 8005d56:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005d5a:	9205      	str	r2, [sp, #20]
 8005d5c:	4631      	mov	r1, r6
 8005d5e:	4638      	mov	r0, r7
 8005d60:	4798      	blx	r3
 8005d62:	9a05      	ldr	r2, [sp, #20]
 8005d64:	2800      	cmp	r0, #0
 8005d66:	f43f af04 	beq.w	8005b72 <_scanf_float+0x4a>
 8005d6a:	e715      	b.n	8005b98 <_scanf_float+0x70>
 8005d6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d70:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005d74:	4632      	mov	r2, r6
 8005d76:	4638      	mov	r0, r7
 8005d78:	4798      	blx	r3
 8005d7a:	6923      	ldr	r3, [r4, #16]
 8005d7c:	3b01      	subs	r3, #1
 8005d7e:	6123      	str	r3, [r4, #16]
 8005d80:	e715      	b.n	8005bae <_scanf_float+0x86>
 8005d82:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005d86:	2b06      	cmp	r3, #6
 8005d88:	d80a      	bhi.n	8005da0 <_scanf_float+0x278>
 8005d8a:	f1bb 0f02 	cmp.w	fp, #2
 8005d8e:	d968      	bls.n	8005e62 <_scanf_float+0x33a>
 8005d90:	f1ab 0b03 	sub.w	fp, fp, #3
 8005d94:	fa5f fb8b 	uxtb.w	fp, fp
 8005d98:	eba5 0b0b 	sub.w	fp, r5, fp
 8005d9c:	455d      	cmp	r5, fp
 8005d9e:	d14b      	bne.n	8005e38 <_scanf_float+0x310>
 8005da0:	6823      	ldr	r3, [r4, #0]
 8005da2:	05da      	lsls	r2, r3, #23
 8005da4:	d51f      	bpl.n	8005de6 <_scanf_float+0x2be>
 8005da6:	055b      	lsls	r3, r3, #21
 8005da8:	d468      	bmi.n	8005e7c <_scanf_float+0x354>
 8005daa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005dae:	6923      	ldr	r3, [r4, #16]
 8005db0:	2965      	cmp	r1, #101	; 0x65
 8005db2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005db6:	f105 3bff 	add.w	fp, r5, #4294967295
 8005dba:	6123      	str	r3, [r4, #16]
 8005dbc:	d00d      	beq.n	8005dda <_scanf_float+0x2b2>
 8005dbe:	2945      	cmp	r1, #69	; 0x45
 8005dc0:	d00b      	beq.n	8005dda <_scanf_float+0x2b2>
 8005dc2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005dc6:	4632      	mov	r2, r6
 8005dc8:	4638      	mov	r0, r7
 8005dca:	4798      	blx	r3
 8005dcc:	6923      	ldr	r3, [r4, #16]
 8005dce:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8005dd2:	3b01      	subs	r3, #1
 8005dd4:	f1a5 0b02 	sub.w	fp, r5, #2
 8005dd8:	6123      	str	r3, [r4, #16]
 8005dda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005dde:	4632      	mov	r2, r6
 8005de0:	4638      	mov	r0, r7
 8005de2:	4798      	blx	r3
 8005de4:	465d      	mov	r5, fp
 8005de6:	6826      	ldr	r6, [r4, #0]
 8005de8:	f016 0610 	ands.w	r6, r6, #16
 8005dec:	d17a      	bne.n	8005ee4 <_scanf_float+0x3bc>
 8005dee:	702e      	strb	r6, [r5, #0]
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dfa:	d142      	bne.n	8005e82 <_scanf_float+0x35a>
 8005dfc:	9b02      	ldr	r3, [sp, #8]
 8005dfe:	eba9 0303 	sub.w	r3, r9, r3
 8005e02:	425a      	negs	r2, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d149      	bne.n	8005e9c <_scanf_float+0x374>
 8005e08:	2200      	movs	r2, #0
 8005e0a:	4641      	mov	r1, r8
 8005e0c:	4638      	mov	r0, r7
 8005e0e:	f000 ff1f 	bl	8006c50 <_strtod_r>
 8005e12:	6825      	ldr	r5, [r4, #0]
 8005e14:	f8da 3000 	ldr.w	r3, [sl]
 8005e18:	f015 0f02 	tst.w	r5, #2
 8005e1c:	f103 0204 	add.w	r2, r3, #4
 8005e20:	ec59 8b10 	vmov	r8, r9, d0
 8005e24:	f8ca 2000 	str.w	r2, [sl]
 8005e28:	d043      	beq.n	8005eb2 <_scanf_float+0x38a>
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	e9c3 8900 	strd	r8, r9, [r3]
 8005e30:	68e3      	ldr	r3, [r4, #12]
 8005e32:	3301      	adds	r3, #1
 8005e34:	60e3      	str	r3, [r4, #12]
 8005e36:	e6be      	b.n	8005bb6 <_scanf_float+0x8e>
 8005e38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e3c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005e40:	4632      	mov	r2, r6
 8005e42:	4638      	mov	r0, r7
 8005e44:	4798      	blx	r3
 8005e46:	6923      	ldr	r3, [r4, #16]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	6123      	str	r3, [r4, #16]
 8005e4c:	e7a6      	b.n	8005d9c <_scanf_float+0x274>
 8005e4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e52:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005e56:	4632      	mov	r2, r6
 8005e58:	4638      	mov	r0, r7
 8005e5a:	4798      	blx	r3
 8005e5c:	6923      	ldr	r3, [r4, #16]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	6123      	str	r3, [r4, #16]
 8005e62:	4545      	cmp	r5, r8
 8005e64:	d8f3      	bhi.n	8005e4e <_scanf_float+0x326>
 8005e66:	e6a5      	b.n	8005bb4 <_scanf_float+0x8c>
 8005e68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e6c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8005e70:	4632      	mov	r2, r6
 8005e72:	4638      	mov	r0, r7
 8005e74:	4798      	blx	r3
 8005e76:	6923      	ldr	r3, [r4, #16]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	6123      	str	r3, [r4, #16]
 8005e7c:	4545      	cmp	r5, r8
 8005e7e:	d8f3      	bhi.n	8005e68 <_scanf_float+0x340>
 8005e80:	e698      	b.n	8005bb4 <_scanf_float+0x8c>
 8005e82:	9b03      	ldr	r3, [sp, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d0bf      	beq.n	8005e08 <_scanf_float+0x2e0>
 8005e88:	9904      	ldr	r1, [sp, #16]
 8005e8a:	230a      	movs	r3, #10
 8005e8c:	4632      	mov	r2, r6
 8005e8e:	3101      	adds	r1, #1
 8005e90:	4638      	mov	r0, r7
 8005e92:	f000 ff69 	bl	8006d68 <_strtol_r>
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	9d04      	ldr	r5, [sp, #16]
 8005e9a:	1ac2      	subs	r2, r0, r3
 8005e9c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005ea0:	429d      	cmp	r5, r3
 8005ea2:	bf28      	it	cs
 8005ea4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8005ea8:	490f      	ldr	r1, [pc, #60]	; (8005ee8 <_scanf_float+0x3c0>)
 8005eaa:	4628      	mov	r0, r5
 8005eac:	f000 f8a0 	bl	8005ff0 <siprintf>
 8005eb0:	e7aa      	b.n	8005e08 <_scanf_float+0x2e0>
 8005eb2:	f015 0504 	ands.w	r5, r5, #4
 8005eb6:	d1b8      	bne.n	8005e2a <_scanf_float+0x302>
 8005eb8:	681f      	ldr	r7, [r3, #0]
 8005eba:	ee10 2a10 	vmov	r2, s0
 8005ebe:	464b      	mov	r3, r9
 8005ec0:	ee10 0a10 	vmov	r0, s0
 8005ec4:	4649      	mov	r1, r9
 8005ec6:	f7fa fe31 	bl	8000b2c <__aeabi_dcmpun>
 8005eca:	b128      	cbz	r0, 8005ed8 <_scanf_float+0x3b0>
 8005ecc:	4628      	mov	r0, r5
 8005ece:	f000 f889 	bl	8005fe4 <nanf>
 8005ed2:	ed87 0a00 	vstr	s0, [r7]
 8005ed6:	e7ab      	b.n	8005e30 <_scanf_float+0x308>
 8005ed8:	4640      	mov	r0, r8
 8005eda:	4649      	mov	r1, r9
 8005edc:	f7fa fe84 	bl	8000be8 <__aeabi_d2f>
 8005ee0:	6038      	str	r0, [r7, #0]
 8005ee2:	e7a5      	b.n	8005e30 <_scanf_float+0x308>
 8005ee4:	2600      	movs	r6, #0
 8005ee6:	e666      	b.n	8005bb6 <_scanf_float+0x8e>
 8005ee8:	0800981c 	.word	0x0800981c

08005eec <iprintf>:
 8005eec:	b40f      	push	{r0, r1, r2, r3}
 8005eee:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <iprintf+0x2c>)
 8005ef0:	b513      	push	{r0, r1, r4, lr}
 8005ef2:	681c      	ldr	r4, [r3, #0]
 8005ef4:	b124      	cbz	r4, 8005f00 <iprintf+0x14>
 8005ef6:	69a3      	ldr	r3, [r4, #24]
 8005ef8:	b913      	cbnz	r3, 8005f00 <iprintf+0x14>
 8005efa:	4620      	mov	r0, r4
 8005efc:	f001 ff3c 	bl	8007d78 <__sinit>
 8005f00:	ab05      	add	r3, sp, #20
 8005f02:	9a04      	ldr	r2, [sp, #16]
 8005f04:	68a1      	ldr	r1, [r4, #8]
 8005f06:	9301      	str	r3, [sp, #4]
 8005f08:	4620      	mov	r0, r4
 8005f0a:	f003 f9b3 	bl	8009274 <_vfiprintf_r>
 8005f0e:	b002      	add	sp, #8
 8005f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f14:	b004      	add	sp, #16
 8005f16:	4770      	bx	lr
 8005f18:	20000048 	.word	0x20000048

08005f1c <_puts_r>:
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	460e      	mov	r6, r1
 8005f20:	4605      	mov	r5, r0
 8005f22:	b118      	cbz	r0, 8005f2c <_puts_r+0x10>
 8005f24:	6983      	ldr	r3, [r0, #24]
 8005f26:	b90b      	cbnz	r3, 8005f2c <_puts_r+0x10>
 8005f28:	f001 ff26 	bl	8007d78 <__sinit>
 8005f2c:	69ab      	ldr	r3, [r5, #24]
 8005f2e:	68ac      	ldr	r4, [r5, #8]
 8005f30:	b913      	cbnz	r3, 8005f38 <_puts_r+0x1c>
 8005f32:	4628      	mov	r0, r5
 8005f34:	f001 ff20 	bl	8007d78 <__sinit>
 8005f38:	4b23      	ldr	r3, [pc, #140]	; (8005fc8 <_puts_r+0xac>)
 8005f3a:	429c      	cmp	r4, r3
 8005f3c:	d117      	bne.n	8005f6e <_puts_r+0x52>
 8005f3e:	686c      	ldr	r4, [r5, #4]
 8005f40:	89a3      	ldrh	r3, [r4, #12]
 8005f42:	071b      	lsls	r3, r3, #28
 8005f44:	d51d      	bpl.n	8005f82 <_puts_r+0x66>
 8005f46:	6923      	ldr	r3, [r4, #16]
 8005f48:	b1db      	cbz	r3, 8005f82 <_puts_r+0x66>
 8005f4a:	3e01      	subs	r6, #1
 8005f4c:	68a3      	ldr	r3, [r4, #8]
 8005f4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f52:	3b01      	subs	r3, #1
 8005f54:	60a3      	str	r3, [r4, #8]
 8005f56:	b9e9      	cbnz	r1, 8005f94 <_puts_r+0x78>
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	da2e      	bge.n	8005fba <_puts_r+0x9e>
 8005f5c:	4622      	mov	r2, r4
 8005f5e:	210a      	movs	r1, #10
 8005f60:	4628      	mov	r0, r5
 8005f62:	f000 ff13 	bl	8006d8c <__swbuf_r>
 8005f66:	3001      	adds	r0, #1
 8005f68:	d011      	beq.n	8005f8e <_puts_r+0x72>
 8005f6a:	200a      	movs	r0, #10
 8005f6c:	e011      	b.n	8005f92 <_puts_r+0x76>
 8005f6e:	4b17      	ldr	r3, [pc, #92]	; (8005fcc <_puts_r+0xb0>)
 8005f70:	429c      	cmp	r4, r3
 8005f72:	d101      	bne.n	8005f78 <_puts_r+0x5c>
 8005f74:	68ac      	ldr	r4, [r5, #8]
 8005f76:	e7e3      	b.n	8005f40 <_puts_r+0x24>
 8005f78:	4b15      	ldr	r3, [pc, #84]	; (8005fd0 <_puts_r+0xb4>)
 8005f7a:	429c      	cmp	r4, r3
 8005f7c:	bf08      	it	eq
 8005f7e:	68ec      	ldreq	r4, [r5, #12]
 8005f80:	e7de      	b.n	8005f40 <_puts_r+0x24>
 8005f82:	4621      	mov	r1, r4
 8005f84:	4628      	mov	r0, r5
 8005f86:	f000 ff53 	bl	8006e30 <__swsetup_r>
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d0dd      	beq.n	8005f4a <_puts_r+0x2e>
 8005f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f92:	bd70      	pop	{r4, r5, r6, pc}
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	da04      	bge.n	8005fa2 <_puts_r+0x86>
 8005f98:	69a2      	ldr	r2, [r4, #24]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	dc06      	bgt.n	8005fac <_puts_r+0x90>
 8005f9e:	290a      	cmp	r1, #10
 8005fa0:	d004      	beq.n	8005fac <_puts_r+0x90>
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	1c5a      	adds	r2, r3, #1
 8005fa6:	6022      	str	r2, [r4, #0]
 8005fa8:	7019      	strb	r1, [r3, #0]
 8005faa:	e7cf      	b.n	8005f4c <_puts_r+0x30>
 8005fac:	4622      	mov	r2, r4
 8005fae:	4628      	mov	r0, r5
 8005fb0:	f000 feec 	bl	8006d8c <__swbuf_r>
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d1c9      	bne.n	8005f4c <_puts_r+0x30>
 8005fb8:	e7e9      	b.n	8005f8e <_puts_r+0x72>
 8005fba:	6823      	ldr	r3, [r4, #0]
 8005fbc:	200a      	movs	r0, #10
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	6022      	str	r2, [r4, #0]
 8005fc2:	7018      	strb	r0, [r3, #0]
 8005fc4:	e7e5      	b.n	8005f92 <_puts_r+0x76>
 8005fc6:	bf00      	nop
 8005fc8:	080098a8 	.word	0x080098a8
 8005fcc:	080098c8 	.word	0x080098c8
 8005fd0:	08009888 	.word	0x08009888

08005fd4 <puts>:
 8005fd4:	4b02      	ldr	r3, [pc, #8]	; (8005fe0 <puts+0xc>)
 8005fd6:	4601      	mov	r1, r0
 8005fd8:	6818      	ldr	r0, [r3, #0]
 8005fda:	f7ff bf9f 	b.w	8005f1c <_puts_r>
 8005fde:	bf00      	nop
 8005fe0:	20000048 	.word	0x20000048

08005fe4 <nanf>:
 8005fe4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005fec <nanf+0x8>
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	7fc00000 	.word	0x7fc00000

08005ff0 <siprintf>:
 8005ff0:	b40e      	push	{r1, r2, r3}
 8005ff2:	b500      	push	{lr}
 8005ff4:	b09c      	sub	sp, #112	; 0x70
 8005ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8005ff8:	9002      	str	r0, [sp, #8]
 8005ffa:	9006      	str	r0, [sp, #24]
 8005ffc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006000:	4809      	ldr	r0, [pc, #36]	; (8006028 <siprintf+0x38>)
 8006002:	9107      	str	r1, [sp, #28]
 8006004:	9104      	str	r1, [sp, #16]
 8006006:	4909      	ldr	r1, [pc, #36]	; (800602c <siprintf+0x3c>)
 8006008:	f853 2b04 	ldr.w	r2, [r3], #4
 800600c:	9105      	str	r1, [sp, #20]
 800600e:	6800      	ldr	r0, [r0, #0]
 8006010:	9301      	str	r3, [sp, #4]
 8006012:	a902      	add	r1, sp, #8
 8006014:	f003 f80c 	bl	8009030 <_svfiprintf_r>
 8006018:	9b02      	ldr	r3, [sp, #8]
 800601a:	2200      	movs	r2, #0
 800601c:	701a      	strb	r2, [r3, #0]
 800601e:	b01c      	add	sp, #112	; 0x70
 8006020:	f85d eb04 	ldr.w	lr, [sp], #4
 8006024:	b003      	add	sp, #12
 8006026:	4770      	bx	lr
 8006028:	20000048 	.word	0x20000048
 800602c:	ffff0208 	.word	0xffff0208

08006030 <sulp>:
 8006030:	b570      	push	{r4, r5, r6, lr}
 8006032:	4604      	mov	r4, r0
 8006034:	460d      	mov	r5, r1
 8006036:	ec45 4b10 	vmov	d0, r4, r5
 800603a:	4616      	mov	r6, r2
 800603c:	f002 fdb4 	bl	8008ba8 <__ulp>
 8006040:	ec51 0b10 	vmov	r0, r1, d0
 8006044:	b17e      	cbz	r6, 8006066 <sulp+0x36>
 8006046:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800604a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800604e:	2b00      	cmp	r3, #0
 8006050:	dd09      	ble.n	8006066 <sulp+0x36>
 8006052:	051b      	lsls	r3, r3, #20
 8006054:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006058:	2400      	movs	r4, #0
 800605a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800605e:	4622      	mov	r2, r4
 8006060:	462b      	mov	r3, r5
 8006062:	f7fa fac9 	bl	80005f8 <__aeabi_dmul>
 8006066:	bd70      	pop	{r4, r5, r6, pc}

08006068 <_strtod_l>:
 8006068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606c:	461f      	mov	r7, r3
 800606e:	b0a1      	sub	sp, #132	; 0x84
 8006070:	2300      	movs	r3, #0
 8006072:	4681      	mov	r9, r0
 8006074:	4638      	mov	r0, r7
 8006076:	460e      	mov	r6, r1
 8006078:	9217      	str	r2, [sp, #92]	; 0x5c
 800607a:	931c      	str	r3, [sp, #112]	; 0x70
 800607c:	f002 fa2f 	bl	80084de <__localeconv_l>
 8006080:	4680      	mov	r8, r0
 8006082:	6800      	ldr	r0, [r0, #0]
 8006084:	f7fa f8a4 	bl	80001d0 <strlen>
 8006088:	f04f 0a00 	mov.w	sl, #0
 800608c:	4604      	mov	r4, r0
 800608e:	f04f 0b00 	mov.w	fp, #0
 8006092:	961b      	str	r6, [sp, #108]	; 0x6c
 8006094:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006096:	781a      	ldrb	r2, [r3, #0]
 8006098:	2a0d      	cmp	r2, #13
 800609a:	d832      	bhi.n	8006102 <_strtod_l+0x9a>
 800609c:	2a09      	cmp	r2, #9
 800609e:	d236      	bcs.n	800610e <_strtod_l+0xa6>
 80060a0:	2a00      	cmp	r2, #0
 80060a2:	d03e      	beq.n	8006122 <_strtod_l+0xba>
 80060a4:	2300      	movs	r3, #0
 80060a6:	930d      	str	r3, [sp, #52]	; 0x34
 80060a8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80060aa:	782b      	ldrb	r3, [r5, #0]
 80060ac:	2b30      	cmp	r3, #48	; 0x30
 80060ae:	f040 80ac 	bne.w	800620a <_strtod_l+0x1a2>
 80060b2:	786b      	ldrb	r3, [r5, #1]
 80060b4:	2b58      	cmp	r3, #88	; 0x58
 80060b6:	d001      	beq.n	80060bc <_strtod_l+0x54>
 80060b8:	2b78      	cmp	r3, #120	; 0x78
 80060ba:	d167      	bne.n	800618c <_strtod_l+0x124>
 80060bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060be:	9301      	str	r3, [sp, #4]
 80060c0:	ab1c      	add	r3, sp, #112	; 0x70
 80060c2:	9300      	str	r3, [sp, #0]
 80060c4:	9702      	str	r7, [sp, #8]
 80060c6:	ab1d      	add	r3, sp, #116	; 0x74
 80060c8:	4a88      	ldr	r2, [pc, #544]	; (80062ec <_strtod_l+0x284>)
 80060ca:	a91b      	add	r1, sp, #108	; 0x6c
 80060cc:	4648      	mov	r0, r9
 80060ce:	f001 ff2c 	bl	8007f2a <__gethex>
 80060d2:	f010 0407 	ands.w	r4, r0, #7
 80060d6:	4606      	mov	r6, r0
 80060d8:	d005      	beq.n	80060e6 <_strtod_l+0x7e>
 80060da:	2c06      	cmp	r4, #6
 80060dc:	d12b      	bne.n	8006136 <_strtod_l+0xce>
 80060de:	3501      	adds	r5, #1
 80060e0:	2300      	movs	r3, #0
 80060e2:	951b      	str	r5, [sp, #108]	; 0x6c
 80060e4:	930d      	str	r3, [sp, #52]	; 0x34
 80060e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f040 859a 	bne.w	8006c22 <_strtod_l+0xbba>
 80060ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060f0:	b1e3      	cbz	r3, 800612c <_strtod_l+0xc4>
 80060f2:	4652      	mov	r2, sl
 80060f4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80060f8:	ec43 2b10 	vmov	d0, r2, r3
 80060fc:	b021      	add	sp, #132	; 0x84
 80060fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006102:	2a2b      	cmp	r2, #43	; 0x2b
 8006104:	d015      	beq.n	8006132 <_strtod_l+0xca>
 8006106:	2a2d      	cmp	r2, #45	; 0x2d
 8006108:	d004      	beq.n	8006114 <_strtod_l+0xac>
 800610a:	2a20      	cmp	r2, #32
 800610c:	d1ca      	bne.n	80060a4 <_strtod_l+0x3c>
 800610e:	3301      	adds	r3, #1
 8006110:	931b      	str	r3, [sp, #108]	; 0x6c
 8006112:	e7bf      	b.n	8006094 <_strtod_l+0x2c>
 8006114:	2201      	movs	r2, #1
 8006116:	920d      	str	r2, [sp, #52]	; 0x34
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	921b      	str	r2, [sp, #108]	; 0x6c
 800611c:	785b      	ldrb	r3, [r3, #1]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1c2      	bne.n	80060a8 <_strtod_l+0x40>
 8006122:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006124:	961b      	str	r6, [sp, #108]	; 0x6c
 8006126:	2b00      	cmp	r3, #0
 8006128:	f040 8579 	bne.w	8006c1e <_strtod_l+0xbb6>
 800612c:	4652      	mov	r2, sl
 800612e:	465b      	mov	r3, fp
 8006130:	e7e2      	b.n	80060f8 <_strtod_l+0x90>
 8006132:	2200      	movs	r2, #0
 8006134:	e7ef      	b.n	8006116 <_strtod_l+0xae>
 8006136:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006138:	b13a      	cbz	r2, 800614a <_strtod_l+0xe2>
 800613a:	2135      	movs	r1, #53	; 0x35
 800613c:	a81e      	add	r0, sp, #120	; 0x78
 800613e:	f002 fe2b 	bl	8008d98 <__copybits>
 8006142:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006144:	4648      	mov	r0, r9
 8006146:	f002 fa98 	bl	800867a <_Bfree>
 800614a:	3c01      	subs	r4, #1
 800614c:	2c04      	cmp	r4, #4
 800614e:	d806      	bhi.n	800615e <_strtod_l+0xf6>
 8006150:	e8df f004 	tbb	[pc, r4]
 8006154:	1714030a 	.word	0x1714030a
 8006158:	0a          	.byte	0x0a
 8006159:	00          	.byte	0x00
 800615a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800615e:	0730      	lsls	r0, r6, #28
 8006160:	d5c1      	bpl.n	80060e6 <_strtod_l+0x7e>
 8006162:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006166:	e7be      	b.n	80060e6 <_strtod_l+0x7e>
 8006168:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800616c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800616e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006172:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006176:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800617a:	e7f0      	b.n	800615e <_strtod_l+0xf6>
 800617c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80062f0 <_strtod_l+0x288>
 8006180:	e7ed      	b.n	800615e <_strtod_l+0xf6>
 8006182:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006186:	f04f 3aff 	mov.w	sl, #4294967295
 800618a:	e7e8      	b.n	800615e <_strtod_l+0xf6>
 800618c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	921b      	str	r2, [sp, #108]	; 0x6c
 8006192:	785b      	ldrb	r3, [r3, #1]
 8006194:	2b30      	cmp	r3, #48	; 0x30
 8006196:	d0f9      	beq.n	800618c <_strtod_l+0x124>
 8006198:	2b00      	cmp	r3, #0
 800619a:	d0a4      	beq.n	80060e6 <_strtod_l+0x7e>
 800619c:	2301      	movs	r3, #1
 800619e:	2500      	movs	r5, #0
 80061a0:	9306      	str	r3, [sp, #24]
 80061a2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80061a4:	9308      	str	r3, [sp, #32]
 80061a6:	9507      	str	r5, [sp, #28]
 80061a8:	9505      	str	r5, [sp, #20]
 80061aa:	220a      	movs	r2, #10
 80061ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80061ae:	7807      	ldrb	r7, [r0, #0]
 80061b0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80061b4:	b2d9      	uxtb	r1, r3
 80061b6:	2909      	cmp	r1, #9
 80061b8:	d929      	bls.n	800620e <_strtod_l+0x1a6>
 80061ba:	4622      	mov	r2, r4
 80061bc:	f8d8 1000 	ldr.w	r1, [r8]
 80061c0:	f003 f9c1 	bl	8009546 <strncmp>
 80061c4:	2800      	cmp	r0, #0
 80061c6:	d031      	beq.n	800622c <_strtod_l+0x1c4>
 80061c8:	2000      	movs	r0, #0
 80061ca:	9c05      	ldr	r4, [sp, #20]
 80061cc:	9004      	str	r0, [sp, #16]
 80061ce:	463b      	mov	r3, r7
 80061d0:	4602      	mov	r2, r0
 80061d2:	2b65      	cmp	r3, #101	; 0x65
 80061d4:	d001      	beq.n	80061da <_strtod_l+0x172>
 80061d6:	2b45      	cmp	r3, #69	; 0x45
 80061d8:	d114      	bne.n	8006204 <_strtod_l+0x19c>
 80061da:	b924      	cbnz	r4, 80061e6 <_strtod_l+0x17e>
 80061dc:	b910      	cbnz	r0, 80061e4 <_strtod_l+0x17c>
 80061de:	9b06      	ldr	r3, [sp, #24]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d09e      	beq.n	8006122 <_strtod_l+0xba>
 80061e4:	2400      	movs	r4, #0
 80061e6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80061e8:	1c73      	adds	r3, r6, #1
 80061ea:	931b      	str	r3, [sp, #108]	; 0x6c
 80061ec:	7873      	ldrb	r3, [r6, #1]
 80061ee:	2b2b      	cmp	r3, #43	; 0x2b
 80061f0:	d078      	beq.n	80062e4 <_strtod_l+0x27c>
 80061f2:	2b2d      	cmp	r3, #45	; 0x2d
 80061f4:	d070      	beq.n	80062d8 <_strtod_l+0x270>
 80061f6:	f04f 0c00 	mov.w	ip, #0
 80061fa:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80061fe:	2f09      	cmp	r7, #9
 8006200:	d97c      	bls.n	80062fc <_strtod_l+0x294>
 8006202:	961b      	str	r6, [sp, #108]	; 0x6c
 8006204:	f04f 0e00 	mov.w	lr, #0
 8006208:	e09a      	b.n	8006340 <_strtod_l+0x2d8>
 800620a:	2300      	movs	r3, #0
 800620c:	e7c7      	b.n	800619e <_strtod_l+0x136>
 800620e:	9905      	ldr	r1, [sp, #20]
 8006210:	2908      	cmp	r1, #8
 8006212:	bfdd      	ittte	le
 8006214:	9907      	ldrle	r1, [sp, #28]
 8006216:	fb02 3301 	mlale	r3, r2, r1, r3
 800621a:	9307      	strle	r3, [sp, #28]
 800621c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006220:	9b05      	ldr	r3, [sp, #20]
 8006222:	3001      	adds	r0, #1
 8006224:	3301      	adds	r3, #1
 8006226:	9305      	str	r3, [sp, #20]
 8006228:	901b      	str	r0, [sp, #108]	; 0x6c
 800622a:	e7bf      	b.n	80061ac <_strtod_l+0x144>
 800622c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800622e:	191a      	adds	r2, r3, r4
 8006230:	921b      	str	r2, [sp, #108]	; 0x6c
 8006232:	9a05      	ldr	r2, [sp, #20]
 8006234:	5d1b      	ldrb	r3, [r3, r4]
 8006236:	2a00      	cmp	r2, #0
 8006238:	d037      	beq.n	80062aa <_strtod_l+0x242>
 800623a:	9c05      	ldr	r4, [sp, #20]
 800623c:	4602      	mov	r2, r0
 800623e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8006242:	2909      	cmp	r1, #9
 8006244:	d913      	bls.n	800626e <_strtod_l+0x206>
 8006246:	2101      	movs	r1, #1
 8006248:	9104      	str	r1, [sp, #16]
 800624a:	e7c2      	b.n	80061d2 <_strtod_l+0x16a>
 800624c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800624e:	1c5a      	adds	r2, r3, #1
 8006250:	921b      	str	r2, [sp, #108]	; 0x6c
 8006252:	785b      	ldrb	r3, [r3, #1]
 8006254:	3001      	adds	r0, #1
 8006256:	2b30      	cmp	r3, #48	; 0x30
 8006258:	d0f8      	beq.n	800624c <_strtod_l+0x1e4>
 800625a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800625e:	2a08      	cmp	r2, #8
 8006260:	f200 84e4 	bhi.w	8006c2c <_strtod_l+0xbc4>
 8006264:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8006266:	9208      	str	r2, [sp, #32]
 8006268:	4602      	mov	r2, r0
 800626a:	2000      	movs	r0, #0
 800626c:	4604      	mov	r4, r0
 800626e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8006272:	f100 0101 	add.w	r1, r0, #1
 8006276:	d012      	beq.n	800629e <_strtod_l+0x236>
 8006278:	440a      	add	r2, r1
 800627a:	eb00 0c04 	add.w	ip, r0, r4
 800627e:	4621      	mov	r1, r4
 8006280:	270a      	movs	r7, #10
 8006282:	458c      	cmp	ip, r1
 8006284:	d113      	bne.n	80062ae <_strtod_l+0x246>
 8006286:	1821      	adds	r1, r4, r0
 8006288:	2908      	cmp	r1, #8
 800628a:	f104 0401 	add.w	r4, r4, #1
 800628e:	4404      	add	r4, r0
 8006290:	dc19      	bgt.n	80062c6 <_strtod_l+0x25e>
 8006292:	9b07      	ldr	r3, [sp, #28]
 8006294:	210a      	movs	r1, #10
 8006296:	fb01 e303 	mla	r3, r1, r3, lr
 800629a:	9307      	str	r3, [sp, #28]
 800629c:	2100      	movs	r1, #0
 800629e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062a0:	1c58      	adds	r0, r3, #1
 80062a2:	901b      	str	r0, [sp, #108]	; 0x6c
 80062a4:	785b      	ldrb	r3, [r3, #1]
 80062a6:	4608      	mov	r0, r1
 80062a8:	e7c9      	b.n	800623e <_strtod_l+0x1d6>
 80062aa:	9805      	ldr	r0, [sp, #20]
 80062ac:	e7d3      	b.n	8006256 <_strtod_l+0x1ee>
 80062ae:	2908      	cmp	r1, #8
 80062b0:	f101 0101 	add.w	r1, r1, #1
 80062b4:	dc03      	bgt.n	80062be <_strtod_l+0x256>
 80062b6:	9b07      	ldr	r3, [sp, #28]
 80062b8:	437b      	muls	r3, r7
 80062ba:	9307      	str	r3, [sp, #28]
 80062bc:	e7e1      	b.n	8006282 <_strtod_l+0x21a>
 80062be:	2910      	cmp	r1, #16
 80062c0:	bfd8      	it	le
 80062c2:	437d      	mulle	r5, r7
 80062c4:	e7dd      	b.n	8006282 <_strtod_l+0x21a>
 80062c6:	2c10      	cmp	r4, #16
 80062c8:	bfdc      	itt	le
 80062ca:	210a      	movle	r1, #10
 80062cc:	fb01 e505 	mlale	r5, r1, r5, lr
 80062d0:	e7e4      	b.n	800629c <_strtod_l+0x234>
 80062d2:	2301      	movs	r3, #1
 80062d4:	9304      	str	r3, [sp, #16]
 80062d6:	e781      	b.n	80061dc <_strtod_l+0x174>
 80062d8:	f04f 0c01 	mov.w	ip, #1
 80062dc:	1cb3      	adds	r3, r6, #2
 80062de:	931b      	str	r3, [sp, #108]	; 0x6c
 80062e0:	78b3      	ldrb	r3, [r6, #2]
 80062e2:	e78a      	b.n	80061fa <_strtod_l+0x192>
 80062e4:	f04f 0c00 	mov.w	ip, #0
 80062e8:	e7f8      	b.n	80062dc <_strtod_l+0x274>
 80062ea:	bf00      	nop
 80062ec:	08009824 	.word	0x08009824
 80062f0:	7ff00000 	.word	0x7ff00000
 80062f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062f6:	1c5f      	adds	r7, r3, #1
 80062f8:	971b      	str	r7, [sp, #108]	; 0x6c
 80062fa:	785b      	ldrb	r3, [r3, #1]
 80062fc:	2b30      	cmp	r3, #48	; 0x30
 80062fe:	d0f9      	beq.n	80062f4 <_strtod_l+0x28c>
 8006300:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006304:	2f08      	cmp	r7, #8
 8006306:	f63f af7d 	bhi.w	8006204 <_strtod_l+0x19c>
 800630a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800630e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006310:	930a      	str	r3, [sp, #40]	; 0x28
 8006312:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006314:	1c5f      	adds	r7, r3, #1
 8006316:	971b      	str	r7, [sp, #108]	; 0x6c
 8006318:	785b      	ldrb	r3, [r3, #1]
 800631a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800631e:	f1b8 0f09 	cmp.w	r8, #9
 8006322:	d937      	bls.n	8006394 <_strtod_l+0x32c>
 8006324:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006326:	1a7f      	subs	r7, r7, r1
 8006328:	2f08      	cmp	r7, #8
 800632a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800632e:	dc37      	bgt.n	80063a0 <_strtod_l+0x338>
 8006330:	45be      	cmp	lr, r7
 8006332:	bfa8      	it	ge
 8006334:	46be      	movge	lr, r7
 8006336:	f1bc 0f00 	cmp.w	ip, #0
 800633a:	d001      	beq.n	8006340 <_strtod_l+0x2d8>
 800633c:	f1ce 0e00 	rsb	lr, lr, #0
 8006340:	2c00      	cmp	r4, #0
 8006342:	d151      	bne.n	80063e8 <_strtod_l+0x380>
 8006344:	2800      	cmp	r0, #0
 8006346:	f47f aece 	bne.w	80060e6 <_strtod_l+0x7e>
 800634a:	9a06      	ldr	r2, [sp, #24]
 800634c:	2a00      	cmp	r2, #0
 800634e:	f47f aeca 	bne.w	80060e6 <_strtod_l+0x7e>
 8006352:	9a04      	ldr	r2, [sp, #16]
 8006354:	2a00      	cmp	r2, #0
 8006356:	f47f aee4 	bne.w	8006122 <_strtod_l+0xba>
 800635a:	2b4e      	cmp	r3, #78	; 0x4e
 800635c:	d027      	beq.n	80063ae <_strtod_l+0x346>
 800635e:	dc21      	bgt.n	80063a4 <_strtod_l+0x33c>
 8006360:	2b49      	cmp	r3, #73	; 0x49
 8006362:	f47f aede 	bne.w	8006122 <_strtod_l+0xba>
 8006366:	49a0      	ldr	r1, [pc, #640]	; (80065e8 <_strtod_l+0x580>)
 8006368:	a81b      	add	r0, sp, #108	; 0x6c
 800636a:	f002 f811 	bl	8008390 <__match>
 800636e:	2800      	cmp	r0, #0
 8006370:	f43f aed7 	beq.w	8006122 <_strtod_l+0xba>
 8006374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006376:	499d      	ldr	r1, [pc, #628]	; (80065ec <_strtod_l+0x584>)
 8006378:	3b01      	subs	r3, #1
 800637a:	a81b      	add	r0, sp, #108	; 0x6c
 800637c:	931b      	str	r3, [sp, #108]	; 0x6c
 800637e:	f002 f807 	bl	8008390 <__match>
 8006382:	b910      	cbnz	r0, 800638a <_strtod_l+0x322>
 8006384:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006386:	3301      	adds	r3, #1
 8006388:	931b      	str	r3, [sp, #108]	; 0x6c
 800638a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8006600 <_strtod_l+0x598>
 800638e:	f04f 0a00 	mov.w	sl, #0
 8006392:	e6a8      	b.n	80060e6 <_strtod_l+0x7e>
 8006394:	210a      	movs	r1, #10
 8006396:	fb01 3e0e 	mla	lr, r1, lr, r3
 800639a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800639e:	e7b8      	b.n	8006312 <_strtod_l+0x2aa>
 80063a0:	46be      	mov	lr, r7
 80063a2:	e7c8      	b.n	8006336 <_strtod_l+0x2ce>
 80063a4:	2b69      	cmp	r3, #105	; 0x69
 80063a6:	d0de      	beq.n	8006366 <_strtod_l+0x2fe>
 80063a8:	2b6e      	cmp	r3, #110	; 0x6e
 80063aa:	f47f aeba 	bne.w	8006122 <_strtod_l+0xba>
 80063ae:	4990      	ldr	r1, [pc, #576]	; (80065f0 <_strtod_l+0x588>)
 80063b0:	a81b      	add	r0, sp, #108	; 0x6c
 80063b2:	f001 ffed 	bl	8008390 <__match>
 80063b6:	2800      	cmp	r0, #0
 80063b8:	f43f aeb3 	beq.w	8006122 <_strtod_l+0xba>
 80063bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b28      	cmp	r3, #40	; 0x28
 80063c2:	d10e      	bne.n	80063e2 <_strtod_l+0x37a>
 80063c4:	aa1e      	add	r2, sp, #120	; 0x78
 80063c6:	498b      	ldr	r1, [pc, #556]	; (80065f4 <_strtod_l+0x58c>)
 80063c8:	a81b      	add	r0, sp, #108	; 0x6c
 80063ca:	f001 fff5 	bl	80083b8 <__hexnan>
 80063ce:	2805      	cmp	r0, #5
 80063d0:	d107      	bne.n	80063e2 <_strtod_l+0x37a>
 80063d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80063d4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80063d8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80063dc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80063e0:	e681      	b.n	80060e6 <_strtod_l+0x7e>
 80063e2:	f8df b224 	ldr.w	fp, [pc, #548]	; 8006608 <_strtod_l+0x5a0>
 80063e6:	e7d2      	b.n	800638e <_strtod_l+0x326>
 80063e8:	ebae 0302 	sub.w	r3, lr, r2
 80063ec:	9306      	str	r3, [sp, #24]
 80063ee:	9b05      	ldr	r3, [sp, #20]
 80063f0:	9807      	ldr	r0, [sp, #28]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bf08      	it	eq
 80063f6:	4623      	moveq	r3, r4
 80063f8:	2c10      	cmp	r4, #16
 80063fa:	9305      	str	r3, [sp, #20]
 80063fc:	46a0      	mov	r8, r4
 80063fe:	bfa8      	it	ge
 8006400:	f04f 0810 	movge.w	r8, #16
 8006404:	f7fa f87e 	bl	8000504 <__aeabi_ui2d>
 8006408:	2c09      	cmp	r4, #9
 800640a:	4682      	mov	sl, r0
 800640c:	468b      	mov	fp, r1
 800640e:	dc13      	bgt.n	8006438 <_strtod_l+0x3d0>
 8006410:	9b06      	ldr	r3, [sp, #24]
 8006412:	2b00      	cmp	r3, #0
 8006414:	f43f ae67 	beq.w	80060e6 <_strtod_l+0x7e>
 8006418:	9b06      	ldr	r3, [sp, #24]
 800641a:	dd7a      	ble.n	8006512 <_strtod_l+0x4aa>
 800641c:	2b16      	cmp	r3, #22
 800641e:	dc61      	bgt.n	80064e4 <_strtod_l+0x47c>
 8006420:	4a75      	ldr	r2, [pc, #468]	; (80065f8 <_strtod_l+0x590>)
 8006422:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006426:	e9de 0100 	ldrd	r0, r1, [lr]
 800642a:	4652      	mov	r2, sl
 800642c:	465b      	mov	r3, fp
 800642e:	f7fa f8e3 	bl	80005f8 <__aeabi_dmul>
 8006432:	4682      	mov	sl, r0
 8006434:	468b      	mov	fp, r1
 8006436:	e656      	b.n	80060e6 <_strtod_l+0x7e>
 8006438:	4b6f      	ldr	r3, [pc, #444]	; (80065f8 <_strtod_l+0x590>)
 800643a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800643e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006442:	f7fa f8d9 	bl	80005f8 <__aeabi_dmul>
 8006446:	4606      	mov	r6, r0
 8006448:	4628      	mov	r0, r5
 800644a:	460f      	mov	r7, r1
 800644c:	f7fa f85a 	bl	8000504 <__aeabi_ui2d>
 8006450:	4602      	mov	r2, r0
 8006452:	460b      	mov	r3, r1
 8006454:	4630      	mov	r0, r6
 8006456:	4639      	mov	r1, r7
 8006458:	f7f9 ff18 	bl	800028c <__adddf3>
 800645c:	2c0f      	cmp	r4, #15
 800645e:	4682      	mov	sl, r0
 8006460:	468b      	mov	fp, r1
 8006462:	ddd5      	ble.n	8006410 <_strtod_l+0x3a8>
 8006464:	9b06      	ldr	r3, [sp, #24]
 8006466:	eba4 0808 	sub.w	r8, r4, r8
 800646a:	4498      	add	r8, r3
 800646c:	f1b8 0f00 	cmp.w	r8, #0
 8006470:	f340 8096 	ble.w	80065a0 <_strtod_l+0x538>
 8006474:	f018 030f 	ands.w	r3, r8, #15
 8006478:	d00a      	beq.n	8006490 <_strtod_l+0x428>
 800647a:	495f      	ldr	r1, [pc, #380]	; (80065f8 <_strtod_l+0x590>)
 800647c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006480:	4652      	mov	r2, sl
 8006482:	465b      	mov	r3, fp
 8006484:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006488:	f7fa f8b6 	bl	80005f8 <__aeabi_dmul>
 800648c:	4682      	mov	sl, r0
 800648e:	468b      	mov	fp, r1
 8006490:	f038 080f 	bics.w	r8, r8, #15
 8006494:	d073      	beq.n	800657e <_strtod_l+0x516>
 8006496:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800649a:	dd47      	ble.n	800652c <_strtod_l+0x4c4>
 800649c:	2400      	movs	r4, #0
 800649e:	46a0      	mov	r8, r4
 80064a0:	9407      	str	r4, [sp, #28]
 80064a2:	9405      	str	r4, [sp, #20]
 80064a4:	2322      	movs	r3, #34	; 0x22
 80064a6:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006600 <_strtod_l+0x598>
 80064aa:	f8c9 3000 	str.w	r3, [r9]
 80064ae:	f04f 0a00 	mov.w	sl, #0
 80064b2:	9b07      	ldr	r3, [sp, #28]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f43f ae16 	beq.w	80060e6 <_strtod_l+0x7e>
 80064ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80064bc:	4648      	mov	r0, r9
 80064be:	f002 f8dc 	bl	800867a <_Bfree>
 80064c2:	9905      	ldr	r1, [sp, #20]
 80064c4:	4648      	mov	r0, r9
 80064c6:	f002 f8d8 	bl	800867a <_Bfree>
 80064ca:	4641      	mov	r1, r8
 80064cc:	4648      	mov	r0, r9
 80064ce:	f002 f8d4 	bl	800867a <_Bfree>
 80064d2:	9907      	ldr	r1, [sp, #28]
 80064d4:	4648      	mov	r0, r9
 80064d6:	f002 f8d0 	bl	800867a <_Bfree>
 80064da:	4621      	mov	r1, r4
 80064dc:	4648      	mov	r0, r9
 80064de:	f002 f8cc 	bl	800867a <_Bfree>
 80064e2:	e600      	b.n	80060e6 <_strtod_l+0x7e>
 80064e4:	9a06      	ldr	r2, [sp, #24]
 80064e6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80064ea:	4293      	cmp	r3, r2
 80064ec:	dbba      	blt.n	8006464 <_strtod_l+0x3fc>
 80064ee:	4d42      	ldr	r5, [pc, #264]	; (80065f8 <_strtod_l+0x590>)
 80064f0:	f1c4 040f 	rsb	r4, r4, #15
 80064f4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80064f8:	4652      	mov	r2, sl
 80064fa:	465b      	mov	r3, fp
 80064fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006500:	f7fa f87a 	bl	80005f8 <__aeabi_dmul>
 8006504:	9b06      	ldr	r3, [sp, #24]
 8006506:	1b1c      	subs	r4, r3, r4
 8006508:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800650c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006510:	e78d      	b.n	800642e <_strtod_l+0x3c6>
 8006512:	f113 0f16 	cmn.w	r3, #22
 8006516:	dba5      	blt.n	8006464 <_strtod_l+0x3fc>
 8006518:	4a37      	ldr	r2, [pc, #220]	; (80065f8 <_strtod_l+0x590>)
 800651a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800651e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006522:	4650      	mov	r0, sl
 8006524:	4659      	mov	r1, fp
 8006526:	f7fa f991 	bl	800084c <__aeabi_ddiv>
 800652a:	e782      	b.n	8006432 <_strtod_l+0x3ca>
 800652c:	2300      	movs	r3, #0
 800652e:	4e33      	ldr	r6, [pc, #204]	; (80065fc <_strtod_l+0x594>)
 8006530:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006534:	4650      	mov	r0, sl
 8006536:	4659      	mov	r1, fp
 8006538:	461d      	mov	r5, r3
 800653a:	f1b8 0f01 	cmp.w	r8, #1
 800653e:	dc21      	bgt.n	8006584 <_strtod_l+0x51c>
 8006540:	b10b      	cbz	r3, 8006546 <_strtod_l+0x4de>
 8006542:	4682      	mov	sl, r0
 8006544:	468b      	mov	fp, r1
 8006546:	4b2d      	ldr	r3, [pc, #180]	; (80065fc <_strtod_l+0x594>)
 8006548:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800654c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006550:	4652      	mov	r2, sl
 8006552:	465b      	mov	r3, fp
 8006554:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006558:	f7fa f84e 	bl	80005f8 <__aeabi_dmul>
 800655c:	4b28      	ldr	r3, [pc, #160]	; (8006600 <_strtod_l+0x598>)
 800655e:	460a      	mov	r2, r1
 8006560:	400b      	ands	r3, r1
 8006562:	4928      	ldr	r1, [pc, #160]	; (8006604 <_strtod_l+0x59c>)
 8006564:	428b      	cmp	r3, r1
 8006566:	4682      	mov	sl, r0
 8006568:	d898      	bhi.n	800649c <_strtod_l+0x434>
 800656a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800656e:	428b      	cmp	r3, r1
 8006570:	bf86      	itte	hi
 8006572:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800660c <_strtod_l+0x5a4>
 8006576:	f04f 3aff 	movhi.w	sl, #4294967295
 800657a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800657e:	2300      	movs	r3, #0
 8006580:	9304      	str	r3, [sp, #16]
 8006582:	e077      	b.n	8006674 <_strtod_l+0x60c>
 8006584:	f018 0f01 	tst.w	r8, #1
 8006588:	d006      	beq.n	8006598 <_strtod_l+0x530>
 800658a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006592:	f7fa f831 	bl	80005f8 <__aeabi_dmul>
 8006596:	2301      	movs	r3, #1
 8006598:	3501      	adds	r5, #1
 800659a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800659e:	e7cc      	b.n	800653a <_strtod_l+0x4d2>
 80065a0:	d0ed      	beq.n	800657e <_strtod_l+0x516>
 80065a2:	f1c8 0800 	rsb	r8, r8, #0
 80065a6:	f018 020f 	ands.w	r2, r8, #15
 80065aa:	d00a      	beq.n	80065c2 <_strtod_l+0x55a>
 80065ac:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <_strtod_l+0x590>)
 80065ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065b2:	4650      	mov	r0, sl
 80065b4:	4659      	mov	r1, fp
 80065b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ba:	f7fa f947 	bl	800084c <__aeabi_ddiv>
 80065be:	4682      	mov	sl, r0
 80065c0:	468b      	mov	fp, r1
 80065c2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80065c6:	d0da      	beq.n	800657e <_strtod_l+0x516>
 80065c8:	f1b8 0f1f 	cmp.w	r8, #31
 80065cc:	dd20      	ble.n	8006610 <_strtod_l+0x5a8>
 80065ce:	2400      	movs	r4, #0
 80065d0:	46a0      	mov	r8, r4
 80065d2:	9407      	str	r4, [sp, #28]
 80065d4:	9405      	str	r4, [sp, #20]
 80065d6:	2322      	movs	r3, #34	; 0x22
 80065d8:	f04f 0a00 	mov.w	sl, #0
 80065dc:	f04f 0b00 	mov.w	fp, #0
 80065e0:	f8c9 3000 	str.w	r3, [r9]
 80065e4:	e765      	b.n	80064b2 <_strtod_l+0x44a>
 80065e6:	bf00      	nop
 80065e8:	080097ed 	.word	0x080097ed
 80065ec:	0800987b 	.word	0x0800987b
 80065f0:	080097f5 	.word	0x080097f5
 80065f4:	08009838 	.word	0x08009838
 80065f8:	08009920 	.word	0x08009920
 80065fc:	080098f8 	.word	0x080098f8
 8006600:	7ff00000 	.word	0x7ff00000
 8006604:	7ca00000 	.word	0x7ca00000
 8006608:	fff80000 	.word	0xfff80000
 800660c:	7fefffff 	.word	0x7fefffff
 8006610:	f018 0310 	ands.w	r3, r8, #16
 8006614:	bf18      	it	ne
 8006616:	236a      	movne	r3, #106	; 0x6a
 8006618:	4da0      	ldr	r5, [pc, #640]	; (800689c <_strtod_l+0x834>)
 800661a:	9304      	str	r3, [sp, #16]
 800661c:	4650      	mov	r0, sl
 800661e:	4659      	mov	r1, fp
 8006620:	2300      	movs	r3, #0
 8006622:	f1b8 0f00 	cmp.w	r8, #0
 8006626:	f300 810a 	bgt.w	800683e <_strtod_l+0x7d6>
 800662a:	b10b      	cbz	r3, 8006630 <_strtod_l+0x5c8>
 800662c:	4682      	mov	sl, r0
 800662e:	468b      	mov	fp, r1
 8006630:	9b04      	ldr	r3, [sp, #16]
 8006632:	b1bb      	cbz	r3, 8006664 <_strtod_l+0x5fc>
 8006634:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006638:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800663c:	2b00      	cmp	r3, #0
 800663e:	4659      	mov	r1, fp
 8006640:	dd10      	ble.n	8006664 <_strtod_l+0x5fc>
 8006642:	2b1f      	cmp	r3, #31
 8006644:	f340 8107 	ble.w	8006856 <_strtod_l+0x7ee>
 8006648:	2b34      	cmp	r3, #52	; 0x34
 800664a:	bfde      	ittt	le
 800664c:	3b20      	suble	r3, #32
 800664e:	f04f 32ff 	movle.w	r2, #4294967295
 8006652:	fa02 f303 	lslle.w	r3, r2, r3
 8006656:	f04f 0a00 	mov.w	sl, #0
 800665a:	bfcc      	ite	gt
 800665c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006660:	ea03 0b01 	andle.w	fp, r3, r1
 8006664:	2200      	movs	r2, #0
 8006666:	2300      	movs	r3, #0
 8006668:	4650      	mov	r0, sl
 800666a:	4659      	mov	r1, fp
 800666c:	f7fa fa2c 	bl	8000ac8 <__aeabi_dcmpeq>
 8006670:	2800      	cmp	r0, #0
 8006672:	d1ac      	bne.n	80065ce <_strtod_l+0x566>
 8006674:	9b07      	ldr	r3, [sp, #28]
 8006676:	9300      	str	r3, [sp, #0]
 8006678:	9a05      	ldr	r2, [sp, #20]
 800667a:	9908      	ldr	r1, [sp, #32]
 800667c:	4623      	mov	r3, r4
 800667e:	4648      	mov	r0, r9
 8006680:	f002 f84d 	bl	800871e <__s2b>
 8006684:	9007      	str	r0, [sp, #28]
 8006686:	2800      	cmp	r0, #0
 8006688:	f43f af08 	beq.w	800649c <_strtod_l+0x434>
 800668c:	9a06      	ldr	r2, [sp, #24]
 800668e:	9b06      	ldr	r3, [sp, #24]
 8006690:	2a00      	cmp	r2, #0
 8006692:	f1c3 0300 	rsb	r3, r3, #0
 8006696:	bfa8      	it	ge
 8006698:	2300      	movge	r3, #0
 800669a:	930e      	str	r3, [sp, #56]	; 0x38
 800669c:	2400      	movs	r4, #0
 800669e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80066a2:	9316      	str	r3, [sp, #88]	; 0x58
 80066a4:	46a0      	mov	r8, r4
 80066a6:	9b07      	ldr	r3, [sp, #28]
 80066a8:	4648      	mov	r0, r9
 80066aa:	6859      	ldr	r1, [r3, #4]
 80066ac:	f001 ffb1 	bl	8008612 <_Balloc>
 80066b0:	9005      	str	r0, [sp, #20]
 80066b2:	2800      	cmp	r0, #0
 80066b4:	f43f aef6 	beq.w	80064a4 <_strtod_l+0x43c>
 80066b8:	9b07      	ldr	r3, [sp, #28]
 80066ba:	691a      	ldr	r2, [r3, #16]
 80066bc:	3202      	adds	r2, #2
 80066be:	f103 010c 	add.w	r1, r3, #12
 80066c2:	0092      	lsls	r2, r2, #2
 80066c4:	300c      	adds	r0, #12
 80066c6:	f001 ff99 	bl	80085fc <memcpy>
 80066ca:	aa1e      	add	r2, sp, #120	; 0x78
 80066cc:	a91d      	add	r1, sp, #116	; 0x74
 80066ce:	ec4b ab10 	vmov	d0, sl, fp
 80066d2:	4648      	mov	r0, r9
 80066d4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80066d8:	f002 fadc 	bl	8008c94 <__d2b>
 80066dc:	901c      	str	r0, [sp, #112]	; 0x70
 80066de:	2800      	cmp	r0, #0
 80066e0:	f43f aee0 	beq.w	80064a4 <_strtod_l+0x43c>
 80066e4:	2101      	movs	r1, #1
 80066e6:	4648      	mov	r0, r9
 80066e8:	f002 f8a5 	bl	8008836 <__i2b>
 80066ec:	4680      	mov	r8, r0
 80066ee:	2800      	cmp	r0, #0
 80066f0:	f43f aed8 	beq.w	80064a4 <_strtod_l+0x43c>
 80066f4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80066f6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80066f8:	2e00      	cmp	r6, #0
 80066fa:	bfab      	itete	ge
 80066fc:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80066fe:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006700:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006702:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8006704:	bfac      	ite	ge
 8006706:	18f7      	addge	r7, r6, r3
 8006708:	1b9d      	sublt	r5, r3, r6
 800670a:	9b04      	ldr	r3, [sp, #16]
 800670c:	1af6      	subs	r6, r6, r3
 800670e:	4416      	add	r6, r2
 8006710:	4b63      	ldr	r3, [pc, #396]	; (80068a0 <_strtod_l+0x838>)
 8006712:	3e01      	subs	r6, #1
 8006714:	429e      	cmp	r6, r3
 8006716:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800671a:	f280 80af 	bge.w	800687c <_strtod_l+0x814>
 800671e:	1b9b      	subs	r3, r3, r6
 8006720:	2b1f      	cmp	r3, #31
 8006722:	eba2 0203 	sub.w	r2, r2, r3
 8006726:	f04f 0101 	mov.w	r1, #1
 800672a:	f300 809b 	bgt.w	8006864 <_strtod_l+0x7fc>
 800672e:	fa01 f303 	lsl.w	r3, r1, r3
 8006732:	930f      	str	r3, [sp, #60]	; 0x3c
 8006734:	2300      	movs	r3, #0
 8006736:	930a      	str	r3, [sp, #40]	; 0x28
 8006738:	18be      	adds	r6, r7, r2
 800673a:	9b04      	ldr	r3, [sp, #16]
 800673c:	42b7      	cmp	r7, r6
 800673e:	4415      	add	r5, r2
 8006740:	441d      	add	r5, r3
 8006742:	463b      	mov	r3, r7
 8006744:	bfa8      	it	ge
 8006746:	4633      	movge	r3, r6
 8006748:	42ab      	cmp	r3, r5
 800674a:	bfa8      	it	ge
 800674c:	462b      	movge	r3, r5
 800674e:	2b00      	cmp	r3, #0
 8006750:	bfc2      	ittt	gt
 8006752:	1af6      	subgt	r6, r6, r3
 8006754:	1aed      	subgt	r5, r5, r3
 8006756:	1aff      	subgt	r7, r7, r3
 8006758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800675a:	b1bb      	cbz	r3, 800678c <_strtod_l+0x724>
 800675c:	4641      	mov	r1, r8
 800675e:	461a      	mov	r2, r3
 8006760:	4648      	mov	r0, r9
 8006762:	f002 f907 	bl	8008974 <__pow5mult>
 8006766:	4680      	mov	r8, r0
 8006768:	2800      	cmp	r0, #0
 800676a:	f43f ae9b 	beq.w	80064a4 <_strtod_l+0x43c>
 800676e:	4601      	mov	r1, r0
 8006770:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006772:	4648      	mov	r0, r9
 8006774:	f002 f868 	bl	8008848 <__multiply>
 8006778:	900c      	str	r0, [sp, #48]	; 0x30
 800677a:	2800      	cmp	r0, #0
 800677c:	f43f ae92 	beq.w	80064a4 <_strtod_l+0x43c>
 8006780:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006782:	4648      	mov	r0, r9
 8006784:	f001 ff79 	bl	800867a <_Bfree>
 8006788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800678a:	931c      	str	r3, [sp, #112]	; 0x70
 800678c:	2e00      	cmp	r6, #0
 800678e:	dc7a      	bgt.n	8006886 <_strtod_l+0x81e>
 8006790:	9b06      	ldr	r3, [sp, #24]
 8006792:	2b00      	cmp	r3, #0
 8006794:	dd08      	ble.n	80067a8 <_strtod_l+0x740>
 8006796:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006798:	9905      	ldr	r1, [sp, #20]
 800679a:	4648      	mov	r0, r9
 800679c:	f002 f8ea 	bl	8008974 <__pow5mult>
 80067a0:	9005      	str	r0, [sp, #20]
 80067a2:	2800      	cmp	r0, #0
 80067a4:	f43f ae7e 	beq.w	80064a4 <_strtod_l+0x43c>
 80067a8:	2d00      	cmp	r5, #0
 80067aa:	dd08      	ble.n	80067be <_strtod_l+0x756>
 80067ac:	462a      	mov	r2, r5
 80067ae:	9905      	ldr	r1, [sp, #20]
 80067b0:	4648      	mov	r0, r9
 80067b2:	f002 f92d 	bl	8008a10 <__lshift>
 80067b6:	9005      	str	r0, [sp, #20]
 80067b8:	2800      	cmp	r0, #0
 80067ba:	f43f ae73 	beq.w	80064a4 <_strtod_l+0x43c>
 80067be:	2f00      	cmp	r7, #0
 80067c0:	dd08      	ble.n	80067d4 <_strtod_l+0x76c>
 80067c2:	4641      	mov	r1, r8
 80067c4:	463a      	mov	r2, r7
 80067c6:	4648      	mov	r0, r9
 80067c8:	f002 f922 	bl	8008a10 <__lshift>
 80067cc:	4680      	mov	r8, r0
 80067ce:	2800      	cmp	r0, #0
 80067d0:	f43f ae68 	beq.w	80064a4 <_strtod_l+0x43c>
 80067d4:	9a05      	ldr	r2, [sp, #20]
 80067d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80067d8:	4648      	mov	r0, r9
 80067da:	f002 f987 	bl	8008aec <__mdiff>
 80067de:	4604      	mov	r4, r0
 80067e0:	2800      	cmp	r0, #0
 80067e2:	f43f ae5f 	beq.w	80064a4 <_strtod_l+0x43c>
 80067e6:	68c3      	ldr	r3, [r0, #12]
 80067e8:	930c      	str	r3, [sp, #48]	; 0x30
 80067ea:	2300      	movs	r3, #0
 80067ec:	60c3      	str	r3, [r0, #12]
 80067ee:	4641      	mov	r1, r8
 80067f0:	f002 f962 	bl	8008ab8 <__mcmp>
 80067f4:	2800      	cmp	r0, #0
 80067f6:	da55      	bge.n	80068a4 <_strtod_l+0x83c>
 80067f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067fa:	b9e3      	cbnz	r3, 8006836 <_strtod_l+0x7ce>
 80067fc:	f1ba 0f00 	cmp.w	sl, #0
 8006800:	d119      	bne.n	8006836 <_strtod_l+0x7ce>
 8006802:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006806:	b9b3      	cbnz	r3, 8006836 <_strtod_l+0x7ce>
 8006808:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800680c:	0d1b      	lsrs	r3, r3, #20
 800680e:	051b      	lsls	r3, r3, #20
 8006810:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006814:	d90f      	bls.n	8006836 <_strtod_l+0x7ce>
 8006816:	6963      	ldr	r3, [r4, #20]
 8006818:	b913      	cbnz	r3, 8006820 <_strtod_l+0x7b8>
 800681a:	6923      	ldr	r3, [r4, #16]
 800681c:	2b01      	cmp	r3, #1
 800681e:	dd0a      	ble.n	8006836 <_strtod_l+0x7ce>
 8006820:	4621      	mov	r1, r4
 8006822:	2201      	movs	r2, #1
 8006824:	4648      	mov	r0, r9
 8006826:	f002 f8f3 	bl	8008a10 <__lshift>
 800682a:	4641      	mov	r1, r8
 800682c:	4604      	mov	r4, r0
 800682e:	f002 f943 	bl	8008ab8 <__mcmp>
 8006832:	2800      	cmp	r0, #0
 8006834:	dc67      	bgt.n	8006906 <_strtod_l+0x89e>
 8006836:	9b04      	ldr	r3, [sp, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d171      	bne.n	8006920 <_strtod_l+0x8b8>
 800683c:	e63d      	b.n	80064ba <_strtod_l+0x452>
 800683e:	f018 0f01 	tst.w	r8, #1
 8006842:	d004      	beq.n	800684e <_strtod_l+0x7e6>
 8006844:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006848:	f7f9 fed6 	bl	80005f8 <__aeabi_dmul>
 800684c:	2301      	movs	r3, #1
 800684e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006852:	3508      	adds	r5, #8
 8006854:	e6e5      	b.n	8006622 <_strtod_l+0x5ba>
 8006856:	f04f 32ff 	mov.w	r2, #4294967295
 800685a:	fa02 f303 	lsl.w	r3, r2, r3
 800685e:	ea03 0a0a 	and.w	sl, r3, sl
 8006862:	e6ff      	b.n	8006664 <_strtod_l+0x5fc>
 8006864:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006868:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800686c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006870:	36e2      	adds	r6, #226	; 0xe2
 8006872:	fa01 f306 	lsl.w	r3, r1, r6
 8006876:	930a      	str	r3, [sp, #40]	; 0x28
 8006878:	910f      	str	r1, [sp, #60]	; 0x3c
 800687a:	e75d      	b.n	8006738 <_strtod_l+0x6d0>
 800687c:	2300      	movs	r3, #0
 800687e:	930a      	str	r3, [sp, #40]	; 0x28
 8006880:	2301      	movs	r3, #1
 8006882:	930f      	str	r3, [sp, #60]	; 0x3c
 8006884:	e758      	b.n	8006738 <_strtod_l+0x6d0>
 8006886:	4632      	mov	r2, r6
 8006888:	991c      	ldr	r1, [sp, #112]	; 0x70
 800688a:	4648      	mov	r0, r9
 800688c:	f002 f8c0 	bl	8008a10 <__lshift>
 8006890:	901c      	str	r0, [sp, #112]	; 0x70
 8006892:	2800      	cmp	r0, #0
 8006894:	f47f af7c 	bne.w	8006790 <_strtod_l+0x728>
 8006898:	e604      	b.n	80064a4 <_strtod_l+0x43c>
 800689a:	bf00      	nop
 800689c:	08009850 	.word	0x08009850
 80068a0:	fffffc02 	.word	0xfffffc02
 80068a4:	465d      	mov	r5, fp
 80068a6:	f040 8086 	bne.w	80069b6 <_strtod_l+0x94e>
 80068aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80068b0:	b32a      	cbz	r2, 80068fe <_strtod_l+0x896>
 80068b2:	4aaf      	ldr	r2, [pc, #700]	; (8006b70 <_strtod_l+0xb08>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d153      	bne.n	8006960 <_strtod_l+0x8f8>
 80068b8:	9b04      	ldr	r3, [sp, #16]
 80068ba:	4650      	mov	r0, sl
 80068bc:	b1d3      	cbz	r3, 80068f4 <_strtod_l+0x88c>
 80068be:	4aad      	ldr	r2, [pc, #692]	; (8006b74 <_strtod_l+0xb0c>)
 80068c0:	402a      	ands	r2, r5
 80068c2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80068c6:	f04f 31ff 	mov.w	r1, #4294967295
 80068ca:	d816      	bhi.n	80068fa <_strtod_l+0x892>
 80068cc:	0d12      	lsrs	r2, r2, #20
 80068ce:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80068d2:	fa01 f303 	lsl.w	r3, r1, r3
 80068d6:	4298      	cmp	r0, r3
 80068d8:	d142      	bne.n	8006960 <_strtod_l+0x8f8>
 80068da:	4ba7      	ldr	r3, [pc, #668]	; (8006b78 <_strtod_l+0xb10>)
 80068dc:	429d      	cmp	r5, r3
 80068de:	d102      	bne.n	80068e6 <_strtod_l+0x87e>
 80068e0:	3001      	adds	r0, #1
 80068e2:	f43f addf 	beq.w	80064a4 <_strtod_l+0x43c>
 80068e6:	4ba3      	ldr	r3, [pc, #652]	; (8006b74 <_strtod_l+0xb0c>)
 80068e8:	402b      	ands	r3, r5
 80068ea:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80068ee:	f04f 0a00 	mov.w	sl, #0
 80068f2:	e7a0      	b.n	8006836 <_strtod_l+0x7ce>
 80068f4:	f04f 33ff 	mov.w	r3, #4294967295
 80068f8:	e7ed      	b.n	80068d6 <_strtod_l+0x86e>
 80068fa:	460b      	mov	r3, r1
 80068fc:	e7eb      	b.n	80068d6 <_strtod_l+0x86e>
 80068fe:	bb7b      	cbnz	r3, 8006960 <_strtod_l+0x8f8>
 8006900:	f1ba 0f00 	cmp.w	sl, #0
 8006904:	d12c      	bne.n	8006960 <_strtod_l+0x8f8>
 8006906:	9904      	ldr	r1, [sp, #16]
 8006908:	4a9a      	ldr	r2, [pc, #616]	; (8006b74 <_strtod_l+0xb0c>)
 800690a:	465b      	mov	r3, fp
 800690c:	b1f1      	cbz	r1, 800694c <_strtod_l+0x8e4>
 800690e:	ea02 010b 	and.w	r1, r2, fp
 8006912:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006916:	dc19      	bgt.n	800694c <_strtod_l+0x8e4>
 8006918:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800691c:	f77f ae5b 	ble.w	80065d6 <_strtod_l+0x56e>
 8006920:	4a96      	ldr	r2, [pc, #600]	; (8006b7c <_strtod_l+0xb14>)
 8006922:	2300      	movs	r3, #0
 8006924:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8006928:	4650      	mov	r0, sl
 800692a:	4659      	mov	r1, fp
 800692c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006930:	f7f9 fe62 	bl	80005f8 <__aeabi_dmul>
 8006934:	4682      	mov	sl, r0
 8006936:	468b      	mov	fp, r1
 8006938:	2900      	cmp	r1, #0
 800693a:	f47f adbe 	bne.w	80064ba <_strtod_l+0x452>
 800693e:	2800      	cmp	r0, #0
 8006940:	f47f adbb 	bne.w	80064ba <_strtod_l+0x452>
 8006944:	2322      	movs	r3, #34	; 0x22
 8006946:	f8c9 3000 	str.w	r3, [r9]
 800694a:	e5b6      	b.n	80064ba <_strtod_l+0x452>
 800694c:	4013      	ands	r3, r2
 800694e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006952:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006956:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800695a:	f04f 3aff 	mov.w	sl, #4294967295
 800695e:	e76a      	b.n	8006836 <_strtod_l+0x7ce>
 8006960:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006962:	b193      	cbz	r3, 800698a <_strtod_l+0x922>
 8006964:	422b      	tst	r3, r5
 8006966:	f43f af66 	beq.w	8006836 <_strtod_l+0x7ce>
 800696a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800696c:	9a04      	ldr	r2, [sp, #16]
 800696e:	4650      	mov	r0, sl
 8006970:	4659      	mov	r1, fp
 8006972:	b173      	cbz	r3, 8006992 <_strtod_l+0x92a>
 8006974:	f7ff fb5c 	bl	8006030 <sulp>
 8006978:	4602      	mov	r2, r0
 800697a:	460b      	mov	r3, r1
 800697c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006980:	f7f9 fc84 	bl	800028c <__adddf3>
 8006984:	4682      	mov	sl, r0
 8006986:	468b      	mov	fp, r1
 8006988:	e755      	b.n	8006836 <_strtod_l+0x7ce>
 800698a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800698c:	ea13 0f0a 	tst.w	r3, sl
 8006990:	e7e9      	b.n	8006966 <_strtod_l+0x8fe>
 8006992:	f7ff fb4d 	bl	8006030 <sulp>
 8006996:	4602      	mov	r2, r0
 8006998:	460b      	mov	r3, r1
 800699a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800699e:	f7f9 fc73 	bl	8000288 <__aeabi_dsub>
 80069a2:	2200      	movs	r2, #0
 80069a4:	2300      	movs	r3, #0
 80069a6:	4682      	mov	sl, r0
 80069a8:	468b      	mov	fp, r1
 80069aa:	f7fa f88d 	bl	8000ac8 <__aeabi_dcmpeq>
 80069ae:	2800      	cmp	r0, #0
 80069b0:	f47f ae11 	bne.w	80065d6 <_strtod_l+0x56e>
 80069b4:	e73f      	b.n	8006836 <_strtod_l+0x7ce>
 80069b6:	4641      	mov	r1, r8
 80069b8:	4620      	mov	r0, r4
 80069ba:	f002 f9ba 	bl	8008d32 <__ratio>
 80069be:	ec57 6b10 	vmov	r6, r7, d0
 80069c2:	2200      	movs	r2, #0
 80069c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80069c8:	ee10 0a10 	vmov	r0, s0
 80069cc:	4639      	mov	r1, r7
 80069ce:	f7fa f88f 	bl	8000af0 <__aeabi_dcmple>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d077      	beq.n	8006ac6 <_strtod_l+0xa5e>
 80069d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d04a      	beq.n	8006a72 <_strtod_l+0xa0a>
 80069dc:	4b68      	ldr	r3, [pc, #416]	; (8006b80 <_strtod_l+0xb18>)
 80069de:	2200      	movs	r2, #0
 80069e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80069e4:	4f66      	ldr	r7, [pc, #408]	; (8006b80 <_strtod_l+0xb18>)
 80069e6:	2600      	movs	r6, #0
 80069e8:	4b62      	ldr	r3, [pc, #392]	; (8006b74 <_strtod_l+0xb0c>)
 80069ea:	402b      	ands	r3, r5
 80069ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80069ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069f0:	4b64      	ldr	r3, [pc, #400]	; (8006b84 <_strtod_l+0xb1c>)
 80069f2:	429a      	cmp	r2, r3
 80069f4:	f040 80ce 	bne.w	8006b94 <_strtod_l+0xb2c>
 80069f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80069fc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a00:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8006a04:	ec4b ab10 	vmov	d0, sl, fp
 8006a08:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8006a0c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006a10:	f002 f8ca 	bl	8008ba8 <__ulp>
 8006a14:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006a18:	ec53 2b10 	vmov	r2, r3, d0
 8006a1c:	f7f9 fdec 	bl	80005f8 <__aeabi_dmul>
 8006a20:	4652      	mov	r2, sl
 8006a22:	465b      	mov	r3, fp
 8006a24:	f7f9 fc32 	bl	800028c <__adddf3>
 8006a28:	460b      	mov	r3, r1
 8006a2a:	4952      	ldr	r1, [pc, #328]	; (8006b74 <_strtod_l+0xb0c>)
 8006a2c:	4a56      	ldr	r2, [pc, #344]	; (8006b88 <_strtod_l+0xb20>)
 8006a2e:	4019      	ands	r1, r3
 8006a30:	4291      	cmp	r1, r2
 8006a32:	4682      	mov	sl, r0
 8006a34:	d95b      	bls.n	8006aee <_strtod_l+0xa86>
 8006a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a38:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d103      	bne.n	8006a48 <_strtod_l+0x9e0>
 8006a40:	9b08      	ldr	r3, [sp, #32]
 8006a42:	3301      	adds	r3, #1
 8006a44:	f43f ad2e 	beq.w	80064a4 <_strtod_l+0x43c>
 8006a48:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8006b78 <_strtod_l+0xb10>
 8006a4c:	f04f 3aff 	mov.w	sl, #4294967295
 8006a50:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006a52:	4648      	mov	r0, r9
 8006a54:	f001 fe11 	bl	800867a <_Bfree>
 8006a58:	9905      	ldr	r1, [sp, #20]
 8006a5a:	4648      	mov	r0, r9
 8006a5c:	f001 fe0d 	bl	800867a <_Bfree>
 8006a60:	4641      	mov	r1, r8
 8006a62:	4648      	mov	r0, r9
 8006a64:	f001 fe09 	bl	800867a <_Bfree>
 8006a68:	4621      	mov	r1, r4
 8006a6a:	4648      	mov	r0, r9
 8006a6c:	f001 fe05 	bl	800867a <_Bfree>
 8006a70:	e619      	b.n	80066a6 <_strtod_l+0x63e>
 8006a72:	f1ba 0f00 	cmp.w	sl, #0
 8006a76:	d11a      	bne.n	8006aae <_strtod_l+0xa46>
 8006a78:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a7c:	b9eb      	cbnz	r3, 8006aba <_strtod_l+0xa52>
 8006a7e:	2200      	movs	r2, #0
 8006a80:	4b3f      	ldr	r3, [pc, #252]	; (8006b80 <_strtod_l+0xb18>)
 8006a82:	4630      	mov	r0, r6
 8006a84:	4639      	mov	r1, r7
 8006a86:	f7fa f829 	bl	8000adc <__aeabi_dcmplt>
 8006a8a:	b9c8      	cbnz	r0, 8006ac0 <_strtod_l+0xa58>
 8006a8c:	4630      	mov	r0, r6
 8006a8e:	4639      	mov	r1, r7
 8006a90:	2200      	movs	r2, #0
 8006a92:	4b3e      	ldr	r3, [pc, #248]	; (8006b8c <_strtod_l+0xb24>)
 8006a94:	f7f9 fdb0 	bl	80005f8 <__aeabi_dmul>
 8006a98:	4606      	mov	r6, r0
 8006a9a:	460f      	mov	r7, r1
 8006a9c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8006aa0:	9618      	str	r6, [sp, #96]	; 0x60
 8006aa2:	9319      	str	r3, [sp, #100]	; 0x64
 8006aa4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8006aa8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006aac:	e79c      	b.n	80069e8 <_strtod_l+0x980>
 8006aae:	f1ba 0f01 	cmp.w	sl, #1
 8006ab2:	d102      	bne.n	8006aba <_strtod_l+0xa52>
 8006ab4:	2d00      	cmp	r5, #0
 8006ab6:	f43f ad8e 	beq.w	80065d6 <_strtod_l+0x56e>
 8006aba:	2200      	movs	r2, #0
 8006abc:	4b34      	ldr	r3, [pc, #208]	; (8006b90 <_strtod_l+0xb28>)
 8006abe:	e78f      	b.n	80069e0 <_strtod_l+0x978>
 8006ac0:	2600      	movs	r6, #0
 8006ac2:	4f32      	ldr	r7, [pc, #200]	; (8006b8c <_strtod_l+0xb24>)
 8006ac4:	e7ea      	b.n	8006a9c <_strtod_l+0xa34>
 8006ac6:	4b31      	ldr	r3, [pc, #196]	; (8006b8c <_strtod_l+0xb24>)
 8006ac8:	4630      	mov	r0, r6
 8006aca:	4639      	mov	r1, r7
 8006acc:	2200      	movs	r2, #0
 8006ace:	f7f9 fd93 	bl	80005f8 <__aeabi_dmul>
 8006ad2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ad4:	4606      	mov	r6, r0
 8006ad6:	460f      	mov	r7, r1
 8006ad8:	b933      	cbnz	r3, 8006ae8 <_strtod_l+0xa80>
 8006ada:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ade:	9010      	str	r0, [sp, #64]	; 0x40
 8006ae0:	9311      	str	r3, [sp, #68]	; 0x44
 8006ae2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006ae6:	e7df      	b.n	8006aa8 <_strtod_l+0xa40>
 8006ae8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8006aec:	e7f9      	b.n	8006ae2 <_strtod_l+0xa7a>
 8006aee:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006af2:	9b04      	ldr	r3, [sp, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1ab      	bne.n	8006a50 <_strtod_l+0x9e8>
 8006af8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006afc:	0d1b      	lsrs	r3, r3, #20
 8006afe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b00:	051b      	lsls	r3, r3, #20
 8006b02:	429a      	cmp	r2, r3
 8006b04:	465d      	mov	r5, fp
 8006b06:	d1a3      	bne.n	8006a50 <_strtod_l+0x9e8>
 8006b08:	4639      	mov	r1, r7
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	f7fa f824 	bl	8000b58 <__aeabi_d2iz>
 8006b10:	f7f9 fd08 	bl	8000524 <__aeabi_i2d>
 8006b14:	460b      	mov	r3, r1
 8006b16:	4602      	mov	r2, r0
 8006b18:	4639      	mov	r1, r7
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f7f9 fbb4 	bl	8000288 <__aeabi_dsub>
 8006b20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b22:	4606      	mov	r6, r0
 8006b24:	460f      	mov	r7, r1
 8006b26:	b933      	cbnz	r3, 8006b36 <_strtod_l+0xace>
 8006b28:	f1ba 0f00 	cmp.w	sl, #0
 8006b2c:	d103      	bne.n	8006b36 <_strtod_l+0xace>
 8006b2e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8006b32:	2d00      	cmp	r5, #0
 8006b34:	d06d      	beq.n	8006c12 <_strtod_l+0xbaa>
 8006b36:	a30a      	add	r3, pc, #40	; (adr r3, 8006b60 <_strtod_l+0xaf8>)
 8006b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3c:	4630      	mov	r0, r6
 8006b3e:	4639      	mov	r1, r7
 8006b40:	f7f9 ffcc 	bl	8000adc <__aeabi_dcmplt>
 8006b44:	2800      	cmp	r0, #0
 8006b46:	f47f acb8 	bne.w	80064ba <_strtod_l+0x452>
 8006b4a:	a307      	add	r3, pc, #28	; (adr r3, 8006b68 <_strtod_l+0xb00>)
 8006b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b50:	4630      	mov	r0, r6
 8006b52:	4639      	mov	r1, r7
 8006b54:	f7f9 ffe0 	bl	8000b18 <__aeabi_dcmpgt>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	f43f af79 	beq.w	8006a50 <_strtod_l+0x9e8>
 8006b5e:	e4ac      	b.n	80064ba <_strtod_l+0x452>
 8006b60:	94a03595 	.word	0x94a03595
 8006b64:	3fdfffff 	.word	0x3fdfffff
 8006b68:	35afe535 	.word	0x35afe535
 8006b6c:	3fe00000 	.word	0x3fe00000
 8006b70:	000fffff 	.word	0x000fffff
 8006b74:	7ff00000 	.word	0x7ff00000
 8006b78:	7fefffff 	.word	0x7fefffff
 8006b7c:	39500000 	.word	0x39500000
 8006b80:	3ff00000 	.word	0x3ff00000
 8006b84:	7fe00000 	.word	0x7fe00000
 8006b88:	7c9fffff 	.word	0x7c9fffff
 8006b8c:	3fe00000 	.word	0x3fe00000
 8006b90:	bff00000 	.word	0xbff00000
 8006b94:	9b04      	ldr	r3, [sp, #16]
 8006b96:	b333      	cbz	r3, 8006be6 <_strtod_l+0xb7e>
 8006b98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b9a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006b9e:	d822      	bhi.n	8006be6 <_strtod_l+0xb7e>
 8006ba0:	a327      	add	r3, pc, #156	; (adr r3, 8006c40 <_strtod_l+0xbd8>)
 8006ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	4639      	mov	r1, r7
 8006baa:	f7f9 ffa1 	bl	8000af0 <__aeabi_dcmple>
 8006bae:	b1a0      	cbz	r0, 8006bda <_strtod_l+0xb72>
 8006bb0:	4639      	mov	r1, r7
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	f7f9 fff8 	bl	8000ba8 <__aeabi_d2uiz>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	bf08      	it	eq
 8006bbc:	2001      	moveq	r0, #1
 8006bbe:	f7f9 fca1 	bl	8000504 <__aeabi_ui2d>
 8006bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bc4:	4606      	mov	r6, r0
 8006bc6:	460f      	mov	r7, r1
 8006bc8:	bb03      	cbnz	r3, 8006c0c <_strtod_l+0xba4>
 8006bca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bce:	9012      	str	r0, [sp, #72]	; 0x48
 8006bd0:	9313      	str	r3, [sp, #76]	; 0x4c
 8006bd2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006bd6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006bda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bdc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006bde:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006be2:	1a9b      	subs	r3, r3, r2
 8006be4:	930b      	str	r3, [sp, #44]	; 0x2c
 8006be6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8006bea:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8006bee:	f001 ffdb 	bl	8008ba8 <__ulp>
 8006bf2:	4650      	mov	r0, sl
 8006bf4:	ec53 2b10 	vmov	r2, r3, d0
 8006bf8:	4659      	mov	r1, fp
 8006bfa:	f7f9 fcfd 	bl	80005f8 <__aeabi_dmul>
 8006bfe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c02:	f7f9 fb43 	bl	800028c <__adddf3>
 8006c06:	4682      	mov	sl, r0
 8006c08:	468b      	mov	fp, r1
 8006c0a:	e772      	b.n	8006af2 <_strtod_l+0xa8a>
 8006c0c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8006c10:	e7df      	b.n	8006bd2 <_strtod_l+0xb6a>
 8006c12:	a30d      	add	r3, pc, #52	; (adr r3, 8006c48 <_strtod_l+0xbe0>)
 8006c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c18:	f7f9 ff60 	bl	8000adc <__aeabi_dcmplt>
 8006c1c:	e79c      	b.n	8006b58 <_strtod_l+0xaf0>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	930d      	str	r3, [sp, #52]	; 0x34
 8006c22:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006c24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006c26:	6013      	str	r3, [r2, #0]
 8006c28:	f7ff ba61 	b.w	80060ee <_strtod_l+0x86>
 8006c2c:	2b65      	cmp	r3, #101	; 0x65
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	f43f ab4e 	beq.w	80062d2 <_strtod_l+0x26a>
 8006c36:	2101      	movs	r1, #1
 8006c38:	4614      	mov	r4, r2
 8006c3a:	9104      	str	r1, [sp, #16]
 8006c3c:	f7ff bacb 	b.w	80061d6 <_strtod_l+0x16e>
 8006c40:	ffc00000 	.word	0xffc00000
 8006c44:	41dfffff 	.word	0x41dfffff
 8006c48:	94a03595 	.word	0x94a03595
 8006c4c:	3fcfffff 	.word	0x3fcfffff

08006c50 <_strtod_r>:
 8006c50:	4b05      	ldr	r3, [pc, #20]	; (8006c68 <_strtod_r+0x18>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	b410      	push	{r4}
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	4c04      	ldr	r4, [pc, #16]	; (8006c6c <_strtod_r+0x1c>)
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	bf08      	it	eq
 8006c5e:	4623      	moveq	r3, r4
 8006c60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c64:	f7ff ba00 	b.w	8006068 <_strtod_l>
 8006c68:	20000048 	.word	0x20000048
 8006c6c:	200000ac 	.word	0x200000ac

08006c70 <_strtol_l.isra.0>:
 8006c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c74:	4680      	mov	r8, r0
 8006c76:	4689      	mov	r9, r1
 8006c78:	4692      	mov	sl, r2
 8006c7a:	461e      	mov	r6, r3
 8006c7c:	460f      	mov	r7, r1
 8006c7e:	463d      	mov	r5, r7
 8006c80:	9808      	ldr	r0, [sp, #32]
 8006c82:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c86:	f001 fc27 	bl	80084d8 <__locale_ctype_ptr_l>
 8006c8a:	4420      	add	r0, r4
 8006c8c:	7843      	ldrb	r3, [r0, #1]
 8006c8e:	f013 0308 	ands.w	r3, r3, #8
 8006c92:	d132      	bne.n	8006cfa <_strtol_l.isra.0+0x8a>
 8006c94:	2c2d      	cmp	r4, #45	; 0x2d
 8006c96:	d132      	bne.n	8006cfe <_strtol_l.isra.0+0x8e>
 8006c98:	787c      	ldrb	r4, [r7, #1]
 8006c9a:	1cbd      	adds	r5, r7, #2
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	2e00      	cmp	r6, #0
 8006ca0:	d05d      	beq.n	8006d5e <_strtol_l.isra.0+0xee>
 8006ca2:	2e10      	cmp	r6, #16
 8006ca4:	d109      	bne.n	8006cba <_strtol_l.isra.0+0x4a>
 8006ca6:	2c30      	cmp	r4, #48	; 0x30
 8006ca8:	d107      	bne.n	8006cba <_strtol_l.isra.0+0x4a>
 8006caa:	782b      	ldrb	r3, [r5, #0]
 8006cac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006cb0:	2b58      	cmp	r3, #88	; 0x58
 8006cb2:	d14f      	bne.n	8006d54 <_strtol_l.isra.0+0xe4>
 8006cb4:	786c      	ldrb	r4, [r5, #1]
 8006cb6:	2610      	movs	r6, #16
 8006cb8:	3502      	adds	r5, #2
 8006cba:	2a00      	cmp	r2, #0
 8006cbc:	bf14      	ite	ne
 8006cbe:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8006cc2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8006cc6:	2700      	movs	r7, #0
 8006cc8:	fbb1 fcf6 	udiv	ip, r1, r6
 8006ccc:	4638      	mov	r0, r7
 8006cce:	fb06 1e1c 	mls	lr, r6, ip, r1
 8006cd2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8006cd6:	2b09      	cmp	r3, #9
 8006cd8:	d817      	bhi.n	8006d0a <_strtol_l.isra.0+0x9a>
 8006cda:	461c      	mov	r4, r3
 8006cdc:	42a6      	cmp	r6, r4
 8006cde:	dd23      	ble.n	8006d28 <_strtol_l.isra.0+0xb8>
 8006ce0:	1c7b      	adds	r3, r7, #1
 8006ce2:	d007      	beq.n	8006cf4 <_strtol_l.isra.0+0x84>
 8006ce4:	4584      	cmp	ip, r0
 8006ce6:	d31c      	bcc.n	8006d22 <_strtol_l.isra.0+0xb2>
 8006ce8:	d101      	bne.n	8006cee <_strtol_l.isra.0+0x7e>
 8006cea:	45a6      	cmp	lr, r4
 8006cec:	db19      	blt.n	8006d22 <_strtol_l.isra.0+0xb2>
 8006cee:	fb00 4006 	mla	r0, r0, r6, r4
 8006cf2:	2701      	movs	r7, #1
 8006cf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006cf8:	e7eb      	b.n	8006cd2 <_strtol_l.isra.0+0x62>
 8006cfa:	462f      	mov	r7, r5
 8006cfc:	e7bf      	b.n	8006c7e <_strtol_l.isra.0+0xe>
 8006cfe:	2c2b      	cmp	r4, #43	; 0x2b
 8006d00:	bf04      	itt	eq
 8006d02:	1cbd      	addeq	r5, r7, #2
 8006d04:	787c      	ldrbeq	r4, [r7, #1]
 8006d06:	461a      	mov	r2, r3
 8006d08:	e7c9      	b.n	8006c9e <_strtol_l.isra.0+0x2e>
 8006d0a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8006d0e:	2b19      	cmp	r3, #25
 8006d10:	d801      	bhi.n	8006d16 <_strtol_l.isra.0+0xa6>
 8006d12:	3c37      	subs	r4, #55	; 0x37
 8006d14:	e7e2      	b.n	8006cdc <_strtol_l.isra.0+0x6c>
 8006d16:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8006d1a:	2b19      	cmp	r3, #25
 8006d1c:	d804      	bhi.n	8006d28 <_strtol_l.isra.0+0xb8>
 8006d1e:	3c57      	subs	r4, #87	; 0x57
 8006d20:	e7dc      	b.n	8006cdc <_strtol_l.isra.0+0x6c>
 8006d22:	f04f 37ff 	mov.w	r7, #4294967295
 8006d26:	e7e5      	b.n	8006cf4 <_strtol_l.isra.0+0x84>
 8006d28:	1c7b      	adds	r3, r7, #1
 8006d2a:	d108      	bne.n	8006d3e <_strtol_l.isra.0+0xce>
 8006d2c:	2322      	movs	r3, #34	; 0x22
 8006d2e:	f8c8 3000 	str.w	r3, [r8]
 8006d32:	4608      	mov	r0, r1
 8006d34:	f1ba 0f00 	cmp.w	sl, #0
 8006d38:	d107      	bne.n	8006d4a <_strtol_l.isra.0+0xda>
 8006d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d3e:	b102      	cbz	r2, 8006d42 <_strtol_l.isra.0+0xd2>
 8006d40:	4240      	negs	r0, r0
 8006d42:	f1ba 0f00 	cmp.w	sl, #0
 8006d46:	d0f8      	beq.n	8006d3a <_strtol_l.isra.0+0xca>
 8006d48:	b10f      	cbz	r7, 8006d4e <_strtol_l.isra.0+0xde>
 8006d4a:	f105 39ff 	add.w	r9, r5, #4294967295
 8006d4e:	f8ca 9000 	str.w	r9, [sl]
 8006d52:	e7f2      	b.n	8006d3a <_strtol_l.isra.0+0xca>
 8006d54:	2430      	movs	r4, #48	; 0x30
 8006d56:	2e00      	cmp	r6, #0
 8006d58:	d1af      	bne.n	8006cba <_strtol_l.isra.0+0x4a>
 8006d5a:	2608      	movs	r6, #8
 8006d5c:	e7ad      	b.n	8006cba <_strtol_l.isra.0+0x4a>
 8006d5e:	2c30      	cmp	r4, #48	; 0x30
 8006d60:	d0a3      	beq.n	8006caa <_strtol_l.isra.0+0x3a>
 8006d62:	260a      	movs	r6, #10
 8006d64:	e7a9      	b.n	8006cba <_strtol_l.isra.0+0x4a>
	...

08006d68 <_strtol_r>:
 8006d68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d6a:	4c06      	ldr	r4, [pc, #24]	; (8006d84 <_strtol_r+0x1c>)
 8006d6c:	4d06      	ldr	r5, [pc, #24]	; (8006d88 <_strtol_r+0x20>)
 8006d6e:	6824      	ldr	r4, [r4, #0]
 8006d70:	6a24      	ldr	r4, [r4, #32]
 8006d72:	2c00      	cmp	r4, #0
 8006d74:	bf08      	it	eq
 8006d76:	462c      	moveq	r4, r5
 8006d78:	9400      	str	r4, [sp, #0]
 8006d7a:	f7ff ff79 	bl	8006c70 <_strtol_l.isra.0>
 8006d7e:	b003      	add	sp, #12
 8006d80:	bd30      	pop	{r4, r5, pc}
 8006d82:	bf00      	nop
 8006d84:	20000048 	.word	0x20000048
 8006d88:	200000ac 	.word	0x200000ac

08006d8c <__swbuf_r>:
 8006d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d8e:	460e      	mov	r6, r1
 8006d90:	4614      	mov	r4, r2
 8006d92:	4605      	mov	r5, r0
 8006d94:	b118      	cbz	r0, 8006d9e <__swbuf_r+0x12>
 8006d96:	6983      	ldr	r3, [r0, #24]
 8006d98:	b90b      	cbnz	r3, 8006d9e <__swbuf_r+0x12>
 8006d9a:	f000 ffed 	bl	8007d78 <__sinit>
 8006d9e:	4b21      	ldr	r3, [pc, #132]	; (8006e24 <__swbuf_r+0x98>)
 8006da0:	429c      	cmp	r4, r3
 8006da2:	d12a      	bne.n	8006dfa <__swbuf_r+0x6e>
 8006da4:	686c      	ldr	r4, [r5, #4]
 8006da6:	69a3      	ldr	r3, [r4, #24]
 8006da8:	60a3      	str	r3, [r4, #8]
 8006daa:	89a3      	ldrh	r3, [r4, #12]
 8006dac:	071a      	lsls	r2, r3, #28
 8006dae:	d52e      	bpl.n	8006e0e <__swbuf_r+0x82>
 8006db0:	6923      	ldr	r3, [r4, #16]
 8006db2:	b363      	cbz	r3, 8006e0e <__swbuf_r+0x82>
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	6820      	ldr	r0, [r4, #0]
 8006db8:	1ac0      	subs	r0, r0, r3
 8006dba:	6963      	ldr	r3, [r4, #20]
 8006dbc:	b2f6      	uxtb	r6, r6
 8006dbe:	4283      	cmp	r3, r0
 8006dc0:	4637      	mov	r7, r6
 8006dc2:	dc04      	bgt.n	8006dce <__swbuf_r+0x42>
 8006dc4:	4621      	mov	r1, r4
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	f000 ff6c 	bl	8007ca4 <_fflush_r>
 8006dcc:	bb28      	cbnz	r0, 8006e1a <__swbuf_r+0x8e>
 8006dce:	68a3      	ldr	r3, [r4, #8]
 8006dd0:	3b01      	subs	r3, #1
 8006dd2:	60a3      	str	r3, [r4, #8]
 8006dd4:	6823      	ldr	r3, [r4, #0]
 8006dd6:	1c5a      	adds	r2, r3, #1
 8006dd8:	6022      	str	r2, [r4, #0]
 8006dda:	701e      	strb	r6, [r3, #0]
 8006ddc:	6963      	ldr	r3, [r4, #20]
 8006dde:	3001      	adds	r0, #1
 8006de0:	4283      	cmp	r3, r0
 8006de2:	d004      	beq.n	8006dee <__swbuf_r+0x62>
 8006de4:	89a3      	ldrh	r3, [r4, #12]
 8006de6:	07db      	lsls	r3, r3, #31
 8006de8:	d519      	bpl.n	8006e1e <__swbuf_r+0x92>
 8006dea:	2e0a      	cmp	r6, #10
 8006dec:	d117      	bne.n	8006e1e <__swbuf_r+0x92>
 8006dee:	4621      	mov	r1, r4
 8006df0:	4628      	mov	r0, r5
 8006df2:	f000 ff57 	bl	8007ca4 <_fflush_r>
 8006df6:	b190      	cbz	r0, 8006e1e <__swbuf_r+0x92>
 8006df8:	e00f      	b.n	8006e1a <__swbuf_r+0x8e>
 8006dfa:	4b0b      	ldr	r3, [pc, #44]	; (8006e28 <__swbuf_r+0x9c>)
 8006dfc:	429c      	cmp	r4, r3
 8006dfe:	d101      	bne.n	8006e04 <__swbuf_r+0x78>
 8006e00:	68ac      	ldr	r4, [r5, #8]
 8006e02:	e7d0      	b.n	8006da6 <__swbuf_r+0x1a>
 8006e04:	4b09      	ldr	r3, [pc, #36]	; (8006e2c <__swbuf_r+0xa0>)
 8006e06:	429c      	cmp	r4, r3
 8006e08:	bf08      	it	eq
 8006e0a:	68ec      	ldreq	r4, [r5, #12]
 8006e0c:	e7cb      	b.n	8006da6 <__swbuf_r+0x1a>
 8006e0e:	4621      	mov	r1, r4
 8006e10:	4628      	mov	r0, r5
 8006e12:	f000 f80d 	bl	8006e30 <__swsetup_r>
 8006e16:	2800      	cmp	r0, #0
 8006e18:	d0cc      	beq.n	8006db4 <__swbuf_r+0x28>
 8006e1a:	f04f 37ff 	mov.w	r7, #4294967295
 8006e1e:	4638      	mov	r0, r7
 8006e20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e22:	bf00      	nop
 8006e24:	080098a8 	.word	0x080098a8
 8006e28:	080098c8 	.word	0x080098c8
 8006e2c:	08009888 	.word	0x08009888

08006e30 <__swsetup_r>:
 8006e30:	4b32      	ldr	r3, [pc, #200]	; (8006efc <__swsetup_r+0xcc>)
 8006e32:	b570      	push	{r4, r5, r6, lr}
 8006e34:	681d      	ldr	r5, [r3, #0]
 8006e36:	4606      	mov	r6, r0
 8006e38:	460c      	mov	r4, r1
 8006e3a:	b125      	cbz	r5, 8006e46 <__swsetup_r+0x16>
 8006e3c:	69ab      	ldr	r3, [r5, #24]
 8006e3e:	b913      	cbnz	r3, 8006e46 <__swsetup_r+0x16>
 8006e40:	4628      	mov	r0, r5
 8006e42:	f000 ff99 	bl	8007d78 <__sinit>
 8006e46:	4b2e      	ldr	r3, [pc, #184]	; (8006f00 <__swsetup_r+0xd0>)
 8006e48:	429c      	cmp	r4, r3
 8006e4a:	d10f      	bne.n	8006e6c <__swsetup_r+0x3c>
 8006e4c:	686c      	ldr	r4, [r5, #4]
 8006e4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e52:	b29a      	uxth	r2, r3
 8006e54:	0715      	lsls	r5, r2, #28
 8006e56:	d42c      	bmi.n	8006eb2 <__swsetup_r+0x82>
 8006e58:	06d0      	lsls	r0, r2, #27
 8006e5a:	d411      	bmi.n	8006e80 <__swsetup_r+0x50>
 8006e5c:	2209      	movs	r2, #9
 8006e5e:	6032      	str	r2, [r6, #0]
 8006e60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e64:	81a3      	strh	r3, [r4, #12]
 8006e66:	f04f 30ff 	mov.w	r0, #4294967295
 8006e6a:	e03e      	b.n	8006eea <__swsetup_r+0xba>
 8006e6c:	4b25      	ldr	r3, [pc, #148]	; (8006f04 <__swsetup_r+0xd4>)
 8006e6e:	429c      	cmp	r4, r3
 8006e70:	d101      	bne.n	8006e76 <__swsetup_r+0x46>
 8006e72:	68ac      	ldr	r4, [r5, #8]
 8006e74:	e7eb      	b.n	8006e4e <__swsetup_r+0x1e>
 8006e76:	4b24      	ldr	r3, [pc, #144]	; (8006f08 <__swsetup_r+0xd8>)
 8006e78:	429c      	cmp	r4, r3
 8006e7a:	bf08      	it	eq
 8006e7c:	68ec      	ldreq	r4, [r5, #12]
 8006e7e:	e7e6      	b.n	8006e4e <__swsetup_r+0x1e>
 8006e80:	0751      	lsls	r1, r2, #29
 8006e82:	d512      	bpl.n	8006eaa <__swsetup_r+0x7a>
 8006e84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e86:	b141      	cbz	r1, 8006e9a <__swsetup_r+0x6a>
 8006e88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e8c:	4299      	cmp	r1, r3
 8006e8e:	d002      	beq.n	8006e96 <__swsetup_r+0x66>
 8006e90:	4630      	mov	r0, r6
 8006e92:	f001 ffcb 	bl	8008e2c <_free_r>
 8006e96:	2300      	movs	r3, #0
 8006e98:	6363      	str	r3, [r4, #52]	; 0x34
 8006e9a:	89a3      	ldrh	r3, [r4, #12]
 8006e9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ea0:	81a3      	strh	r3, [r4, #12]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	6063      	str	r3, [r4, #4]
 8006ea6:	6923      	ldr	r3, [r4, #16]
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	f043 0308 	orr.w	r3, r3, #8
 8006eb0:	81a3      	strh	r3, [r4, #12]
 8006eb2:	6923      	ldr	r3, [r4, #16]
 8006eb4:	b94b      	cbnz	r3, 8006eca <__swsetup_r+0x9a>
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ec0:	d003      	beq.n	8006eca <__swsetup_r+0x9a>
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	f001 fb3f 	bl	8008548 <__smakebuf_r>
 8006eca:	89a2      	ldrh	r2, [r4, #12]
 8006ecc:	f012 0301 	ands.w	r3, r2, #1
 8006ed0:	d00c      	beq.n	8006eec <__swsetup_r+0xbc>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	60a3      	str	r3, [r4, #8]
 8006ed6:	6963      	ldr	r3, [r4, #20]
 8006ed8:	425b      	negs	r3, r3
 8006eda:	61a3      	str	r3, [r4, #24]
 8006edc:	6923      	ldr	r3, [r4, #16]
 8006ede:	b953      	cbnz	r3, 8006ef6 <__swsetup_r+0xc6>
 8006ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006ee8:	d1ba      	bne.n	8006e60 <__swsetup_r+0x30>
 8006eea:	bd70      	pop	{r4, r5, r6, pc}
 8006eec:	0792      	lsls	r2, r2, #30
 8006eee:	bf58      	it	pl
 8006ef0:	6963      	ldrpl	r3, [r4, #20]
 8006ef2:	60a3      	str	r3, [r4, #8]
 8006ef4:	e7f2      	b.n	8006edc <__swsetup_r+0xac>
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	e7f7      	b.n	8006eea <__swsetup_r+0xba>
 8006efa:	bf00      	nop
 8006efc:	20000048 	.word	0x20000048
 8006f00:	080098a8 	.word	0x080098a8
 8006f04:	080098c8 	.word	0x080098c8
 8006f08:	08009888 	.word	0x08009888

08006f0c <quorem>:
 8006f0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f10:	6903      	ldr	r3, [r0, #16]
 8006f12:	690c      	ldr	r4, [r1, #16]
 8006f14:	42a3      	cmp	r3, r4
 8006f16:	4680      	mov	r8, r0
 8006f18:	f2c0 8082 	blt.w	8007020 <quorem+0x114>
 8006f1c:	3c01      	subs	r4, #1
 8006f1e:	f101 0714 	add.w	r7, r1, #20
 8006f22:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006f26:	f100 0614 	add.w	r6, r0, #20
 8006f2a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006f2e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006f32:	eb06 030c 	add.w	r3, r6, ip
 8006f36:	3501      	adds	r5, #1
 8006f38:	eb07 090c 	add.w	r9, r7, ip
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	fbb0 f5f5 	udiv	r5, r0, r5
 8006f42:	b395      	cbz	r5, 8006faa <quorem+0x9e>
 8006f44:	f04f 0a00 	mov.w	sl, #0
 8006f48:	4638      	mov	r0, r7
 8006f4a:	46b6      	mov	lr, r6
 8006f4c:	46d3      	mov	fp, sl
 8006f4e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006f52:	b293      	uxth	r3, r2
 8006f54:	fb05 a303 	mla	r3, r5, r3, sl
 8006f58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	ebab 0303 	sub.w	r3, fp, r3
 8006f62:	0c12      	lsrs	r2, r2, #16
 8006f64:	f8de b000 	ldr.w	fp, [lr]
 8006f68:	fb05 a202 	mla	r2, r5, r2, sl
 8006f6c:	fa13 f38b 	uxtah	r3, r3, fp
 8006f70:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006f74:	fa1f fb82 	uxth.w	fp, r2
 8006f78:	f8de 2000 	ldr.w	r2, [lr]
 8006f7c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006f80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f8a:	4581      	cmp	r9, r0
 8006f8c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006f90:	f84e 3b04 	str.w	r3, [lr], #4
 8006f94:	d2db      	bcs.n	8006f4e <quorem+0x42>
 8006f96:	f856 300c 	ldr.w	r3, [r6, ip]
 8006f9a:	b933      	cbnz	r3, 8006faa <quorem+0x9e>
 8006f9c:	9b01      	ldr	r3, [sp, #4]
 8006f9e:	3b04      	subs	r3, #4
 8006fa0:	429e      	cmp	r6, r3
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	d330      	bcc.n	8007008 <quorem+0xfc>
 8006fa6:	f8c8 4010 	str.w	r4, [r8, #16]
 8006faa:	4640      	mov	r0, r8
 8006fac:	f001 fd84 	bl	8008ab8 <__mcmp>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	db25      	blt.n	8007000 <quorem+0xf4>
 8006fb4:	3501      	adds	r5, #1
 8006fb6:	4630      	mov	r0, r6
 8006fb8:	f04f 0c00 	mov.w	ip, #0
 8006fbc:	f857 2b04 	ldr.w	r2, [r7], #4
 8006fc0:	f8d0 e000 	ldr.w	lr, [r0]
 8006fc4:	b293      	uxth	r3, r2
 8006fc6:	ebac 0303 	sub.w	r3, ip, r3
 8006fca:	0c12      	lsrs	r2, r2, #16
 8006fcc:	fa13 f38e 	uxtah	r3, r3, lr
 8006fd0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006fd4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006fd8:	b29b      	uxth	r3, r3
 8006fda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006fde:	45b9      	cmp	r9, r7
 8006fe0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006fe4:	f840 3b04 	str.w	r3, [r0], #4
 8006fe8:	d2e8      	bcs.n	8006fbc <quorem+0xb0>
 8006fea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006fee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006ff2:	b92a      	cbnz	r2, 8007000 <quorem+0xf4>
 8006ff4:	3b04      	subs	r3, #4
 8006ff6:	429e      	cmp	r6, r3
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	d30b      	bcc.n	8007014 <quorem+0x108>
 8006ffc:	f8c8 4010 	str.w	r4, [r8, #16]
 8007000:	4628      	mov	r0, r5
 8007002:	b003      	add	sp, #12
 8007004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007008:	6812      	ldr	r2, [r2, #0]
 800700a:	3b04      	subs	r3, #4
 800700c:	2a00      	cmp	r2, #0
 800700e:	d1ca      	bne.n	8006fa6 <quorem+0x9a>
 8007010:	3c01      	subs	r4, #1
 8007012:	e7c5      	b.n	8006fa0 <quorem+0x94>
 8007014:	6812      	ldr	r2, [r2, #0]
 8007016:	3b04      	subs	r3, #4
 8007018:	2a00      	cmp	r2, #0
 800701a:	d1ef      	bne.n	8006ffc <quorem+0xf0>
 800701c:	3c01      	subs	r4, #1
 800701e:	e7ea      	b.n	8006ff6 <quorem+0xea>
 8007020:	2000      	movs	r0, #0
 8007022:	e7ee      	b.n	8007002 <quorem+0xf6>
 8007024:	0000      	movs	r0, r0
	...

08007028 <_dtoa_r>:
 8007028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702c:	ec57 6b10 	vmov	r6, r7, d0
 8007030:	b097      	sub	sp, #92	; 0x5c
 8007032:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007034:	9106      	str	r1, [sp, #24]
 8007036:	4604      	mov	r4, r0
 8007038:	920b      	str	r2, [sp, #44]	; 0x2c
 800703a:	9312      	str	r3, [sp, #72]	; 0x48
 800703c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007040:	e9cd 6700 	strd	r6, r7, [sp]
 8007044:	b93d      	cbnz	r5, 8007056 <_dtoa_r+0x2e>
 8007046:	2010      	movs	r0, #16
 8007048:	f001 fabe 	bl	80085c8 <malloc>
 800704c:	6260      	str	r0, [r4, #36]	; 0x24
 800704e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007052:	6005      	str	r5, [r0, #0]
 8007054:	60c5      	str	r5, [r0, #12]
 8007056:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007058:	6819      	ldr	r1, [r3, #0]
 800705a:	b151      	cbz	r1, 8007072 <_dtoa_r+0x4a>
 800705c:	685a      	ldr	r2, [r3, #4]
 800705e:	604a      	str	r2, [r1, #4]
 8007060:	2301      	movs	r3, #1
 8007062:	4093      	lsls	r3, r2
 8007064:	608b      	str	r3, [r1, #8]
 8007066:	4620      	mov	r0, r4
 8007068:	f001 fb07 	bl	800867a <_Bfree>
 800706c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	1e3b      	subs	r3, r7, #0
 8007074:	bfbb      	ittet	lt
 8007076:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800707a:	9301      	strlt	r3, [sp, #4]
 800707c:	2300      	movge	r3, #0
 800707e:	2201      	movlt	r2, #1
 8007080:	bfac      	ite	ge
 8007082:	f8c8 3000 	strge.w	r3, [r8]
 8007086:	f8c8 2000 	strlt.w	r2, [r8]
 800708a:	4baf      	ldr	r3, [pc, #700]	; (8007348 <_dtoa_r+0x320>)
 800708c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007090:	ea33 0308 	bics.w	r3, r3, r8
 8007094:	d114      	bne.n	80070c0 <_dtoa_r+0x98>
 8007096:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007098:	f242 730f 	movw	r3, #9999	; 0x270f
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	9b00      	ldr	r3, [sp, #0]
 80070a0:	b923      	cbnz	r3, 80070ac <_dtoa_r+0x84>
 80070a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80070a6:	2800      	cmp	r0, #0
 80070a8:	f000 8542 	beq.w	8007b30 <_dtoa_r+0xb08>
 80070ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800735c <_dtoa_r+0x334>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	f000 8544 	beq.w	8007b40 <_dtoa_r+0xb18>
 80070b8:	f10b 0303 	add.w	r3, fp, #3
 80070bc:	f000 bd3e 	b.w	8007b3c <_dtoa_r+0xb14>
 80070c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80070c4:	2200      	movs	r2, #0
 80070c6:	2300      	movs	r3, #0
 80070c8:	4630      	mov	r0, r6
 80070ca:	4639      	mov	r1, r7
 80070cc:	f7f9 fcfc 	bl	8000ac8 <__aeabi_dcmpeq>
 80070d0:	4681      	mov	r9, r0
 80070d2:	b168      	cbz	r0, 80070f0 <_dtoa_r+0xc8>
 80070d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070d6:	2301      	movs	r3, #1
 80070d8:	6013      	str	r3, [r2, #0]
 80070da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 8524 	beq.w	8007b2a <_dtoa_r+0xb02>
 80070e2:	4b9a      	ldr	r3, [pc, #616]	; (800734c <_dtoa_r+0x324>)
 80070e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80070e6:	f103 3bff 	add.w	fp, r3, #4294967295
 80070ea:	6013      	str	r3, [r2, #0]
 80070ec:	f000 bd28 	b.w	8007b40 <_dtoa_r+0xb18>
 80070f0:	aa14      	add	r2, sp, #80	; 0x50
 80070f2:	a915      	add	r1, sp, #84	; 0x54
 80070f4:	ec47 6b10 	vmov	d0, r6, r7
 80070f8:	4620      	mov	r0, r4
 80070fa:	f001 fdcb 	bl	8008c94 <__d2b>
 80070fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007102:	9004      	str	r0, [sp, #16]
 8007104:	2d00      	cmp	r5, #0
 8007106:	d07c      	beq.n	8007202 <_dtoa_r+0x1da>
 8007108:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800710c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007110:	46b2      	mov	sl, r6
 8007112:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007116:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800711a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800711e:	2200      	movs	r2, #0
 8007120:	4b8b      	ldr	r3, [pc, #556]	; (8007350 <_dtoa_r+0x328>)
 8007122:	4650      	mov	r0, sl
 8007124:	4659      	mov	r1, fp
 8007126:	f7f9 f8af 	bl	8000288 <__aeabi_dsub>
 800712a:	a381      	add	r3, pc, #516	; (adr r3, 8007330 <_dtoa_r+0x308>)
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	f7f9 fa62 	bl	80005f8 <__aeabi_dmul>
 8007134:	a380      	add	r3, pc, #512	; (adr r3, 8007338 <_dtoa_r+0x310>)
 8007136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713a:	f7f9 f8a7 	bl	800028c <__adddf3>
 800713e:	4606      	mov	r6, r0
 8007140:	4628      	mov	r0, r5
 8007142:	460f      	mov	r7, r1
 8007144:	f7f9 f9ee 	bl	8000524 <__aeabi_i2d>
 8007148:	a37d      	add	r3, pc, #500	; (adr r3, 8007340 <_dtoa_r+0x318>)
 800714a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714e:	f7f9 fa53 	bl	80005f8 <__aeabi_dmul>
 8007152:	4602      	mov	r2, r0
 8007154:	460b      	mov	r3, r1
 8007156:	4630      	mov	r0, r6
 8007158:	4639      	mov	r1, r7
 800715a:	f7f9 f897 	bl	800028c <__adddf3>
 800715e:	4606      	mov	r6, r0
 8007160:	460f      	mov	r7, r1
 8007162:	f7f9 fcf9 	bl	8000b58 <__aeabi_d2iz>
 8007166:	2200      	movs	r2, #0
 8007168:	4682      	mov	sl, r0
 800716a:	2300      	movs	r3, #0
 800716c:	4630      	mov	r0, r6
 800716e:	4639      	mov	r1, r7
 8007170:	f7f9 fcb4 	bl	8000adc <__aeabi_dcmplt>
 8007174:	b148      	cbz	r0, 800718a <_dtoa_r+0x162>
 8007176:	4650      	mov	r0, sl
 8007178:	f7f9 f9d4 	bl	8000524 <__aeabi_i2d>
 800717c:	4632      	mov	r2, r6
 800717e:	463b      	mov	r3, r7
 8007180:	f7f9 fca2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007184:	b908      	cbnz	r0, 800718a <_dtoa_r+0x162>
 8007186:	f10a 3aff 	add.w	sl, sl, #4294967295
 800718a:	f1ba 0f16 	cmp.w	sl, #22
 800718e:	d859      	bhi.n	8007244 <_dtoa_r+0x21c>
 8007190:	4970      	ldr	r1, [pc, #448]	; (8007354 <_dtoa_r+0x32c>)
 8007192:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007196:	e9dd 2300 	ldrd	r2, r3, [sp]
 800719a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800719e:	f7f9 fcbb 	bl	8000b18 <__aeabi_dcmpgt>
 80071a2:	2800      	cmp	r0, #0
 80071a4:	d050      	beq.n	8007248 <_dtoa_r+0x220>
 80071a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071aa:	2300      	movs	r3, #0
 80071ac:	930f      	str	r3, [sp, #60]	; 0x3c
 80071ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80071b0:	1b5d      	subs	r5, r3, r5
 80071b2:	f1b5 0801 	subs.w	r8, r5, #1
 80071b6:	bf49      	itett	mi
 80071b8:	f1c5 0301 	rsbmi	r3, r5, #1
 80071bc:	2300      	movpl	r3, #0
 80071be:	9305      	strmi	r3, [sp, #20]
 80071c0:	f04f 0800 	movmi.w	r8, #0
 80071c4:	bf58      	it	pl
 80071c6:	9305      	strpl	r3, [sp, #20]
 80071c8:	f1ba 0f00 	cmp.w	sl, #0
 80071cc:	db3e      	blt.n	800724c <_dtoa_r+0x224>
 80071ce:	2300      	movs	r3, #0
 80071d0:	44d0      	add	r8, sl
 80071d2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80071d6:	9307      	str	r3, [sp, #28]
 80071d8:	9b06      	ldr	r3, [sp, #24]
 80071da:	2b09      	cmp	r3, #9
 80071dc:	f200 8090 	bhi.w	8007300 <_dtoa_r+0x2d8>
 80071e0:	2b05      	cmp	r3, #5
 80071e2:	bfc4      	itt	gt
 80071e4:	3b04      	subgt	r3, #4
 80071e6:	9306      	strgt	r3, [sp, #24]
 80071e8:	9b06      	ldr	r3, [sp, #24]
 80071ea:	f1a3 0302 	sub.w	r3, r3, #2
 80071ee:	bfcc      	ite	gt
 80071f0:	2500      	movgt	r5, #0
 80071f2:	2501      	movle	r5, #1
 80071f4:	2b03      	cmp	r3, #3
 80071f6:	f200 808f 	bhi.w	8007318 <_dtoa_r+0x2f0>
 80071fa:	e8df f003 	tbb	[pc, r3]
 80071fe:	7f7d      	.short	0x7f7d
 8007200:	7131      	.short	0x7131
 8007202:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007206:	441d      	add	r5, r3
 8007208:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800720c:	2820      	cmp	r0, #32
 800720e:	dd13      	ble.n	8007238 <_dtoa_r+0x210>
 8007210:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8007214:	9b00      	ldr	r3, [sp, #0]
 8007216:	fa08 f800 	lsl.w	r8, r8, r0
 800721a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800721e:	fa23 f000 	lsr.w	r0, r3, r0
 8007222:	ea48 0000 	orr.w	r0, r8, r0
 8007226:	f7f9 f96d 	bl	8000504 <__aeabi_ui2d>
 800722a:	2301      	movs	r3, #1
 800722c:	4682      	mov	sl, r0
 800722e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007232:	3d01      	subs	r5, #1
 8007234:	9313      	str	r3, [sp, #76]	; 0x4c
 8007236:	e772      	b.n	800711e <_dtoa_r+0xf6>
 8007238:	9b00      	ldr	r3, [sp, #0]
 800723a:	f1c0 0020 	rsb	r0, r0, #32
 800723e:	fa03 f000 	lsl.w	r0, r3, r0
 8007242:	e7f0      	b.n	8007226 <_dtoa_r+0x1fe>
 8007244:	2301      	movs	r3, #1
 8007246:	e7b1      	b.n	80071ac <_dtoa_r+0x184>
 8007248:	900f      	str	r0, [sp, #60]	; 0x3c
 800724a:	e7b0      	b.n	80071ae <_dtoa_r+0x186>
 800724c:	9b05      	ldr	r3, [sp, #20]
 800724e:	eba3 030a 	sub.w	r3, r3, sl
 8007252:	9305      	str	r3, [sp, #20]
 8007254:	f1ca 0300 	rsb	r3, sl, #0
 8007258:	9307      	str	r3, [sp, #28]
 800725a:	2300      	movs	r3, #0
 800725c:	930e      	str	r3, [sp, #56]	; 0x38
 800725e:	e7bb      	b.n	80071d8 <_dtoa_r+0x1b0>
 8007260:	2301      	movs	r3, #1
 8007262:	930a      	str	r3, [sp, #40]	; 0x28
 8007264:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007266:	2b00      	cmp	r3, #0
 8007268:	dd59      	ble.n	800731e <_dtoa_r+0x2f6>
 800726a:	9302      	str	r3, [sp, #8]
 800726c:	4699      	mov	r9, r3
 800726e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007270:	2200      	movs	r2, #0
 8007272:	6072      	str	r2, [r6, #4]
 8007274:	2204      	movs	r2, #4
 8007276:	f102 0014 	add.w	r0, r2, #20
 800727a:	4298      	cmp	r0, r3
 800727c:	6871      	ldr	r1, [r6, #4]
 800727e:	d953      	bls.n	8007328 <_dtoa_r+0x300>
 8007280:	4620      	mov	r0, r4
 8007282:	f001 f9c6 	bl	8008612 <_Balloc>
 8007286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007288:	6030      	str	r0, [r6, #0]
 800728a:	f1b9 0f0e 	cmp.w	r9, #14
 800728e:	f8d3 b000 	ldr.w	fp, [r3]
 8007292:	f200 80e6 	bhi.w	8007462 <_dtoa_r+0x43a>
 8007296:	2d00      	cmp	r5, #0
 8007298:	f000 80e3 	beq.w	8007462 <_dtoa_r+0x43a>
 800729c:	ed9d 7b00 	vldr	d7, [sp]
 80072a0:	f1ba 0f00 	cmp.w	sl, #0
 80072a4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80072a8:	dd74      	ble.n	8007394 <_dtoa_r+0x36c>
 80072aa:	4a2a      	ldr	r2, [pc, #168]	; (8007354 <_dtoa_r+0x32c>)
 80072ac:	f00a 030f 	and.w	r3, sl, #15
 80072b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80072b4:	ed93 7b00 	vldr	d7, [r3]
 80072b8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80072bc:	06f0      	lsls	r0, r6, #27
 80072be:	ed8d 7b08 	vstr	d7, [sp, #32]
 80072c2:	d565      	bpl.n	8007390 <_dtoa_r+0x368>
 80072c4:	4b24      	ldr	r3, [pc, #144]	; (8007358 <_dtoa_r+0x330>)
 80072c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072ca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072ce:	f7f9 fabd 	bl	800084c <__aeabi_ddiv>
 80072d2:	e9cd 0100 	strd	r0, r1, [sp]
 80072d6:	f006 060f 	and.w	r6, r6, #15
 80072da:	2503      	movs	r5, #3
 80072dc:	4f1e      	ldr	r7, [pc, #120]	; (8007358 <_dtoa_r+0x330>)
 80072de:	e04c      	b.n	800737a <_dtoa_r+0x352>
 80072e0:	2301      	movs	r3, #1
 80072e2:	930a      	str	r3, [sp, #40]	; 0x28
 80072e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072e6:	4453      	add	r3, sl
 80072e8:	f103 0901 	add.w	r9, r3, #1
 80072ec:	9302      	str	r3, [sp, #8]
 80072ee:	464b      	mov	r3, r9
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	bfb8      	it	lt
 80072f4:	2301      	movlt	r3, #1
 80072f6:	e7ba      	b.n	800726e <_dtoa_r+0x246>
 80072f8:	2300      	movs	r3, #0
 80072fa:	e7b2      	b.n	8007262 <_dtoa_r+0x23a>
 80072fc:	2300      	movs	r3, #0
 80072fe:	e7f0      	b.n	80072e2 <_dtoa_r+0x2ba>
 8007300:	2501      	movs	r5, #1
 8007302:	2300      	movs	r3, #0
 8007304:	9306      	str	r3, [sp, #24]
 8007306:	950a      	str	r5, [sp, #40]	; 0x28
 8007308:	f04f 33ff 	mov.w	r3, #4294967295
 800730c:	9302      	str	r3, [sp, #8]
 800730e:	4699      	mov	r9, r3
 8007310:	2200      	movs	r2, #0
 8007312:	2312      	movs	r3, #18
 8007314:	920b      	str	r2, [sp, #44]	; 0x2c
 8007316:	e7aa      	b.n	800726e <_dtoa_r+0x246>
 8007318:	2301      	movs	r3, #1
 800731a:	930a      	str	r3, [sp, #40]	; 0x28
 800731c:	e7f4      	b.n	8007308 <_dtoa_r+0x2e0>
 800731e:	2301      	movs	r3, #1
 8007320:	9302      	str	r3, [sp, #8]
 8007322:	4699      	mov	r9, r3
 8007324:	461a      	mov	r2, r3
 8007326:	e7f5      	b.n	8007314 <_dtoa_r+0x2ec>
 8007328:	3101      	adds	r1, #1
 800732a:	6071      	str	r1, [r6, #4]
 800732c:	0052      	lsls	r2, r2, #1
 800732e:	e7a2      	b.n	8007276 <_dtoa_r+0x24e>
 8007330:	636f4361 	.word	0x636f4361
 8007334:	3fd287a7 	.word	0x3fd287a7
 8007338:	8b60c8b3 	.word	0x8b60c8b3
 800733c:	3fc68a28 	.word	0x3fc68a28
 8007340:	509f79fb 	.word	0x509f79fb
 8007344:	3fd34413 	.word	0x3fd34413
 8007348:	7ff00000 	.word	0x7ff00000
 800734c:	080097f9 	.word	0x080097f9
 8007350:	3ff80000 	.word	0x3ff80000
 8007354:	08009920 	.word	0x08009920
 8007358:	080098f8 	.word	0x080098f8
 800735c:	08009881 	.word	0x08009881
 8007360:	07f1      	lsls	r1, r6, #31
 8007362:	d508      	bpl.n	8007376 <_dtoa_r+0x34e>
 8007364:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800736c:	f7f9 f944 	bl	80005f8 <__aeabi_dmul>
 8007370:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007374:	3501      	adds	r5, #1
 8007376:	1076      	asrs	r6, r6, #1
 8007378:	3708      	adds	r7, #8
 800737a:	2e00      	cmp	r6, #0
 800737c:	d1f0      	bne.n	8007360 <_dtoa_r+0x338>
 800737e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007382:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007386:	f7f9 fa61 	bl	800084c <__aeabi_ddiv>
 800738a:	e9cd 0100 	strd	r0, r1, [sp]
 800738e:	e01a      	b.n	80073c6 <_dtoa_r+0x39e>
 8007390:	2502      	movs	r5, #2
 8007392:	e7a3      	b.n	80072dc <_dtoa_r+0x2b4>
 8007394:	f000 80a0 	beq.w	80074d8 <_dtoa_r+0x4b0>
 8007398:	f1ca 0600 	rsb	r6, sl, #0
 800739c:	4b9f      	ldr	r3, [pc, #636]	; (800761c <_dtoa_r+0x5f4>)
 800739e:	4fa0      	ldr	r7, [pc, #640]	; (8007620 <_dtoa_r+0x5f8>)
 80073a0:	f006 020f 	and.w	r2, r6, #15
 80073a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80073b0:	f7f9 f922 	bl	80005f8 <__aeabi_dmul>
 80073b4:	e9cd 0100 	strd	r0, r1, [sp]
 80073b8:	1136      	asrs	r6, r6, #4
 80073ba:	2300      	movs	r3, #0
 80073bc:	2502      	movs	r5, #2
 80073be:	2e00      	cmp	r6, #0
 80073c0:	d17f      	bne.n	80074c2 <_dtoa_r+0x49a>
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1e1      	bne.n	800738a <_dtoa_r+0x362>
 80073c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	f000 8087 	beq.w	80074dc <_dtoa_r+0x4b4>
 80073ce:	e9dd 6700 	ldrd	r6, r7, [sp]
 80073d2:	2200      	movs	r2, #0
 80073d4:	4b93      	ldr	r3, [pc, #588]	; (8007624 <_dtoa_r+0x5fc>)
 80073d6:	4630      	mov	r0, r6
 80073d8:	4639      	mov	r1, r7
 80073da:	f7f9 fb7f 	bl	8000adc <__aeabi_dcmplt>
 80073de:	2800      	cmp	r0, #0
 80073e0:	d07c      	beq.n	80074dc <_dtoa_r+0x4b4>
 80073e2:	f1b9 0f00 	cmp.w	r9, #0
 80073e6:	d079      	beq.n	80074dc <_dtoa_r+0x4b4>
 80073e8:	9b02      	ldr	r3, [sp, #8]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	dd35      	ble.n	800745a <_dtoa_r+0x432>
 80073ee:	f10a 33ff 	add.w	r3, sl, #4294967295
 80073f2:	9308      	str	r3, [sp, #32]
 80073f4:	4639      	mov	r1, r7
 80073f6:	2200      	movs	r2, #0
 80073f8:	4b8b      	ldr	r3, [pc, #556]	; (8007628 <_dtoa_r+0x600>)
 80073fa:	4630      	mov	r0, r6
 80073fc:	f7f9 f8fc 	bl	80005f8 <__aeabi_dmul>
 8007400:	e9cd 0100 	strd	r0, r1, [sp]
 8007404:	9f02      	ldr	r7, [sp, #8]
 8007406:	3501      	adds	r5, #1
 8007408:	4628      	mov	r0, r5
 800740a:	f7f9 f88b 	bl	8000524 <__aeabi_i2d>
 800740e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007412:	f7f9 f8f1 	bl	80005f8 <__aeabi_dmul>
 8007416:	2200      	movs	r2, #0
 8007418:	4b84      	ldr	r3, [pc, #528]	; (800762c <_dtoa_r+0x604>)
 800741a:	f7f8 ff37 	bl	800028c <__adddf3>
 800741e:	4605      	mov	r5, r0
 8007420:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007424:	2f00      	cmp	r7, #0
 8007426:	d15d      	bne.n	80074e4 <_dtoa_r+0x4bc>
 8007428:	2200      	movs	r2, #0
 800742a:	4b81      	ldr	r3, [pc, #516]	; (8007630 <_dtoa_r+0x608>)
 800742c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007430:	f7f8 ff2a 	bl	8000288 <__aeabi_dsub>
 8007434:	462a      	mov	r2, r5
 8007436:	4633      	mov	r3, r6
 8007438:	e9cd 0100 	strd	r0, r1, [sp]
 800743c:	f7f9 fb6c 	bl	8000b18 <__aeabi_dcmpgt>
 8007440:	2800      	cmp	r0, #0
 8007442:	f040 8288 	bne.w	8007956 <_dtoa_r+0x92e>
 8007446:	462a      	mov	r2, r5
 8007448:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800744c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007450:	f7f9 fb44 	bl	8000adc <__aeabi_dcmplt>
 8007454:	2800      	cmp	r0, #0
 8007456:	f040 827c 	bne.w	8007952 <_dtoa_r+0x92a>
 800745a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800745e:	e9cd 2300 	strd	r2, r3, [sp]
 8007462:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007464:	2b00      	cmp	r3, #0
 8007466:	f2c0 8150 	blt.w	800770a <_dtoa_r+0x6e2>
 800746a:	f1ba 0f0e 	cmp.w	sl, #14
 800746e:	f300 814c 	bgt.w	800770a <_dtoa_r+0x6e2>
 8007472:	4b6a      	ldr	r3, [pc, #424]	; (800761c <_dtoa_r+0x5f4>)
 8007474:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007478:	ed93 7b00 	vldr	d7, [r3]
 800747c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800747e:	2b00      	cmp	r3, #0
 8007480:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007484:	f280 80d8 	bge.w	8007638 <_dtoa_r+0x610>
 8007488:	f1b9 0f00 	cmp.w	r9, #0
 800748c:	f300 80d4 	bgt.w	8007638 <_dtoa_r+0x610>
 8007490:	f040 825e 	bne.w	8007950 <_dtoa_r+0x928>
 8007494:	2200      	movs	r2, #0
 8007496:	4b66      	ldr	r3, [pc, #408]	; (8007630 <_dtoa_r+0x608>)
 8007498:	ec51 0b17 	vmov	r0, r1, d7
 800749c:	f7f9 f8ac 	bl	80005f8 <__aeabi_dmul>
 80074a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80074a4:	f7f9 fb2e 	bl	8000b04 <__aeabi_dcmpge>
 80074a8:	464f      	mov	r7, r9
 80074aa:	464e      	mov	r6, r9
 80074ac:	2800      	cmp	r0, #0
 80074ae:	f040 8234 	bne.w	800791a <_dtoa_r+0x8f2>
 80074b2:	2331      	movs	r3, #49	; 0x31
 80074b4:	f10b 0501 	add.w	r5, fp, #1
 80074b8:	f88b 3000 	strb.w	r3, [fp]
 80074bc:	f10a 0a01 	add.w	sl, sl, #1
 80074c0:	e22f      	b.n	8007922 <_dtoa_r+0x8fa>
 80074c2:	07f2      	lsls	r2, r6, #31
 80074c4:	d505      	bpl.n	80074d2 <_dtoa_r+0x4aa>
 80074c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074ca:	f7f9 f895 	bl	80005f8 <__aeabi_dmul>
 80074ce:	3501      	adds	r5, #1
 80074d0:	2301      	movs	r3, #1
 80074d2:	1076      	asrs	r6, r6, #1
 80074d4:	3708      	adds	r7, #8
 80074d6:	e772      	b.n	80073be <_dtoa_r+0x396>
 80074d8:	2502      	movs	r5, #2
 80074da:	e774      	b.n	80073c6 <_dtoa_r+0x39e>
 80074dc:	f8cd a020 	str.w	sl, [sp, #32]
 80074e0:	464f      	mov	r7, r9
 80074e2:	e791      	b.n	8007408 <_dtoa_r+0x3e0>
 80074e4:	4b4d      	ldr	r3, [pc, #308]	; (800761c <_dtoa_r+0x5f4>)
 80074e6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80074ea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80074ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d047      	beq.n	8007584 <_dtoa_r+0x55c>
 80074f4:	4602      	mov	r2, r0
 80074f6:	460b      	mov	r3, r1
 80074f8:	2000      	movs	r0, #0
 80074fa:	494e      	ldr	r1, [pc, #312]	; (8007634 <_dtoa_r+0x60c>)
 80074fc:	f7f9 f9a6 	bl	800084c <__aeabi_ddiv>
 8007500:	462a      	mov	r2, r5
 8007502:	4633      	mov	r3, r6
 8007504:	f7f8 fec0 	bl	8000288 <__aeabi_dsub>
 8007508:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800750c:	465d      	mov	r5, fp
 800750e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007512:	f7f9 fb21 	bl	8000b58 <__aeabi_d2iz>
 8007516:	4606      	mov	r6, r0
 8007518:	f7f9 f804 	bl	8000524 <__aeabi_i2d>
 800751c:	4602      	mov	r2, r0
 800751e:	460b      	mov	r3, r1
 8007520:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007524:	f7f8 feb0 	bl	8000288 <__aeabi_dsub>
 8007528:	3630      	adds	r6, #48	; 0x30
 800752a:	f805 6b01 	strb.w	r6, [r5], #1
 800752e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007532:	e9cd 0100 	strd	r0, r1, [sp]
 8007536:	f7f9 fad1 	bl	8000adc <__aeabi_dcmplt>
 800753a:	2800      	cmp	r0, #0
 800753c:	d163      	bne.n	8007606 <_dtoa_r+0x5de>
 800753e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007542:	2000      	movs	r0, #0
 8007544:	4937      	ldr	r1, [pc, #220]	; (8007624 <_dtoa_r+0x5fc>)
 8007546:	f7f8 fe9f 	bl	8000288 <__aeabi_dsub>
 800754a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800754e:	f7f9 fac5 	bl	8000adc <__aeabi_dcmplt>
 8007552:	2800      	cmp	r0, #0
 8007554:	f040 80b7 	bne.w	80076c6 <_dtoa_r+0x69e>
 8007558:	eba5 030b 	sub.w	r3, r5, fp
 800755c:	429f      	cmp	r7, r3
 800755e:	f77f af7c 	ble.w	800745a <_dtoa_r+0x432>
 8007562:	2200      	movs	r2, #0
 8007564:	4b30      	ldr	r3, [pc, #192]	; (8007628 <_dtoa_r+0x600>)
 8007566:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800756a:	f7f9 f845 	bl	80005f8 <__aeabi_dmul>
 800756e:	2200      	movs	r2, #0
 8007570:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007574:	4b2c      	ldr	r3, [pc, #176]	; (8007628 <_dtoa_r+0x600>)
 8007576:	e9dd 0100 	ldrd	r0, r1, [sp]
 800757a:	f7f9 f83d 	bl	80005f8 <__aeabi_dmul>
 800757e:	e9cd 0100 	strd	r0, r1, [sp]
 8007582:	e7c4      	b.n	800750e <_dtoa_r+0x4e6>
 8007584:	462a      	mov	r2, r5
 8007586:	4633      	mov	r3, r6
 8007588:	f7f9 f836 	bl	80005f8 <__aeabi_dmul>
 800758c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007590:	eb0b 0507 	add.w	r5, fp, r7
 8007594:	465e      	mov	r6, fp
 8007596:	e9dd 0100 	ldrd	r0, r1, [sp]
 800759a:	f7f9 fadd 	bl	8000b58 <__aeabi_d2iz>
 800759e:	4607      	mov	r7, r0
 80075a0:	f7f8 ffc0 	bl	8000524 <__aeabi_i2d>
 80075a4:	3730      	adds	r7, #48	; 0x30
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075ae:	f7f8 fe6b 	bl	8000288 <__aeabi_dsub>
 80075b2:	f806 7b01 	strb.w	r7, [r6], #1
 80075b6:	42ae      	cmp	r6, r5
 80075b8:	e9cd 0100 	strd	r0, r1, [sp]
 80075bc:	f04f 0200 	mov.w	r2, #0
 80075c0:	d126      	bne.n	8007610 <_dtoa_r+0x5e8>
 80075c2:	4b1c      	ldr	r3, [pc, #112]	; (8007634 <_dtoa_r+0x60c>)
 80075c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80075c8:	f7f8 fe60 	bl	800028c <__adddf3>
 80075cc:	4602      	mov	r2, r0
 80075ce:	460b      	mov	r3, r1
 80075d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075d4:	f7f9 faa0 	bl	8000b18 <__aeabi_dcmpgt>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d174      	bne.n	80076c6 <_dtoa_r+0x69e>
 80075dc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80075e0:	2000      	movs	r0, #0
 80075e2:	4914      	ldr	r1, [pc, #80]	; (8007634 <_dtoa_r+0x60c>)
 80075e4:	f7f8 fe50 	bl	8000288 <__aeabi_dsub>
 80075e8:	4602      	mov	r2, r0
 80075ea:	460b      	mov	r3, r1
 80075ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80075f0:	f7f9 fa74 	bl	8000adc <__aeabi_dcmplt>
 80075f4:	2800      	cmp	r0, #0
 80075f6:	f43f af30 	beq.w	800745a <_dtoa_r+0x432>
 80075fa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075fe:	2b30      	cmp	r3, #48	; 0x30
 8007600:	f105 32ff 	add.w	r2, r5, #4294967295
 8007604:	d002      	beq.n	800760c <_dtoa_r+0x5e4>
 8007606:	f8dd a020 	ldr.w	sl, [sp, #32]
 800760a:	e04a      	b.n	80076a2 <_dtoa_r+0x67a>
 800760c:	4615      	mov	r5, r2
 800760e:	e7f4      	b.n	80075fa <_dtoa_r+0x5d2>
 8007610:	4b05      	ldr	r3, [pc, #20]	; (8007628 <_dtoa_r+0x600>)
 8007612:	f7f8 fff1 	bl	80005f8 <__aeabi_dmul>
 8007616:	e9cd 0100 	strd	r0, r1, [sp]
 800761a:	e7bc      	b.n	8007596 <_dtoa_r+0x56e>
 800761c:	08009920 	.word	0x08009920
 8007620:	080098f8 	.word	0x080098f8
 8007624:	3ff00000 	.word	0x3ff00000
 8007628:	40240000 	.word	0x40240000
 800762c:	401c0000 	.word	0x401c0000
 8007630:	40140000 	.word	0x40140000
 8007634:	3fe00000 	.word	0x3fe00000
 8007638:	e9dd 6700 	ldrd	r6, r7, [sp]
 800763c:	465d      	mov	r5, fp
 800763e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007642:	4630      	mov	r0, r6
 8007644:	4639      	mov	r1, r7
 8007646:	f7f9 f901 	bl	800084c <__aeabi_ddiv>
 800764a:	f7f9 fa85 	bl	8000b58 <__aeabi_d2iz>
 800764e:	4680      	mov	r8, r0
 8007650:	f7f8 ff68 	bl	8000524 <__aeabi_i2d>
 8007654:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007658:	f7f8 ffce 	bl	80005f8 <__aeabi_dmul>
 800765c:	4602      	mov	r2, r0
 800765e:	460b      	mov	r3, r1
 8007660:	4630      	mov	r0, r6
 8007662:	4639      	mov	r1, r7
 8007664:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007668:	f7f8 fe0e 	bl	8000288 <__aeabi_dsub>
 800766c:	f805 6b01 	strb.w	r6, [r5], #1
 8007670:	eba5 060b 	sub.w	r6, r5, fp
 8007674:	45b1      	cmp	r9, r6
 8007676:	4602      	mov	r2, r0
 8007678:	460b      	mov	r3, r1
 800767a:	d139      	bne.n	80076f0 <_dtoa_r+0x6c8>
 800767c:	f7f8 fe06 	bl	800028c <__adddf3>
 8007680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007684:	4606      	mov	r6, r0
 8007686:	460f      	mov	r7, r1
 8007688:	f7f9 fa46 	bl	8000b18 <__aeabi_dcmpgt>
 800768c:	b9c8      	cbnz	r0, 80076c2 <_dtoa_r+0x69a>
 800768e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007692:	4630      	mov	r0, r6
 8007694:	4639      	mov	r1, r7
 8007696:	f7f9 fa17 	bl	8000ac8 <__aeabi_dcmpeq>
 800769a:	b110      	cbz	r0, 80076a2 <_dtoa_r+0x67a>
 800769c:	f018 0f01 	tst.w	r8, #1
 80076a0:	d10f      	bne.n	80076c2 <_dtoa_r+0x69a>
 80076a2:	9904      	ldr	r1, [sp, #16]
 80076a4:	4620      	mov	r0, r4
 80076a6:	f000 ffe8 	bl	800867a <_Bfree>
 80076aa:	2300      	movs	r3, #0
 80076ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076ae:	702b      	strb	r3, [r5, #0]
 80076b0:	f10a 0301 	add.w	r3, sl, #1
 80076b4:	6013      	str	r3, [r2, #0]
 80076b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 8241 	beq.w	8007b40 <_dtoa_r+0xb18>
 80076be:	601d      	str	r5, [r3, #0]
 80076c0:	e23e      	b.n	8007b40 <_dtoa_r+0xb18>
 80076c2:	f8cd a020 	str.w	sl, [sp, #32]
 80076c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80076ca:	2a39      	cmp	r2, #57	; 0x39
 80076cc:	f105 33ff 	add.w	r3, r5, #4294967295
 80076d0:	d108      	bne.n	80076e4 <_dtoa_r+0x6bc>
 80076d2:	459b      	cmp	fp, r3
 80076d4:	d10a      	bne.n	80076ec <_dtoa_r+0x6c4>
 80076d6:	9b08      	ldr	r3, [sp, #32]
 80076d8:	3301      	adds	r3, #1
 80076da:	9308      	str	r3, [sp, #32]
 80076dc:	2330      	movs	r3, #48	; 0x30
 80076de:	f88b 3000 	strb.w	r3, [fp]
 80076e2:	465b      	mov	r3, fp
 80076e4:	781a      	ldrb	r2, [r3, #0]
 80076e6:	3201      	adds	r2, #1
 80076e8:	701a      	strb	r2, [r3, #0]
 80076ea:	e78c      	b.n	8007606 <_dtoa_r+0x5de>
 80076ec:	461d      	mov	r5, r3
 80076ee:	e7ea      	b.n	80076c6 <_dtoa_r+0x69e>
 80076f0:	2200      	movs	r2, #0
 80076f2:	4b9b      	ldr	r3, [pc, #620]	; (8007960 <_dtoa_r+0x938>)
 80076f4:	f7f8 ff80 	bl	80005f8 <__aeabi_dmul>
 80076f8:	2200      	movs	r2, #0
 80076fa:	2300      	movs	r3, #0
 80076fc:	4606      	mov	r6, r0
 80076fe:	460f      	mov	r7, r1
 8007700:	f7f9 f9e2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007704:	2800      	cmp	r0, #0
 8007706:	d09a      	beq.n	800763e <_dtoa_r+0x616>
 8007708:	e7cb      	b.n	80076a2 <_dtoa_r+0x67a>
 800770a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800770c:	2a00      	cmp	r2, #0
 800770e:	f000 808b 	beq.w	8007828 <_dtoa_r+0x800>
 8007712:	9a06      	ldr	r2, [sp, #24]
 8007714:	2a01      	cmp	r2, #1
 8007716:	dc6e      	bgt.n	80077f6 <_dtoa_r+0x7ce>
 8007718:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800771a:	2a00      	cmp	r2, #0
 800771c:	d067      	beq.n	80077ee <_dtoa_r+0x7c6>
 800771e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007722:	9f07      	ldr	r7, [sp, #28]
 8007724:	9d05      	ldr	r5, [sp, #20]
 8007726:	9a05      	ldr	r2, [sp, #20]
 8007728:	2101      	movs	r1, #1
 800772a:	441a      	add	r2, r3
 800772c:	4620      	mov	r0, r4
 800772e:	9205      	str	r2, [sp, #20]
 8007730:	4498      	add	r8, r3
 8007732:	f001 f880 	bl	8008836 <__i2b>
 8007736:	4606      	mov	r6, r0
 8007738:	2d00      	cmp	r5, #0
 800773a:	dd0c      	ble.n	8007756 <_dtoa_r+0x72e>
 800773c:	f1b8 0f00 	cmp.w	r8, #0
 8007740:	dd09      	ble.n	8007756 <_dtoa_r+0x72e>
 8007742:	4545      	cmp	r5, r8
 8007744:	9a05      	ldr	r2, [sp, #20]
 8007746:	462b      	mov	r3, r5
 8007748:	bfa8      	it	ge
 800774a:	4643      	movge	r3, r8
 800774c:	1ad2      	subs	r2, r2, r3
 800774e:	9205      	str	r2, [sp, #20]
 8007750:	1aed      	subs	r5, r5, r3
 8007752:	eba8 0803 	sub.w	r8, r8, r3
 8007756:	9b07      	ldr	r3, [sp, #28]
 8007758:	b1eb      	cbz	r3, 8007796 <_dtoa_r+0x76e>
 800775a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800775c:	2b00      	cmp	r3, #0
 800775e:	d067      	beq.n	8007830 <_dtoa_r+0x808>
 8007760:	b18f      	cbz	r7, 8007786 <_dtoa_r+0x75e>
 8007762:	4631      	mov	r1, r6
 8007764:	463a      	mov	r2, r7
 8007766:	4620      	mov	r0, r4
 8007768:	f001 f904 	bl	8008974 <__pow5mult>
 800776c:	9a04      	ldr	r2, [sp, #16]
 800776e:	4601      	mov	r1, r0
 8007770:	4606      	mov	r6, r0
 8007772:	4620      	mov	r0, r4
 8007774:	f001 f868 	bl	8008848 <__multiply>
 8007778:	9904      	ldr	r1, [sp, #16]
 800777a:	9008      	str	r0, [sp, #32]
 800777c:	4620      	mov	r0, r4
 800777e:	f000 ff7c 	bl	800867a <_Bfree>
 8007782:	9b08      	ldr	r3, [sp, #32]
 8007784:	9304      	str	r3, [sp, #16]
 8007786:	9b07      	ldr	r3, [sp, #28]
 8007788:	1bda      	subs	r2, r3, r7
 800778a:	d004      	beq.n	8007796 <_dtoa_r+0x76e>
 800778c:	9904      	ldr	r1, [sp, #16]
 800778e:	4620      	mov	r0, r4
 8007790:	f001 f8f0 	bl	8008974 <__pow5mult>
 8007794:	9004      	str	r0, [sp, #16]
 8007796:	2101      	movs	r1, #1
 8007798:	4620      	mov	r0, r4
 800779a:	f001 f84c 	bl	8008836 <__i2b>
 800779e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077a0:	4607      	mov	r7, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	f000 81d0 	beq.w	8007b48 <_dtoa_r+0xb20>
 80077a8:	461a      	mov	r2, r3
 80077aa:	4601      	mov	r1, r0
 80077ac:	4620      	mov	r0, r4
 80077ae:	f001 f8e1 	bl	8008974 <__pow5mult>
 80077b2:	9b06      	ldr	r3, [sp, #24]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	4607      	mov	r7, r0
 80077b8:	dc40      	bgt.n	800783c <_dtoa_r+0x814>
 80077ba:	9b00      	ldr	r3, [sp, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d139      	bne.n	8007834 <_dtoa_r+0x80c>
 80077c0:	9b01      	ldr	r3, [sp, #4]
 80077c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d136      	bne.n	8007838 <_dtoa_r+0x810>
 80077ca:	9b01      	ldr	r3, [sp, #4]
 80077cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80077d0:	0d1b      	lsrs	r3, r3, #20
 80077d2:	051b      	lsls	r3, r3, #20
 80077d4:	b12b      	cbz	r3, 80077e2 <_dtoa_r+0x7ba>
 80077d6:	9b05      	ldr	r3, [sp, #20]
 80077d8:	3301      	adds	r3, #1
 80077da:	9305      	str	r3, [sp, #20]
 80077dc:	f108 0801 	add.w	r8, r8, #1
 80077e0:	2301      	movs	r3, #1
 80077e2:	9307      	str	r3, [sp, #28]
 80077e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d12a      	bne.n	8007840 <_dtoa_r+0x818>
 80077ea:	2001      	movs	r0, #1
 80077ec:	e030      	b.n	8007850 <_dtoa_r+0x828>
 80077ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80077f4:	e795      	b.n	8007722 <_dtoa_r+0x6fa>
 80077f6:	9b07      	ldr	r3, [sp, #28]
 80077f8:	f109 37ff 	add.w	r7, r9, #4294967295
 80077fc:	42bb      	cmp	r3, r7
 80077fe:	bfbf      	itttt	lt
 8007800:	9b07      	ldrlt	r3, [sp, #28]
 8007802:	9707      	strlt	r7, [sp, #28]
 8007804:	1afa      	sublt	r2, r7, r3
 8007806:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007808:	bfbb      	ittet	lt
 800780a:	189b      	addlt	r3, r3, r2
 800780c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800780e:	1bdf      	subge	r7, r3, r7
 8007810:	2700      	movlt	r7, #0
 8007812:	f1b9 0f00 	cmp.w	r9, #0
 8007816:	bfb5      	itete	lt
 8007818:	9b05      	ldrlt	r3, [sp, #20]
 800781a:	9d05      	ldrge	r5, [sp, #20]
 800781c:	eba3 0509 	sublt.w	r5, r3, r9
 8007820:	464b      	movge	r3, r9
 8007822:	bfb8      	it	lt
 8007824:	2300      	movlt	r3, #0
 8007826:	e77e      	b.n	8007726 <_dtoa_r+0x6fe>
 8007828:	9f07      	ldr	r7, [sp, #28]
 800782a:	9d05      	ldr	r5, [sp, #20]
 800782c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800782e:	e783      	b.n	8007738 <_dtoa_r+0x710>
 8007830:	9a07      	ldr	r2, [sp, #28]
 8007832:	e7ab      	b.n	800778c <_dtoa_r+0x764>
 8007834:	2300      	movs	r3, #0
 8007836:	e7d4      	b.n	80077e2 <_dtoa_r+0x7ba>
 8007838:	9b00      	ldr	r3, [sp, #0]
 800783a:	e7d2      	b.n	80077e2 <_dtoa_r+0x7ba>
 800783c:	2300      	movs	r3, #0
 800783e:	9307      	str	r3, [sp, #28]
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007846:	6918      	ldr	r0, [r3, #16]
 8007848:	f000 ffa7 	bl	800879a <__hi0bits>
 800784c:	f1c0 0020 	rsb	r0, r0, #32
 8007850:	4440      	add	r0, r8
 8007852:	f010 001f 	ands.w	r0, r0, #31
 8007856:	d047      	beq.n	80078e8 <_dtoa_r+0x8c0>
 8007858:	f1c0 0320 	rsb	r3, r0, #32
 800785c:	2b04      	cmp	r3, #4
 800785e:	dd3b      	ble.n	80078d8 <_dtoa_r+0x8b0>
 8007860:	9b05      	ldr	r3, [sp, #20]
 8007862:	f1c0 001c 	rsb	r0, r0, #28
 8007866:	4403      	add	r3, r0
 8007868:	9305      	str	r3, [sp, #20]
 800786a:	4405      	add	r5, r0
 800786c:	4480      	add	r8, r0
 800786e:	9b05      	ldr	r3, [sp, #20]
 8007870:	2b00      	cmp	r3, #0
 8007872:	dd05      	ble.n	8007880 <_dtoa_r+0x858>
 8007874:	461a      	mov	r2, r3
 8007876:	9904      	ldr	r1, [sp, #16]
 8007878:	4620      	mov	r0, r4
 800787a:	f001 f8c9 	bl	8008a10 <__lshift>
 800787e:	9004      	str	r0, [sp, #16]
 8007880:	f1b8 0f00 	cmp.w	r8, #0
 8007884:	dd05      	ble.n	8007892 <_dtoa_r+0x86a>
 8007886:	4639      	mov	r1, r7
 8007888:	4642      	mov	r2, r8
 800788a:	4620      	mov	r0, r4
 800788c:	f001 f8c0 	bl	8008a10 <__lshift>
 8007890:	4607      	mov	r7, r0
 8007892:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007894:	b353      	cbz	r3, 80078ec <_dtoa_r+0x8c4>
 8007896:	4639      	mov	r1, r7
 8007898:	9804      	ldr	r0, [sp, #16]
 800789a:	f001 f90d 	bl	8008ab8 <__mcmp>
 800789e:	2800      	cmp	r0, #0
 80078a0:	da24      	bge.n	80078ec <_dtoa_r+0x8c4>
 80078a2:	2300      	movs	r3, #0
 80078a4:	220a      	movs	r2, #10
 80078a6:	9904      	ldr	r1, [sp, #16]
 80078a8:	4620      	mov	r0, r4
 80078aa:	f000 fefd 	bl	80086a8 <__multadd>
 80078ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078b0:	9004      	str	r0, [sp, #16]
 80078b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 814d 	beq.w	8007b56 <_dtoa_r+0xb2e>
 80078bc:	2300      	movs	r3, #0
 80078be:	4631      	mov	r1, r6
 80078c0:	220a      	movs	r2, #10
 80078c2:	4620      	mov	r0, r4
 80078c4:	f000 fef0 	bl	80086a8 <__multadd>
 80078c8:	9b02      	ldr	r3, [sp, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	4606      	mov	r6, r0
 80078ce:	dc4f      	bgt.n	8007970 <_dtoa_r+0x948>
 80078d0:	9b06      	ldr	r3, [sp, #24]
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	dd4c      	ble.n	8007970 <_dtoa_r+0x948>
 80078d6:	e011      	b.n	80078fc <_dtoa_r+0x8d4>
 80078d8:	d0c9      	beq.n	800786e <_dtoa_r+0x846>
 80078da:	9a05      	ldr	r2, [sp, #20]
 80078dc:	331c      	adds	r3, #28
 80078de:	441a      	add	r2, r3
 80078e0:	9205      	str	r2, [sp, #20]
 80078e2:	441d      	add	r5, r3
 80078e4:	4498      	add	r8, r3
 80078e6:	e7c2      	b.n	800786e <_dtoa_r+0x846>
 80078e8:	4603      	mov	r3, r0
 80078ea:	e7f6      	b.n	80078da <_dtoa_r+0x8b2>
 80078ec:	f1b9 0f00 	cmp.w	r9, #0
 80078f0:	dc38      	bgt.n	8007964 <_dtoa_r+0x93c>
 80078f2:	9b06      	ldr	r3, [sp, #24]
 80078f4:	2b02      	cmp	r3, #2
 80078f6:	dd35      	ble.n	8007964 <_dtoa_r+0x93c>
 80078f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80078fc:	9b02      	ldr	r3, [sp, #8]
 80078fe:	b963      	cbnz	r3, 800791a <_dtoa_r+0x8f2>
 8007900:	4639      	mov	r1, r7
 8007902:	2205      	movs	r2, #5
 8007904:	4620      	mov	r0, r4
 8007906:	f000 fecf 	bl	80086a8 <__multadd>
 800790a:	4601      	mov	r1, r0
 800790c:	4607      	mov	r7, r0
 800790e:	9804      	ldr	r0, [sp, #16]
 8007910:	f001 f8d2 	bl	8008ab8 <__mcmp>
 8007914:	2800      	cmp	r0, #0
 8007916:	f73f adcc 	bgt.w	80074b2 <_dtoa_r+0x48a>
 800791a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800791c:	465d      	mov	r5, fp
 800791e:	ea6f 0a03 	mvn.w	sl, r3
 8007922:	f04f 0900 	mov.w	r9, #0
 8007926:	4639      	mov	r1, r7
 8007928:	4620      	mov	r0, r4
 800792a:	f000 fea6 	bl	800867a <_Bfree>
 800792e:	2e00      	cmp	r6, #0
 8007930:	f43f aeb7 	beq.w	80076a2 <_dtoa_r+0x67a>
 8007934:	f1b9 0f00 	cmp.w	r9, #0
 8007938:	d005      	beq.n	8007946 <_dtoa_r+0x91e>
 800793a:	45b1      	cmp	r9, r6
 800793c:	d003      	beq.n	8007946 <_dtoa_r+0x91e>
 800793e:	4649      	mov	r1, r9
 8007940:	4620      	mov	r0, r4
 8007942:	f000 fe9a 	bl	800867a <_Bfree>
 8007946:	4631      	mov	r1, r6
 8007948:	4620      	mov	r0, r4
 800794a:	f000 fe96 	bl	800867a <_Bfree>
 800794e:	e6a8      	b.n	80076a2 <_dtoa_r+0x67a>
 8007950:	2700      	movs	r7, #0
 8007952:	463e      	mov	r6, r7
 8007954:	e7e1      	b.n	800791a <_dtoa_r+0x8f2>
 8007956:	f8dd a020 	ldr.w	sl, [sp, #32]
 800795a:	463e      	mov	r6, r7
 800795c:	e5a9      	b.n	80074b2 <_dtoa_r+0x48a>
 800795e:	bf00      	nop
 8007960:	40240000 	.word	0x40240000
 8007964:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007966:	f8cd 9008 	str.w	r9, [sp, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 80fa 	beq.w	8007b64 <_dtoa_r+0xb3c>
 8007970:	2d00      	cmp	r5, #0
 8007972:	dd05      	ble.n	8007980 <_dtoa_r+0x958>
 8007974:	4631      	mov	r1, r6
 8007976:	462a      	mov	r2, r5
 8007978:	4620      	mov	r0, r4
 800797a:	f001 f849 	bl	8008a10 <__lshift>
 800797e:	4606      	mov	r6, r0
 8007980:	9b07      	ldr	r3, [sp, #28]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d04c      	beq.n	8007a20 <_dtoa_r+0x9f8>
 8007986:	6871      	ldr	r1, [r6, #4]
 8007988:	4620      	mov	r0, r4
 800798a:	f000 fe42 	bl	8008612 <_Balloc>
 800798e:	6932      	ldr	r2, [r6, #16]
 8007990:	3202      	adds	r2, #2
 8007992:	4605      	mov	r5, r0
 8007994:	0092      	lsls	r2, r2, #2
 8007996:	f106 010c 	add.w	r1, r6, #12
 800799a:	300c      	adds	r0, #12
 800799c:	f000 fe2e 	bl	80085fc <memcpy>
 80079a0:	2201      	movs	r2, #1
 80079a2:	4629      	mov	r1, r5
 80079a4:	4620      	mov	r0, r4
 80079a6:	f001 f833 	bl	8008a10 <__lshift>
 80079aa:	9b00      	ldr	r3, [sp, #0]
 80079ac:	f8cd b014 	str.w	fp, [sp, #20]
 80079b0:	f003 0301 	and.w	r3, r3, #1
 80079b4:	46b1      	mov	r9, r6
 80079b6:	9307      	str	r3, [sp, #28]
 80079b8:	4606      	mov	r6, r0
 80079ba:	4639      	mov	r1, r7
 80079bc:	9804      	ldr	r0, [sp, #16]
 80079be:	f7ff faa5 	bl	8006f0c <quorem>
 80079c2:	4649      	mov	r1, r9
 80079c4:	4605      	mov	r5, r0
 80079c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80079ca:	9804      	ldr	r0, [sp, #16]
 80079cc:	f001 f874 	bl	8008ab8 <__mcmp>
 80079d0:	4632      	mov	r2, r6
 80079d2:	9000      	str	r0, [sp, #0]
 80079d4:	4639      	mov	r1, r7
 80079d6:	4620      	mov	r0, r4
 80079d8:	f001 f888 	bl	8008aec <__mdiff>
 80079dc:	68c3      	ldr	r3, [r0, #12]
 80079de:	4602      	mov	r2, r0
 80079e0:	bb03      	cbnz	r3, 8007a24 <_dtoa_r+0x9fc>
 80079e2:	4601      	mov	r1, r0
 80079e4:	9008      	str	r0, [sp, #32]
 80079e6:	9804      	ldr	r0, [sp, #16]
 80079e8:	f001 f866 	bl	8008ab8 <__mcmp>
 80079ec:	9a08      	ldr	r2, [sp, #32]
 80079ee:	4603      	mov	r3, r0
 80079f0:	4611      	mov	r1, r2
 80079f2:	4620      	mov	r0, r4
 80079f4:	9308      	str	r3, [sp, #32]
 80079f6:	f000 fe40 	bl	800867a <_Bfree>
 80079fa:	9b08      	ldr	r3, [sp, #32]
 80079fc:	b9a3      	cbnz	r3, 8007a28 <_dtoa_r+0xa00>
 80079fe:	9a06      	ldr	r2, [sp, #24]
 8007a00:	b992      	cbnz	r2, 8007a28 <_dtoa_r+0xa00>
 8007a02:	9a07      	ldr	r2, [sp, #28]
 8007a04:	b982      	cbnz	r2, 8007a28 <_dtoa_r+0xa00>
 8007a06:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007a0a:	d029      	beq.n	8007a60 <_dtoa_r+0xa38>
 8007a0c:	9b00      	ldr	r3, [sp, #0]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	dd01      	ble.n	8007a16 <_dtoa_r+0x9ee>
 8007a12:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007a16:	9b05      	ldr	r3, [sp, #20]
 8007a18:	1c5d      	adds	r5, r3, #1
 8007a1a:	f883 8000 	strb.w	r8, [r3]
 8007a1e:	e782      	b.n	8007926 <_dtoa_r+0x8fe>
 8007a20:	4630      	mov	r0, r6
 8007a22:	e7c2      	b.n	80079aa <_dtoa_r+0x982>
 8007a24:	2301      	movs	r3, #1
 8007a26:	e7e3      	b.n	80079f0 <_dtoa_r+0x9c8>
 8007a28:	9a00      	ldr	r2, [sp, #0]
 8007a2a:	2a00      	cmp	r2, #0
 8007a2c:	db04      	blt.n	8007a38 <_dtoa_r+0xa10>
 8007a2e:	d125      	bne.n	8007a7c <_dtoa_r+0xa54>
 8007a30:	9a06      	ldr	r2, [sp, #24]
 8007a32:	bb1a      	cbnz	r2, 8007a7c <_dtoa_r+0xa54>
 8007a34:	9a07      	ldr	r2, [sp, #28]
 8007a36:	bb0a      	cbnz	r2, 8007a7c <_dtoa_r+0xa54>
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	ddec      	ble.n	8007a16 <_dtoa_r+0x9ee>
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	9904      	ldr	r1, [sp, #16]
 8007a40:	4620      	mov	r0, r4
 8007a42:	f000 ffe5 	bl	8008a10 <__lshift>
 8007a46:	4639      	mov	r1, r7
 8007a48:	9004      	str	r0, [sp, #16]
 8007a4a:	f001 f835 	bl	8008ab8 <__mcmp>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	dc03      	bgt.n	8007a5a <_dtoa_r+0xa32>
 8007a52:	d1e0      	bne.n	8007a16 <_dtoa_r+0x9ee>
 8007a54:	f018 0f01 	tst.w	r8, #1
 8007a58:	d0dd      	beq.n	8007a16 <_dtoa_r+0x9ee>
 8007a5a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007a5e:	d1d8      	bne.n	8007a12 <_dtoa_r+0x9ea>
 8007a60:	9b05      	ldr	r3, [sp, #20]
 8007a62:	9a05      	ldr	r2, [sp, #20]
 8007a64:	1c5d      	adds	r5, r3, #1
 8007a66:	2339      	movs	r3, #57	; 0x39
 8007a68:	7013      	strb	r3, [r2, #0]
 8007a6a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a6e:	2b39      	cmp	r3, #57	; 0x39
 8007a70:	f105 32ff 	add.w	r2, r5, #4294967295
 8007a74:	d04f      	beq.n	8007b16 <_dtoa_r+0xaee>
 8007a76:	3301      	adds	r3, #1
 8007a78:	7013      	strb	r3, [r2, #0]
 8007a7a:	e754      	b.n	8007926 <_dtoa_r+0x8fe>
 8007a7c:	9a05      	ldr	r2, [sp, #20]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f102 0501 	add.w	r5, r2, #1
 8007a84:	dd06      	ble.n	8007a94 <_dtoa_r+0xa6c>
 8007a86:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007a8a:	d0e9      	beq.n	8007a60 <_dtoa_r+0xa38>
 8007a8c:	f108 0801 	add.w	r8, r8, #1
 8007a90:	9b05      	ldr	r3, [sp, #20]
 8007a92:	e7c2      	b.n	8007a1a <_dtoa_r+0x9f2>
 8007a94:	9a02      	ldr	r2, [sp, #8]
 8007a96:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007a9a:	eba5 030b 	sub.w	r3, r5, fp
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d021      	beq.n	8007ae6 <_dtoa_r+0xabe>
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	220a      	movs	r2, #10
 8007aa6:	9904      	ldr	r1, [sp, #16]
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f000 fdfd 	bl	80086a8 <__multadd>
 8007aae:	45b1      	cmp	r9, r6
 8007ab0:	9004      	str	r0, [sp, #16]
 8007ab2:	f04f 0300 	mov.w	r3, #0
 8007ab6:	f04f 020a 	mov.w	r2, #10
 8007aba:	4649      	mov	r1, r9
 8007abc:	4620      	mov	r0, r4
 8007abe:	d105      	bne.n	8007acc <_dtoa_r+0xaa4>
 8007ac0:	f000 fdf2 	bl	80086a8 <__multadd>
 8007ac4:	4681      	mov	r9, r0
 8007ac6:	4606      	mov	r6, r0
 8007ac8:	9505      	str	r5, [sp, #20]
 8007aca:	e776      	b.n	80079ba <_dtoa_r+0x992>
 8007acc:	f000 fdec 	bl	80086a8 <__multadd>
 8007ad0:	4631      	mov	r1, r6
 8007ad2:	4681      	mov	r9, r0
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	220a      	movs	r2, #10
 8007ad8:	4620      	mov	r0, r4
 8007ada:	f000 fde5 	bl	80086a8 <__multadd>
 8007ade:	4606      	mov	r6, r0
 8007ae0:	e7f2      	b.n	8007ac8 <_dtoa_r+0xaa0>
 8007ae2:	f04f 0900 	mov.w	r9, #0
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	9904      	ldr	r1, [sp, #16]
 8007aea:	4620      	mov	r0, r4
 8007aec:	f000 ff90 	bl	8008a10 <__lshift>
 8007af0:	4639      	mov	r1, r7
 8007af2:	9004      	str	r0, [sp, #16]
 8007af4:	f000 ffe0 	bl	8008ab8 <__mcmp>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	dcb6      	bgt.n	8007a6a <_dtoa_r+0xa42>
 8007afc:	d102      	bne.n	8007b04 <_dtoa_r+0xadc>
 8007afe:	f018 0f01 	tst.w	r8, #1
 8007b02:	d1b2      	bne.n	8007a6a <_dtoa_r+0xa42>
 8007b04:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007b08:	2b30      	cmp	r3, #48	; 0x30
 8007b0a:	f105 32ff 	add.w	r2, r5, #4294967295
 8007b0e:	f47f af0a 	bne.w	8007926 <_dtoa_r+0x8fe>
 8007b12:	4615      	mov	r5, r2
 8007b14:	e7f6      	b.n	8007b04 <_dtoa_r+0xadc>
 8007b16:	4593      	cmp	fp, r2
 8007b18:	d105      	bne.n	8007b26 <_dtoa_r+0xafe>
 8007b1a:	2331      	movs	r3, #49	; 0x31
 8007b1c:	f10a 0a01 	add.w	sl, sl, #1
 8007b20:	f88b 3000 	strb.w	r3, [fp]
 8007b24:	e6ff      	b.n	8007926 <_dtoa_r+0x8fe>
 8007b26:	4615      	mov	r5, r2
 8007b28:	e79f      	b.n	8007a6a <_dtoa_r+0xa42>
 8007b2a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007b90 <_dtoa_r+0xb68>
 8007b2e:	e007      	b.n	8007b40 <_dtoa_r+0xb18>
 8007b30:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b32:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007b94 <_dtoa_r+0xb6c>
 8007b36:	b11b      	cbz	r3, 8007b40 <_dtoa_r+0xb18>
 8007b38:	f10b 0308 	add.w	r3, fp, #8
 8007b3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	4658      	mov	r0, fp
 8007b42:	b017      	add	sp, #92	; 0x5c
 8007b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b48:	9b06      	ldr	r3, [sp, #24]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	f77f ae35 	ble.w	80077ba <_dtoa_r+0x792>
 8007b50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007b52:	9307      	str	r3, [sp, #28]
 8007b54:	e649      	b.n	80077ea <_dtoa_r+0x7c2>
 8007b56:	9b02      	ldr	r3, [sp, #8]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	dc03      	bgt.n	8007b64 <_dtoa_r+0xb3c>
 8007b5c:	9b06      	ldr	r3, [sp, #24]
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	f73f aecc 	bgt.w	80078fc <_dtoa_r+0x8d4>
 8007b64:	465d      	mov	r5, fp
 8007b66:	4639      	mov	r1, r7
 8007b68:	9804      	ldr	r0, [sp, #16]
 8007b6a:	f7ff f9cf 	bl	8006f0c <quorem>
 8007b6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007b72:	f805 8b01 	strb.w	r8, [r5], #1
 8007b76:	9a02      	ldr	r2, [sp, #8]
 8007b78:	eba5 030b 	sub.w	r3, r5, fp
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	ddb0      	ble.n	8007ae2 <_dtoa_r+0xaba>
 8007b80:	2300      	movs	r3, #0
 8007b82:	220a      	movs	r2, #10
 8007b84:	9904      	ldr	r1, [sp, #16]
 8007b86:	4620      	mov	r0, r4
 8007b88:	f000 fd8e 	bl	80086a8 <__multadd>
 8007b8c:	9004      	str	r0, [sp, #16]
 8007b8e:	e7ea      	b.n	8007b66 <_dtoa_r+0xb3e>
 8007b90:	080097f8 	.word	0x080097f8
 8007b94:	08009878 	.word	0x08009878

08007b98 <__sflush_r>:
 8007b98:	898a      	ldrh	r2, [r1, #12]
 8007b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b9e:	4605      	mov	r5, r0
 8007ba0:	0710      	lsls	r0, r2, #28
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	d458      	bmi.n	8007c58 <__sflush_r+0xc0>
 8007ba6:	684b      	ldr	r3, [r1, #4]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	dc05      	bgt.n	8007bb8 <__sflush_r+0x20>
 8007bac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	dc02      	bgt.n	8007bb8 <__sflush_r+0x20>
 8007bb2:	2000      	movs	r0, #0
 8007bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bba:	2e00      	cmp	r6, #0
 8007bbc:	d0f9      	beq.n	8007bb2 <__sflush_r+0x1a>
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007bc4:	682f      	ldr	r7, [r5, #0]
 8007bc6:	6a21      	ldr	r1, [r4, #32]
 8007bc8:	602b      	str	r3, [r5, #0]
 8007bca:	d032      	beq.n	8007c32 <__sflush_r+0x9a>
 8007bcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	075a      	lsls	r2, r3, #29
 8007bd2:	d505      	bpl.n	8007be0 <__sflush_r+0x48>
 8007bd4:	6863      	ldr	r3, [r4, #4]
 8007bd6:	1ac0      	subs	r0, r0, r3
 8007bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bda:	b10b      	cbz	r3, 8007be0 <__sflush_r+0x48>
 8007bdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bde:	1ac0      	subs	r0, r0, r3
 8007be0:	2300      	movs	r3, #0
 8007be2:	4602      	mov	r2, r0
 8007be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007be6:	6a21      	ldr	r1, [r4, #32]
 8007be8:	4628      	mov	r0, r5
 8007bea:	47b0      	blx	r6
 8007bec:	1c43      	adds	r3, r0, #1
 8007bee:	89a3      	ldrh	r3, [r4, #12]
 8007bf0:	d106      	bne.n	8007c00 <__sflush_r+0x68>
 8007bf2:	6829      	ldr	r1, [r5, #0]
 8007bf4:	291d      	cmp	r1, #29
 8007bf6:	d848      	bhi.n	8007c8a <__sflush_r+0xf2>
 8007bf8:	4a29      	ldr	r2, [pc, #164]	; (8007ca0 <__sflush_r+0x108>)
 8007bfa:	40ca      	lsrs	r2, r1
 8007bfc:	07d6      	lsls	r6, r2, #31
 8007bfe:	d544      	bpl.n	8007c8a <__sflush_r+0xf2>
 8007c00:	2200      	movs	r2, #0
 8007c02:	6062      	str	r2, [r4, #4]
 8007c04:	04d9      	lsls	r1, r3, #19
 8007c06:	6922      	ldr	r2, [r4, #16]
 8007c08:	6022      	str	r2, [r4, #0]
 8007c0a:	d504      	bpl.n	8007c16 <__sflush_r+0x7e>
 8007c0c:	1c42      	adds	r2, r0, #1
 8007c0e:	d101      	bne.n	8007c14 <__sflush_r+0x7c>
 8007c10:	682b      	ldr	r3, [r5, #0]
 8007c12:	b903      	cbnz	r3, 8007c16 <__sflush_r+0x7e>
 8007c14:	6560      	str	r0, [r4, #84]	; 0x54
 8007c16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c18:	602f      	str	r7, [r5, #0]
 8007c1a:	2900      	cmp	r1, #0
 8007c1c:	d0c9      	beq.n	8007bb2 <__sflush_r+0x1a>
 8007c1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c22:	4299      	cmp	r1, r3
 8007c24:	d002      	beq.n	8007c2c <__sflush_r+0x94>
 8007c26:	4628      	mov	r0, r5
 8007c28:	f001 f900 	bl	8008e2c <_free_r>
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	6360      	str	r0, [r4, #52]	; 0x34
 8007c30:	e7c0      	b.n	8007bb4 <__sflush_r+0x1c>
 8007c32:	2301      	movs	r3, #1
 8007c34:	4628      	mov	r0, r5
 8007c36:	47b0      	blx	r6
 8007c38:	1c41      	adds	r1, r0, #1
 8007c3a:	d1c8      	bne.n	8007bce <__sflush_r+0x36>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d0c5      	beq.n	8007bce <__sflush_r+0x36>
 8007c42:	2b1d      	cmp	r3, #29
 8007c44:	d001      	beq.n	8007c4a <__sflush_r+0xb2>
 8007c46:	2b16      	cmp	r3, #22
 8007c48:	d101      	bne.n	8007c4e <__sflush_r+0xb6>
 8007c4a:	602f      	str	r7, [r5, #0]
 8007c4c:	e7b1      	b.n	8007bb2 <__sflush_r+0x1a>
 8007c4e:	89a3      	ldrh	r3, [r4, #12]
 8007c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c54:	81a3      	strh	r3, [r4, #12]
 8007c56:	e7ad      	b.n	8007bb4 <__sflush_r+0x1c>
 8007c58:	690f      	ldr	r7, [r1, #16]
 8007c5a:	2f00      	cmp	r7, #0
 8007c5c:	d0a9      	beq.n	8007bb2 <__sflush_r+0x1a>
 8007c5e:	0793      	lsls	r3, r2, #30
 8007c60:	680e      	ldr	r6, [r1, #0]
 8007c62:	bf08      	it	eq
 8007c64:	694b      	ldreq	r3, [r1, #20]
 8007c66:	600f      	str	r7, [r1, #0]
 8007c68:	bf18      	it	ne
 8007c6a:	2300      	movne	r3, #0
 8007c6c:	eba6 0807 	sub.w	r8, r6, r7
 8007c70:	608b      	str	r3, [r1, #8]
 8007c72:	f1b8 0f00 	cmp.w	r8, #0
 8007c76:	dd9c      	ble.n	8007bb2 <__sflush_r+0x1a>
 8007c78:	4643      	mov	r3, r8
 8007c7a:	463a      	mov	r2, r7
 8007c7c:	6a21      	ldr	r1, [r4, #32]
 8007c7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c80:	4628      	mov	r0, r5
 8007c82:	47b0      	blx	r6
 8007c84:	2800      	cmp	r0, #0
 8007c86:	dc06      	bgt.n	8007c96 <__sflush_r+0xfe>
 8007c88:	89a3      	ldrh	r3, [r4, #12]
 8007c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c8e:	81a3      	strh	r3, [r4, #12]
 8007c90:	f04f 30ff 	mov.w	r0, #4294967295
 8007c94:	e78e      	b.n	8007bb4 <__sflush_r+0x1c>
 8007c96:	4407      	add	r7, r0
 8007c98:	eba8 0800 	sub.w	r8, r8, r0
 8007c9c:	e7e9      	b.n	8007c72 <__sflush_r+0xda>
 8007c9e:	bf00      	nop
 8007ca0:	20400001 	.word	0x20400001

08007ca4 <_fflush_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	690b      	ldr	r3, [r1, #16]
 8007ca8:	4605      	mov	r5, r0
 8007caa:	460c      	mov	r4, r1
 8007cac:	b1db      	cbz	r3, 8007ce6 <_fflush_r+0x42>
 8007cae:	b118      	cbz	r0, 8007cb8 <_fflush_r+0x14>
 8007cb0:	6983      	ldr	r3, [r0, #24]
 8007cb2:	b90b      	cbnz	r3, 8007cb8 <_fflush_r+0x14>
 8007cb4:	f000 f860 	bl	8007d78 <__sinit>
 8007cb8:	4b0c      	ldr	r3, [pc, #48]	; (8007cec <_fflush_r+0x48>)
 8007cba:	429c      	cmp	r4, r3
 8007cbc:	d109      	bne.n	8007cd2 <_fflush_r+0x2e>
 8007cbe:	686c      	ldr	r4, [r5, #4]
 8007cc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007cc4:	b17b      	cbz	r3, 8007ce6 <_fflush_r+0x42>
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	4628      	mov	r0, r5
 8007cca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cce:	f7ff bf63 	b.w	8007b98 <__sflush_r>
 8007cd2:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <_fflush_r+0x4c>)
 8007cd4:	429c      	cmp	r4, r3
 8007cd6:	d101      	bne.n	8007cdc <_fflush_r+0x38>
 8007cd8:	68ac      	ldr	r4, [r5, #8]
 8007cda:	e7f1      	b.n	8007cc0 <_fflush_r+0x1c>
 8007cdc:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <_fflush_r+0x50>)
 8007cde:	429c      	cmp	r4, r3
 8007ce0:	bf08      	it	eq
 8007ce2:	68ec      	ldreq	r4, [r5, #12]
 8007ce4:	e7ec      	b.n	8007cc0 <_fflush_r+0x1c>
 8007ce6:	2000      	movs	r0, #0
 8007ce8:	bd38      	pop	{r3, r4, r5, pc}
 8007cea:	bf00      	nop
 8007cec:	080098a8 	.word	0x080098a8
 8007cf0:	080098c8 	.word	0x080098c8
 8007cf4:	08009888 	.word	0x08009888

08007cf8 <std>:
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	b510      	push	{r4, lr}
 8007cfc:	4604      	mov	r4, r0
 8007cfe:	e9c0 3300 	strd	r3, r3, [r0]
 8007d02:	6083      	str	r3, [r0, #8]
 8007d04:	8181      	strh	r1, [r0, #12]
 8007d06:	6643      	str	r3, [r0, #100]	; 0x64
 8007d08:	81c2      	strh	r2, [r0, #14]
 8007d0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d0e:	6183      	str	r3, [r0, #24]
 8007d10:	4619      	mov	r1, r3
 8007d12:	2208      	movs	r2, #8
 8007d14:	305c      	adds	r0, #92	; 0x5c
 8007d16:	f7fd faa3 	bl	8005260 <memset>
 8007d1a:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <std+0x38>)
 8007d1c:	6263      	str	r3, [r4, #36]	; 0x24
 8007d1e:	4b05      	ldr	r3, [pc, #20]	; (8007d34 <std+0x3c>)
 8007d20:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d22:	4b05      	ldr	r3, [pc, #20]	; (8007d38 <std+0x40>)
 8007d24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d26:	4b05      	ldr	r3, [pc, #20]	; (8007d3c <std+0x44>)
 8007d28:	6224      	str	r4, [r4, #32]
 8007d2a:	6323      	str	r3, [r4, #48]	; 0x30
 8007d2c:	bd10      	pop	{r4, pc}
 8007d2e:	bf00      	nop
 8007d30:	080094c1 	.word	0x080094c1
 8007d34:	080094e3 	.word	0x080094e3
 8007d38:	0800951b 	.word	0x0800951b
 8007d3c:	0800953f 	.word	0x0800953f

08007d40 <_cleanup_r>:
 8007d40:	4901      	ldr	r1, [pc, #4]	; (8007d48 <_cleanup_r+0x8>)
 8007d42:	f000 b885 	b.w	8007e50 <_fwalk_reent>
 8007d46:	bf00      	nop
 8007d48:	08007ca5 	.word	0x08007ca5

08007d4c <__sfmoreglue>:
 8007d4c:	b570      	push	{r4, r5, r6, lr}
 8007d4e:	1e4a      	subs	r2, r1, #1
 8007d50:	2568      	movs	r5, #104	; 0x68
 8007d52:	4355      	muls	r5, r2
 8007d54:	460e      	mov	r6, r1
 8007d56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d5a:	f001 f8b5 	bl	8008ec8 <_malloc_r>
 8007d5e:	4604      	mov	r4, r0
 8007d60:	b140      	cbz	r0, 8007d74 <__sfmoreglue+0x28>
 8007d62:	2100      	movs	r1, #0
 8007d64:	e9c0 1600 	strd	r1, r6, [r0]
 8007d68:	300c      	adds	r0, #12
 8007d6a:	60a0      	str	r0, [r4, #8]
 8007d6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d70:	f7fd fa76 	bl	8005260 <memset>
 8007d74:	4620      	mov	r0, r4
 8007d76:	bd70      	pop	{r4, r5, r6, pc}

08007d78 <__sinit>:
 8007d78:	6983      	ldr	r3, [r0, #24]
 8007d7a:	b510      	push	{r4, lr}
 8007d7c:	4604      	mov	r4, r0
 8007d7e:	bb33      	cbnz	r3, 8007dce <__sinit+0x56>
 8007d80:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007d84:	6503      	str	r3, [r0, #80]	; 0x50
 8007d86:	4b12      	ldr	r3, [pc, #72]	; (8007dd0 <__sinit+0x58>)
 8007d88:	4a12      	ldr	r2, [pc, #72]	; (8007dd4 <__sinit+0x5c>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6282      	str	r2, [r0, #40]	; 0x28
 8007d8e:	4298      	cmp	r0, r3
 8007d90:	bf04      	itt	eq
 8007d92:	2301      	moveq	r3, #1
 8007d94:	6183      	streq	r3, [r0, #24]
 8007d96:	f000 f81f 	bl	8007dd8 <__sfp>
 8007d9a:	6060      	str	r0, [r4, #4]
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f000 f81b 	bl	8007dd8 <__sfp>
 8007da2:	60a0      	str	r0, [r4, #8]
 8007da4:	4620      	mov	r0, r4
 8007da6:	f000 f817 	bl	8007dd8 <__sfp>
 8007daa:	2200      	movs	r2, #0
 8007dac:	60e0      	str	r0, [r4, #12]
 8007dae:	2104      	movs	r1, #4
 8007db0:	6860      	ldr	r0, [r4, #4]
 8007db2:	f7ff ffa1 	bl	8007cf8 <std>
 8007db6:	2201      	movs	r2, #1
 8007db8:	2109      	movs	r1, #9
 8007dba:	68a0      	ldr	r0, [r4, #8]
 8007dbc:	f7ff ff9c 	bl	8007cf8 <std>
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	2112      	movs	r1, #18
 8007dc4:	68e0      	ldr	r0, [r4, #12]
 8007dc6:	f7ff ff97 	bl	8007cf8 <std>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	61a3      	str	r3, [r4, #24]
 8007dce:	bd10      	pop	{r4, pc}
 8007dd0:	080097e4 	.word	0x080097e4
 8007dd4:	08007d41 	.word	0x08007d41

08007dd8 <__sfp>:
 8007dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dda:	4b1b      	ldr	r3, [pc, #108]	; (8007e48 <__sfp+0x70>)
 8007ddc:	681e      	ldr	r6, [r3, #0]
 8007dde:	69b3      	ldr	r3, [r6, #24]
 8007de0:	4607      	mov	r7, r0
 8007de2:	b913      	cbnz	r3, 8007dea <__sfp+0x12>
 8007de4:	4630      	mov	r0, r6
 8007de6:	f7ff ffc7 	bl	8007d78 <__sinit>
 8007dea:	3648      	adds	r6, #72	; 0x48
 8007dec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007df0:	3b01      	subs	r3, #1
 8007df2:	d503      	bpl.n	8007dfc <__sfp+0x24>
 8007df4:	6833      	ldr	r3, [r6, #0]
 8007df6:	b133      	cbz	r3, 8007e06 <__sfp+0x2e>
 8007df8:	6836      	ldr	r6, [r6, #0]
 8007dfa:	e7f7      	b.n	8007dec <__sfp+0x14>
 8007dfc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007e00:	b16d      	cbz	r5, 8007e1e <__sfp+0x46>
 8007e02:	3468      	adds	r4, #104	; 0x68
 8007e04:	e7f4      	b.n	8007df0 <__sfp+0x18>
 8007e06:	2104      	movs	r1, #4
 8007e08:	4638      	mov	r0, r7
 8007e0a:	f7ff ff9f 	bl	8007d4c <__sfmoreglue>
 8007e0e:	6030      	str	r0, [r6, #0]
 8007e10:	2800      	cmp	r0, #0
 8007e12:	d1f1      	bne.n	8007df8 <__sfp+0x20>
 8007e14:	230c      	movs	r3, #12
 8007e16:	603b      	str	r3, [r7, #0]
 8007e18:	4604      	mov	r4, r0
 8007e1a:	4620      	mov	r0, r4
 8007e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e1e:	4b0b      	ldr	r3, [pc, #44]	; (8007e4c <__sfp+0x74>)
 8007e20:	6665      	str	r5, [r4, #100]	; 0x64
 8007e22:	e9c4 5500 	strd	r5, r5, [r4]
 8007e26:	60a5      	str	r5, [r4, #8]
 8007e28:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007e2c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007e30:	2208      	movs	r2, #8
 8007e32:	4629      	mov	r1, r5
 8007e34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e38:	f7fd fa12 	bl	8005260 <memset>
 8007e3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e44:	e7e9      	b.n	8007e1a <__sfp+0x42>
 8007e46:	bf00      	nop
 8007e48:	080097e4 	.word	0x080097e4
 8007e4c:	ffff0001 	.word	0xffff0001

08007e50 <_fwalk_reent>:
 8007e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e54:	4680      	mov	r8, r0
 8007e56:	4689      	mov	r9, r1
 8007e58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e5c:	2600      	movs	r6, #0
 8007e5e:	b914      	cbnz	r4, 8007e66 <_fwalk_reent+0x16>
 8007e60:	4630      	mov	r0, r6
 8007e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e66:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007e6a:	3f01      	subs	r7, #1
 8007e6c:	d501      	bpl.n	8007e72 <_fwalk_reent+0x22>
 8007e6e:	6824      	ldr	r4, [r4, #0]
 8007e70:	e7f5      	b.n	8007e5e <_fwalk_reent+0xe>
 8007e72:	89ab      	ldrh	r3, [r5, #12]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d907      	bls.n	8007e88 <_fwalk_reent+0x38>
 8007e78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	d003      	beq.n	8007e88 <_fwalk_reent+0x38>
 8007e80:	4629      	mov	r1, r5
 8007e82:	4640      	mov	r0, r8
 8007e84:	47c8      	blx	r9
 8007e86:	4306      	orrs	r6, r0
 8007e88:	3568      	adds	r5, #104	; 0x68
 8007e8a:	e7ee      	b.n	8007e6a <_fwalk_reent+0x1a>

08007e8c <rshift>:
 8007e8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e8e:	6906      	ldr	r6, [r0, #16]
 8007e90:	114b      	asrs	r3, r1, #5
 8007e92:	429e      	cmp	r6, r3
 8007e94:	f100 0414 	add.w	r4, r0, #20
 8007e98:	dd30      	ble.n	8007efc <rshift+0x70>
 8007e9a:	f011 011f 	ands.w	r1, r1, #31
 8007e9e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007ea2:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007ea6:	d108      	bne.n	8007eba <rshift+0x2e>
 8007ea8:	4621      	mov	r1, r4
 8007eaa:	42b2      	cmp	r2, r6
 8007eac:	460b      	mov	r3, r1
 8007eae:	d211      	bcs.n	8007ed4 <rshift+0x48>
 8007eb0:	f852 3b04 	ldr.w	r3, [r2], #4
 8007eb4:	f841 3b04 	str.w	r3, [r1], #4
 8007eb8:	e7f7      	b.n	8007eaa <rshift+0x1e>
 8007eba:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8007ebe:	f1c1 0c20 	rsb	ip, r1, #32
 8007ec2:	40cd      	lsrs	r5, r1
 8007ec4:	3204      	adds	r2, #4
 8007ec6:	4623      	mov	r3, r4
 8007ec8:	42b2      	cmp	r2, r6
 8007eca:	4617      	mov	r7, r2
 8007ecc:	d30c      	bcc.n	8007ee8 <rshift+0x5c>
 8007ece:	601d      	str	r5, [r3, #0]
 8007ed0:	b105      	cbz	r5, 8007ed4 <rshift+0x48>
 8007ed2:	3304      	adds	r3, #4
 8007ed4:	1b1a      	subs	r2, r3, r4
 8007ed6:	42a3      	cmp	r3, r4
 8007ed8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007edc:	bf08      	it	eq
 8007ede:	2300      	moveq	r3, #0
 8007ee0:	6102      	str	r2, [r0, #16]
 8007ee2:	bf08      	it	eq
 8007ee4:	6143      	streq	r3, [r0, #20]
 8007ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ee8:	683f      	ldr	r7, [r7, #0]
 8007eea:	fa07 f70c 	lsl.w	r7, r7, ip
 8007eee:	433d      	orrs	r5, r7
 8007ef0:	f843 5b04 	str.w	r5, [r3], #4
 8007ef4:	f852 5b04 	ldr.w	r5, [r2], #4
 8007ef8:	40cd      	lsrs	r5, r1
 8007efa:	e7e5      	b.n	8007ec8 <rshift+0x3c>
 8007efc:	4623      	mov	r3, r4
 8007efe:	e7e9      	b.n	8007ed4 <rshift+0x48>

08007f00 <__hexdig_fun>:
 8007f00:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007f04:	2b09      	cmp	r3, #9
 8007f06:	d802      	bhi.n	8007f0e <__hexdig_fun+0xe>
 8007f08:	3820      	subs	r0, #32
 8007f0a:	b2c0      	uxtb	r0, r0
 8007f0c:	4770      	bx	lr
 8007f0e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007f12:	2b05      	cmp	r3, #5
 8007f14:	d801      	bhi.n	8007f1a <__hexdig_fun+0x1a>
 8007f16:	3847      	subs	r0, #71	; 0x47
 8007f18:	e7f7      	b.n	8007f0a <__hexdig_fun+0xa>
 8007f1a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007f1e:	2b05      	cmp	r3, #5
 8007f20:	d801      	bhi.n	8007f26 <__hexdig_fun+0x26>
 8007f22:	3827      	subs	r0, #39	; 0x27
 8007f24:	e7f1      	b.n	8007f0a <__hexdig_fun+0xa>
 8007f26:	2000      	movs	r0, #0
 8007f28:	4770      	bx	lr

08007f2a <__gethex>:
 8007f2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2e:	b08b      	sub	sp, #44	; 0x2c
 8007f30:	468a      	mov	sl, r1
 8007f32:	9002      	str	r0, [sp, #8]
 8007f34:	9816      	ldr	r0, [sp, #88]	; 0x58
 8007f36:	9306      	str	r3, [sp, #24]
 8007f38:	4690      	mov	r8, r2
 8007f3a:	f000 fad0 	bl	80084de <__localeconv_l>
 8007f3e:	6803      	ldr	r3, [r0, #0]
 8007f40:	9303      	str	r3, [sp, #12]
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7f8 f944 	bl	80001d0 <strlen>
 8007f48:	9b03      	ldr	r3, [sp, #12]
 8007f4a:	9001      	str	r0, [sp, #4]
 8007f4c:	4403      	add	r3, r0
 8007f4e:	f04f 0b00 	mov.w	fp, #0
 8007f52:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007f56:	9307      	str	r3, [sp, #28]
 8007f58:	f8da 3000 	ldr.w	r3, [sl]
 8007f5c:	3302      	adds	r3, #2
 8007f5e:	461f      	mov	r7, r3
 8007f60:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007f64:	2830      	cmp	r0, #48	; 0x30
 8007f66:	d06c      	beq.n	8008042 <__gethex+0x118>
 8007f68:	f7ff ffca 	bl	8007f00 <__hexdig_fun>
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	d16a      	bne.n	8008048 <__gethex+0x11e>
 8007f72:	9a01      	ldr	r2, [sp, #4]
 8007f74:	9903      	ldr	r1, [sp, #12]
 8007f76:	4638      	mov	r0, r7
 8007f78:	f001 fae5 	bl	8009546 <strncmp>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	d166      	bne.n	800804e <__gethex+0x124>
 8007f80:	9b01      	ldr	r3, [sp, #4]
 8007f82:	5cf8      	ldrb	r0, [r7, r3]
 8007f84:	18fe      	adds	r6, r7, r3
 8007f86:	f7ff ffbb 	bl	8007f00 <__hexdig_fun>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d062      	beq.n	8008054 <__gethex+0x12a>
 8007f8e:	4633      	mov	r3, r6
 8007f90:	7818      	ldrb	r0, [r3, #0]
 8007f92:	2830      	cmp	r0, #48	; 0x30
 8007f94:	461f      	mov	r7, r3
 8007f96:	f103 0301 	add.w	r3, r3, #1
 8007f9a:	d0f9      	beq.n	8007f90 <__gethex+0x66>
 8007f9c:	f7ff ffb0 	bl	8007f00 <__hexdig_fun>
 8007fa0:	fab0 f580 	clz	r5, r0
 8007fa4:	096d      	lsrs	r5, r5, #5
 8007fa6:	4634      	mov	r4, r6
 8007fa8:	f04f 0b01 	mov.w	fp, #1
 8007fac:	463a      	mov	r2, r7
 8007fae:	4616      	mov	r6, r2
 8007fb0:	3201      	adds	r2, #1
 8007fb2:	7830      	ldrb	r0, [r6, #0]
 8007fb4:	f7ff ffa4 	bl	8007f00 <__hexdig_fun>
 8007fb8:	2800      	cmp	r0, #0
 8007fba:	d1f8      	bne.n	8007fae <__gethex+0x84>
 8007fbc:	9a01      	ldr	r2, [sp, #4]
 8007fbe:	9903      	ldr	r1, [sp, #12]
 8007fc0:	4630      	mov	r0, r6
 8007fc2:	f001 fac0 	bl	8009546 <strncmp>
 8007fc6:	b950      	cbnz	r0, 8007fde <__gethex+0xb4>
 8007fc8:	b954      	cbnz	r4, 8007fe0 <__gethex+0xb6>
 8007fca:	9b01      	ldr	r3, [sp, #4]
 8007fcc:	18f4      	adds	r4, r6, r3
 8007fce:	4622      	mov	r2, r4
 8007fd0:	4616      	mov	r6, r2
 8007fd2:	3201      	adds	r2, #1
 8007fd4:	7830      	ldrb	r0, [r6, #0]
 8007fd6:	f7ff ff93 	bl	8007f00 <__hexdig_fun>
 8007fda:	2800      	cmp	r0, #0
 8007fdc:	d1f8      	bne.n	8007fd0 <__gethex+0xa6>
 8007fde:	b10c      	cbz	r4, 8007fe4 <__gethex+0xba>
 8007fe0:	1ba4      	subs	r4, r4, r6
 8007fe2:	00a4      	lsls	r4, r4, #2
 8007fe4:	7833      	ldrb	r3, [r6, #0]
 8007fe6:	2b50      	cmp	r3, #80	; 0x50
 8007fe8:	d001      	beq.n	8007fee <__gethex+0xc4>
 8007fea:	2b70      	cmp	r3, #112	; 0x70
 8007fec:	d140      	bne.n	8008070 <__gethex+0x146>
 8007fee:	7873      	ldrb	r3, [r6, #1]
 8007ff0:	2b2b      	cmp	r3, #43	; 0x2b
 8007ff2:	d031      	beq.n	8008058 <__gethex+0x12e>
 8007ff4:	2b2d      	cmp	r3, #45	; 0x2d
 8007ff6:	d033      	beq.n	8008060 <__gethex+0x136>
 8007ff8:	1c71      	adds	r1, r6, #1
 8007ffa:	f04f 0900 	mov.w	r9, #0
 8007ffe:	7808      	ldrb	r0, [r1, #0]
 8008000:	f7ff ff7e 	bl	8007f00 <__hexdig_fun>
 8008004:	1e43      	subs	r3, r0, #1
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b18      	cmp	r3, #24
 800800a:	d831      	bhi.n	8008070 <__gethex+0x146>
 800800c:	f1a0 0210 	sub.w	r2, r0, #16
 8008010:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008014:	f7ff ff74 	bl	8007f00 <__hexdig_fun>
 8008018:	1e43      	subs	r3, r0, #1
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b18      	cmp	r3, #24
 800801e:	d922      	bls.n	8008066 <__gethex+0x13c>
 8008020:	f1b9 0f00 	cmp.w	r9, #0
 8008024:	d000      	beq.n	8008028 <__gethex+0xfe>
 8008026:	4252      	negs	r2, r2
 8008028:	4414      	add	r4, r2
 800802a:	f8ca 1000 	str.w	r1, [sl]
 800802e:	b30d      	cbz	r5, 8008074 <__gethex+0x14a>
 8008030:	f1bb 0f00 	cmp.w	fp, #0
 8008034:	bf0c      	ite	eq
 8008036:	2706      	moveq	r7, #6
 8008038:	2700      	movne	r7, #0
 800803a:	4638      	mov	r0, r7
 800803c:	b00b      	add	sp, #44	; 0x2c
 800803e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008042:	f10b 0b01 	add.w	fp, fp, #1
 8008046:	e78a      	b.n	8007f5e <__gethex+0x34>
 8008048:	2500      	movs	r5, #0
 800804a:	462c      	mov	r4, r5
 800804c:	e7ae      	b.n	8007fac <__gethex+0x82>
 800804e:	463e      	mov	r6, r7
 8008050:	2501      	movs	r5, #1
 8008052:	e7c7      	b.n	8007fe4 <__gethex+0xba>
 8008054:	4604      	mov	r4, r0
 8008056:	e7fb      	b.n	8008050 <__gethex+0x126>
 8008058:	f04f 0900 	mov.w	r9, #0
 800805c:	1cb1      	adds	r1, r6, #2
 800805e:	e7ce      	b.n	8007ffe <__gethex+0xd4>
 8008060:	f04f 0901 	mov.w	r9, #1
 8008064:	e7fa      	b.n	800805c <__gethex+0x132>
 8008066:	230a      	movs	r3, #10
 8008068:	fb03 0202 	mla	r2, r3, r2, r0
 800806c:	3a10      	subs	r2, #16
 800806e:	e7cf      	b.n	8008010 <__gethex+0xe6>
 8008070:	4631      	mov	r1, r6
 8008072:	e7da      	b.n	800802a <__gethex+0x100>
 8008074:	1bf3      	subs	r3, r6, r7
 8008076:	3b01      	subs	r3, #1
 8008078:	4629      	mov	r1, r5
 800807a:	2b07      	cmp	r3, #7
 800807c:	dc49      	bgt.n	8008112 <__gethex+0x1e8>
 800807e:	9802      	ldr	r0, [sp, #8]
 8008080:	f000 fac7 	bl	8008612 <_Balloc>
 8008084:	9b01      	ldr	r3, [sp, #4]
 8008086:	f100 0914 	add.w	r9, r0, #20
 800808a:	f04f 0b00 	mov.w	fp, #0
 800808e:	f1c3 0301 	rsb	r3, r3, #1
 8008092:	4605      	mov	r5, r0
 8008094:	f8cd 9010 	str.w	r9, [sp, #16]
 8008098:	46da      	mov	sl, fp
 800809a:	9308      	str	r3, [sp, #32]
 800809c:	42b7      	cmp	r7, r6
 800809e:	d33b      	bcc.n	8008118 <__gethex+0x1ee>
 80080a0:	9804      	ldr	r0, [sp, #16]
 80080a2:	f840 ab04 	str.w	sl, [r0], #4
 80080a6:	eba0 0009 	sub.w	r0, r0, r9
 80080aa:	1080      	asrs	r0, r0, #2
 80080ac:	6128      	str	r0, [r5, #16]
 80080ae:	0147      	lsls	r7, r0, #5
 80080b0:	4650      	mov	r0, sl
 80080b2:	f000 fb72 	bl	800879a <__hi0bits>
 80080b6:	f8d8 6000 	ldr.w	r6, [r8]
 80080ba:	1a3f      	subs	r7, r7, r0
 80080bc:	42b7      	cmp	r7, r6
 80080be:	dd64      	ble.n	800818a <__gethex+0x260>
 80080c0:	1bbf      	subs	r7, r7, r6
 80080c2:	4639      	mov	r1, r7
 80080c4:	4628      	mov	r0, r5
 80080c6:	f000 fe81 	bl	8008dcc <__any_on>
 80080ca:	4682      	mov	sl, r0
 80080cc:	b178      	cbz	r0, 80080ee <__gethex+0x1c4>
 80080ce:	1e7b      	subs	r3, r7, #1
 80080d0:	1159      	asrs	r1, r3, #5
 80080d2:	f003 021f 	and.w	r2, r3, #31
 80080d6:	f04f 0a01 	mov.w	sl, #1
 80080da:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80080de:	fa0a f202 	lsl.w	r2, sl, r2
 80080e2:	420a      	tst	r2, r1
 80080e4:	d003      	beq.n	80080ee <__gethex+0x1c4>
 80080e6:	4553      	cmp	r3, sl
 80080e8:	dc46      	bgt.n	8008178 <__gethex+0x24e>
 80080ea:	f04f 0a02 	mov.w	sl, #2
 80080ee:	4639      	mov	r1, r7
 80080f0:	4628      	mov	r0, r5
 80080f2:	f7ff fecb 	bl	8007e8c <rshift>
 80080f6:	443c      	add	r4, r7
 80080f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080fc:	42a3      	cmp	r3, r4
 80080fe:	da52      	bge.n	80081a6 <__gethex+0x27c>
 8008100:	4629      	mov	r1, r5
 8008102:	9802      	ldr	r0, [sp, #8]
 8008104:	f000 fab9 	bl	800867a <_Bfree>
 8008108:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800810a:	2300      	movs	r3, #0
 800810c:	6013      	str	r3, [r2, #0]
 800810e:	27a3      	movs	r7, #163	; 0xa3
 8008110:	e793      	b.n	800803a <__gethex+0x110>
 8008112:	3101      	adds	r1, #1
 8008114:	105b      	asrs	r3, r3, #1
 8008116:	e7b0      	b.n	800807a <__gethex+0x150>
 8008118:	1e73      	subs	r3, r6, #1
 800811a:	9305      	str	r3, [sp, #20]
 800811c:	9a07      	ldr	r2, [sp, #28]
 800811e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008122:	4293      	cmp	r3, r2
 8008124:	d018      	beq.n	8008158 <__gethex+0x22e>
 8008126:	f1bb 0f20 	cmp.w	fp, #32
 800812a:	d107      	bne.n	800813c <__gethex+0x212>
 800812c:	9b04      	ldr	r3, [sp, #16]
 800812e:	f8c3 a000 	str.w	sl, [r3]
 8008132:	3304      	adds	r3, #4
 8008134:	f04f 0a00 	mov.w	sl, #0
 8008138:	9304      	str	r3, [sp, #16]
 800813a:	46d3      	mov	fp, sl
 800813c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008140:	f7ff fede 	bl	8007f00 <__hexdig_fun>
 8008144:	f000 000f 	and.w	r0, r0, #15
 8008148:	fa00 f00b 	lsl.w	r0, r0, fp
 800814c:	ea4a 0a00 	orr.w	sl, sl, r0
 8008150:	f10b 0b04 	add.w	fp, fp, #4
 8008154:	9b05      	ldr	r3, [sp, #20]
 8008156:	e00d      	b.n	8008174 <__gethex+0x24a>
 8008158:	9b05      	ldr	r3, [sp, #20]
 800815a:	9a08      	ldr	r2, [sp, #32]
 800815c:	4413      	add	r3, r2
 800815e:	42bb      	cmp	r3, r7
 8008160:	d3e1      	bcc.n	8008126 <__gethex+0x1fc>
 8008162:	4618      	mov	r0, r3
 8008164:	9a01      	ldr	r2, [sp, #4]
 8008166:	9903      	ldr	r1, [sp, #12]
 8008168:	9309      	str	r3, [sp, #36]	; 0x24
 800816a:	f001 f9ec 	bl	8009546 <strncmp>
 800816e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008170:	2800      	cmp	r0, #0
 8008172:	d1d8      	bne.n	8008126 <__gethex+0x1fc>
 8008174:	461e      	mov	r6, r3
 8008176:	e791      	b.n	800809c <__gethex+0x172>
 8008178:	1eb9      	subs	r1, r7, #2
 800817a:	4628      	mov	r0, r5
 800817c:	f000 fe26 	bl	8008dcc <__any_on>
 8008180:	2800      	cmp	r0, #0
 8008182:	d0b2      	beq.n	80080ea <__gethex+0x1c0>
 8008184:	f04f 0a03 	mov.w	sl, #3
 8008188:	e7b1      	b.n	80080ee <__gethex+0x1c4>
 800818a:	da09      	bge.n	80081a0 <__gethex+0x276>
 800818c:	1bf7      	subs	r7, r6, r7
 800818e:	4629      	mov	r1, r5
 8008190:	463a      	mov	r2, r7
 8008192:	9802      	ldr	r0, [sp, #8]
 8008194:	f000 fc3c 	bl	8008a10 <__lshift>
 8008198:	1be4      	subs	r4, r4, r7
 800819a:	4605      	mov	r5, r0
 800819c:	f100 0914 	add.w	r9, r0, #20
 80081a0:	f04f 0a00 	mov.w	sl, #0
 80081a4:	e7a8      	b.n	80080f8 <__gethex+0x1ce>
 80081a6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80081aa:	42a0      	cmp	r0, r4
 80081ac:	dd6a      	ble.n	8008284 <__gethex+0x35a>
 80081ae:	1b04      	subs	r4, r0, r4
 80081b0:	42a6      	cmp	r6, r4
 80081b2:	dc2e      	bgt.n	8008212 <__gethex+0x2e8>
 80081b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d022      	beq.n	8008202 <__gethex+0x2d8>
 80081bc:	2b03      	cmp	r3, #3
 80081be:	d024      	beq.n	800820a <__gethex+0x2e0>
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d115      	bne.n	80081f0 <__gethex+0x2c6>
 80081c4:	42a6      	cmp	r6, r4
 80081c6:	d113      	bne.n	80081f0 <__gethex+0x2c6>
 80081c8:	2e01      	cmp	r6, #1
 80081ca:	dc0b      	bgt.n	80081e4 <__gethex+0x2ba>
 80081cc:	9a06      	ldr	r2, [sp, #24]
 80081ce:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	2301      	movs	r3, #1
 80081d6:	612b      	str	r3, [r5, #16]
 80081d8:	f8c9 3000 	str.w	r3, [r9]
 80081dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80081de:	2762      	movs	r7, #98	; 0x62
 80081e0:	601d      	str	r5, [r3, #0]
 80081e2:	e72a      	b.n	800803a <__gethex+0x110>
 80081e4:	1e71      	subs	r1, r6, #1
 80081e6:	4628      	mov	r0, r5
 80081e8:	f000 fdf0 	bl	8008dcc <__any_on>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d1ed      	bne.n	80081cc <__gethex+0x2a2>
 80081f0:	4629      	mov	r1, r5
 80081f2:	9802      	ldr	r0, [sp, #8]
 80081f4:	f000 fa41 	bl	800867a <_Bfree>
 80081f8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80081fa:	2300      	movs	r3, #0
 80081fc:	6013      	str	r3, [r2, #0]
 80081fe:	2750      	movs	r7, #80	; 0x50
 8008200:	e71b      	b.n	800803a <__gethex+0x110>
 8008202:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008204:	2b00      	cmp	r3, #0
 8008206:	d0e1      	beq.n	80081cc <__gethex+0x2a2>
 8008208:	e7f2      	b.n	80081f0 <__gethex+0x2c6>
 800820a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1dd      	bne.n	80081cc <__gethex+0x2a2>
 8008210:	e7ee      	b.n	80081f0 <__gethex+0x2c6>
 8008212:	1e67      	subs	r7, r4, #1
 8008214:	f1ba 0f00 	cmp.w	sl, #0
 8008218:	d131      	bne.n	800827e <__gethex+0x354>
 800821a:	b127      	cbz	r7, 8008226 <__gethex+0x2fc>
 800821c:	4639      	mov	r1, r7
 800821e:	4628      	mov	r0, r5
 8008220:	f000 fdd4 	bl	8008dcc <__any_on>
 8008224:	4682      	mov	sl, r0
 8008226:	117a      	asrs	r2, r7, #5
 8008228:	2301      	movs	r3, #1
 800822a:	f007 071f 	and.w	r7, r7, #31
 800822e:	fa03 f707 	lsl.w	r7, r3, r7
 8008232:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008236:	4621      	mov	r1, r4
 8008238:	421f      	tst	r7, r3
 800823a:	4628      	mov	r0, r5
 800823c:	bf18      	it	ne
 800823e:	f04a 0a02 	orrne.w	sl, sl, #2
 8008242:	1b36      	subs	r6, r6, r4
 8008244:	f7ff fe22 	bl	8007e8c <rshift>
 8008248:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800824c:	2702      	movs	r7, #2
 800824e:	f1ba 0f00 	cmp.w	sl, #0
 8008252:	d048      	beq.n	80082e6 <__gethex+0x3bc>
 8008254:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008258:	2b02      	cmp	r3, #2
 800825a:	d015      	beq.n	8008288 <__gethex+0x35e>
 800825c:	2b03      	cmp	r3, #3
 800825e:	d017      	beq.n	8008290 <__gethex+0x366>
 8008260:	2b01      	cmp	r3, #1
 8008262:	d109      	bne.n	8008278 <__gethex+0x34e>
 8008264:	f01a 0f02 	tst.w	sl, #2
 8008268:	d006      	beq.n	8008278 <__gethex+0x34e>
 800826a:	f8d9 3000 	ldr.w	r3, [r9]
 800826e:	ea4a 0a03 	orr.w	sl, sl, r3
 8008272:	f01a 0f01 	tst.w	sl, #1
 8008276:	d10e      	bne.n	8008296 <__gethex+0x36c>
 8008278:	f047 0710 	orr.w	r7, r7, #16
 800827c:	e033      	b.n	80082e6 <__gethex+0x3bc>
 800827e:	f04f 0a01 	mov.w	sl, #1
 8008282:	e7d0      	b.n	8008226 <__gethex+0x2fc>
 8008284:	2701      	movs	r7, #1
 8008286:	e7e2      	b.n	800824e <__gethex+0x324>
 8008288:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800828a:	f1c3 0301 	rsb	r3, r3, #1
 800828e:	9315      	str	r3, [sp, #84]	; 0x54
 8008290:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008292:	2b00      	cmp	r3, #0
 8008294:	d0f0      	beq.n	8008278 <__gethex+0x34e>
 8008296:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800829a:	f105 0314 	add.w	r3, r5, #20
 800829e:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80082a2:	eb03 010a 	add.w	r1, r3, sl
 80082a6:	f04f 0c00 	mov.w	ip, #0
 80082aa:	4618      	mov	r0, r3
 80082ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80082b0:	f1b2 3fff 	cmp.w	r2, #4294967295
 80082b4:	d01c      	beq.n	80082f0 <__gethex+0x3c6>
 80082b6:	3201      	adds	r2, #1
 80082b8:	6002      	str	r2, [r0, #0]
 80082ba:	2f02      	cmp	r7, #2
 80082bc:	f105 0314 	add.w	r3, r5, #20
 80082c0:	d138      	bne.n	8008334 <__gethex+0x40a>
 80082c2:	f8d8 2000 	ldr.w	r2, [r8]
 80082c6:	3a01      	subs	r2, #1
 80082c8:	42b2      	cmp	r2, r6
 80082ca:	d10a      	bne.n	80082e2 <__gethex+0x3b8>
 80082cc:	1171      	asrs	r1, r6, #5
 80082ce:	2201      	movs	r2, #1
 80082d0:	f006 061f 	and.w	r6, r6, #31
 80082d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80082d8:	fa02 f606 	lsl.w	r6, r2, r6
 80082dc:	421e      	tst	r6, r3
 80082de:	bf18      	it	ne
 80082e0:	4617      	movne	r7, r2
 80082e2:	f047 0720 	orr.w	r7, r7, #32
 80082e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80082e8:	601d      	str	r5, [r3, #0]
 80082ea:	9b06      	ldr	r3, [sp, #24]
 80082ec:	601c      	str	r4, [r3, #0]
 80082ee:	e6a4      	b.n	800803a <__gethex+0x110>
 80082f0:	4299      	cmp	r1, r3
 80082f2:	f843 cc04 	str.w	ip, [r3, #-4]
 80082f6:	d8d8      	bhi.n	80082aa <__gethex+0x380>
 80082f8:	68ab      	ldr	r3, [r5, #8]
 80082fa:	4599      	cmp	r9, r3
 80082fc:	db12      	blt.n	8008324 <__gethex+0x3fa>
 80082fe:	6869      	ldr	r1, [r5, #4]
 8008300:	9802      	ldr	r0, [sp, #8]
 8008302:	3101      	adds	r1, #1
 8008304:	f000 f985 	bl	8008612 <_Balloc>
 8008308:	692a      	ldr	r2, [r5, #16]
 800830a:	3202      	adds	r2, #2
 800830c:	f105 010c 	add.w	r1, r5, #12
 8008310:	4683      	mov	fp, r0
 8008312:	0092      	lsls	r2, r2, #2
 8008314:	300c      	adds	r0, #12
 8008316:	f000 f971 	bl	80085fc <memcpy>
 800831a:	4629      	mov	r1, r5
 800831c:	9802      	ldr	r0, [sp, #8]
 800831e:	f000 f9ac 	bl	800867a <_Bfree>
 8008322:	465d      	mov	r5, fp
 8008324:	692b      	ldr	r3, [r5, #16]
 8008326:	1c5a      	adds	r2, r3, #1
 8008328:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800832c:	612a      	str	r2, [r5, #16]
 800832e:	2201      	movs	r2, #1
 8008330:	615a      	str	r2, [r3, #20]
 8008332:	e7c2      	b.n	80082ba <__gethex+0x390>
 8008334:	692a      	ldr	r2, [r5, #16]
 8008336:	454a      	cmp	r2, r9
 8008338:	dd0b      	ble.n	8008352 <__gethex+0x428>
 800833a:	2101      	movs	r1, #1
 800833c:	4628      	mov	r0, r5
 800833e:	f7ff fda5 	bl	8007e8c <rshift>
 8008342:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008346:	3401      	adds	r4, #1
 8008348:	42a3      	cmp	r3, r4
 800834a:	f6ff aed9 	blt.w	8008100 <__gethex+0x1d6>
 800834e:	2701      	movs	r7, #1
 8008350:	e7c7      	b.n	80082e2 <__gethex+0x3b8>
 8008352:	f016 061f 	ands.w	r6, r6, #31
 8008356:	d0fa      	beq.n	800834e <__gethex+0x424>
 8008358:	449a      	add	sl, r3
 800835a:	f1c6 0620 	rsb	r6, r6, #32
 800835e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008362:	f000 fa1a 	bl	800879a <__hi0bits>
 8008366:	42b0      	cmp	r0, r6
 8008368:	dbe7      	blt.n	800833a <__gethex+0x410>
 800836a:	e7f0      	b.n	800834e <__gethex+0x424>

0800836c <L_shift>:
 800836c:	f1c2 0208 	rsb	r2, r2, #8
 8008370:	0092      	lsls	r2, r2, #2
 8008372:	b570      	push	{r4, r5, r6, lr}
 8008374:	f1c2 0620 	rsb	r6, r2, #32
 8008378:	6843      	ldr	r3, [r0, #4]
 800837a:	6804      	ldr	r4, [r0, #0]
 800837c:	fa03 f506 	lsl.w	r5, r3, r6
 8008380:	432c      	orrs	r4, r5
 8008382:	40d3      	lsrs	r3, r2
 8008384:	6004      	str	r4, [r0, #0]
 8008386:	f840 3f04 	str.w	r3, [r0, #4]!
 800838a:	4288      	cmp	r0, r1
 800838c:	d3f4      	bcc.n	8008378 <L_shift+0xc>
 800838e:	bd70      	pop	{r4, r5, r6, pc}

08008390 <__match>:
 8008390:	b530      	push	{r4, r5, lr}
 8008392:	6803      	ldr	r3, [r0, #0]
 8008394:	3301      	adds	r3, #1
 8008396:	f811 4b01 	ldrb.w	r4, [r1], #1
 800839a:	b914      	cbnz	r4, 80083a2 <__match+0x12>
 800839c:	6003      	str	r3, [r0, #0]
 800839e:	2001      	movs	r0, #1
 80083a0:	bd30      	pop	{r4, r5, pc}
 80083a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80083aa:	2d19      	cmp	r5, #25
 80083ac:	bf98      	it	ls
 80083ae:	3220      	addls	r2, #32
 80083b0:	42a2      	cmp	r2, r4
 80083b2:	d0f0      	beq.n	8008396 <__match+0x6>
 80083b4:	2000      	movs	r0, #0
 80083b6:	e7f3      	b.n	80083a0 <__match+0x10>

080083b8 <__hexnan>:
 80083b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083bc:	680b      	ldr	r3, [r1, #0]
 80083be:	6801      	ldr	r1, [r0, #0]
 80083c0:	115f      	asrs	r7, r3, #5
 80083c2:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80083c6:	f013 031f 	ands.w	r3, r3, #31
 80083ca:	b087      	sub	sp, #28
 80083cc:	bf18      	it	ne
 80083ce:	3704      	addne	r7, #4
 80083d0:	2500      	movs	r5, #0
 80083d2:	1f3e      	subs	r6, r7, #4
 80083d4:	4682      	mov	sl, r0
 80083d6:	4690      	mov	r8, r2
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	f847 5c04 	str.w	r5, [r7, #-4]
 80083de:	46b1      	mov	r9, r6
 80083e0:	4634      	mov	r4, r6
 80083e2:	9502      	str	r5, [sp, #8]
 80083e4:	46ab      	mov	fp, r5
 80083e6:	784a      	ldrb	r2, [r1, #1]
 80083e8:	1c4b      	adds	r3, r1, #1
 80083ea:	9303      	str	r3, [sp, #12]
 80083ec:	b342      	cbz	r2, 8008440 <__hexnan+0x88>
 80083ee:	4610      	mov	r0, r2
 80083f0:	9105      	str	r1, [sp, #20]
 80083f2:	9204      	str	r2, [sp, #16]
 80083f4:	f7ff fd84 	bl	8007f00 <__hexdig_fun>
 80083f8:	2800      	cmp	r0, #0
 80083fa:	d143      	bne.n	8008484 <__hexnan+0xcc>
 80083fc:	9a04      	ldr	r2, [sp, #16]
 80083fe:	9905      	ldr	r1, [sp, #20]
 8008400:	2a20      	cmp	r2, #32
 8008402:	d818      	bhi.n	8008436 <__hexnan+0x7e>
 8008404:	9b02      	ldr	r3, [sp, #8]
 8008406:	459b      	cmp	fp, r3
 8008408:	dd13      	ble.n	8008432 <__hexnan+0x7a>
 800840a:	454c      	cmp	r4, r9
 800840c:	d206      	bcs.n	800841c <__hexnan+0x64>
 800840e:	2d07      	cmp	r5, #7
 8008410:	dc04      	bgt.n	800841c <__hexnan+0x64>
 8008412:	462a      	mov	r2, r5
 8008414:	4649      	mov	r1, r9
 8008416:	4620      	mov	r0, r4
 8008418:	f7ff ffa8 	bl	800836c <L_shift>
 800841c:	4544      	cmp	r4, r8
 800841e:	d944      	bls.n	80084aa <__hexnan+0xf2>
 8008420:	2300      	movs	r3, #0
 8008422:	f1a4 0904 	sub.w	r9, r4, #4
 8008426:	f844 3c04 	str.w	r3, [r4, #-4]
 800842a:	f8cd b008 	str.w	fp, [sp, #8]
 800842e:	464c      	mov	r4, r9
 8008430:	461d      	mov	r5, r3
 8008432:	9903      	ldr	r1, [sp, #12]
 8008434:	e7d7      	b.n	80083e6 <__hexnan+0x2e>
 8008436:	2a29      	cmp	r2, #41	; 0x29
 8008438:	d14a      	bne.n	80084d0 <__hexnan+0x118>
 800843a:	3102      	adds	r1, #2
 800843c:	f8ca 1000 	str.w	r1, [sl]
 8008440:	f1bb 0f00 	cmp.w	fp, #0
 8008444:	d044      	beq.n	80084d0 <__hexnan+0x118>
 8008446:	454c      	cmp	r4, r9
 8008448:	d206      	bcs.n	8008458 <__hexnan+0xa0>
 800844a:	2d07      	cmp	r5, #7
 800844c:	dc04      	bgt.n	8008458 <__hexnan+0xa0>
 800844e:	462a      	mov	r2, r5
 8008450:	4649      	mov	r1, r9
 8008452:	4620      	mov	r0, r4
 8008454:	f7ff ff8a 	bl	800836c <L_shift>
 8008458:	4544      	cmp	r4, r8
 800845a:	d928      	bls.n	80084ae <__hexnan+0xf6>
 800845c:	4643      	mov	r3, r8
 800845e:	f854 2b04 	ldr.w	r2, [r4], #4
 8008462:	f843 2b04 	str.w	r2, [r3], #4
 8008466:	42a6      	cmp	r6, r4
 8008468:	d2f9      	bcs.n	800845e <__hexnan+0xa6>
 800846a:	2200      	movs	r2, #0
 800846c:	f843 2b04 	str.w	r2, [r3], #4
 8008470:	429e      	cmp	r6, r3
 8008472:	d2fb      	bcs.n	800846c <__hexnan+0xb4>
 8008474:	6833      	ldr	r3, [r6, #0]
 8008476:	b91b      	cbnz	r3, 8008480 <__hexnan+0xc8>
 8008478:	4546      	cmp	r6, r8
 800847a:	d127      	bne.n	80084cc <__hexnan+0x114>
 800847c:	2301      	movs	r3, #1
 800847e:	6033      	str	r3, [r6, #0]
 8008480:	2005      	movs	r0, #5
 8008482:	e026      	b.n	80084d2 <__hexnan+0x11a>
 8008484:	3501      	adds	r5, #1
 8008486:	2d08      	cmp	r5, #8
 8008488:	f10b 0b01 	add.w	fp, fp, #1
 800848c:	dd06      	ble.n	800849c <__hexnan+0xe4>
 800848e:	4544      	cmp	r4, r8
 8008490:	d9cf      	bls.n	8008432 <__hexnan+0x7a>
 8008492:	2300      	movs	r3, #0
 8008494:	f844 3c04 	str.w	r3, [r4, #-4]
 8008498:	2501      	movs	r5, #1
 800849a:	3c04      	subs	r4, #4
 800849c:	6822      	ldr	r2, [r4, #0]
 800849e:	f000 000f 	and.w	r0, r0, #15
 80084a2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80084a6:	6020      	str	r0, [r4, #0]
 80084a8:	e7c3      	b.n	8008432 <__hexnan+0x7a>
 80084aa:	2508      	movs	r5, #8
 80084ac:	e7c1      	b.n	8008432 <__hexnan+0x7a>
 80084ae:	9b01      	ldr	r3, [sp, #4]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d0df      	beq.n	8008474 <__hexnan+0xbc>
 80084b4:	f04f 32ff 	mov.w	r2, #4294967295
 80084b8:	f1c3 0320 	rsb	r3, r3, #32
 80084bc:	fa22 f303 	lsr.w	r3, r2, r3
 80084c0:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80084c4:	401a      	ands	r2, r3
 80084c6:	f847 2c04 	str.w	r2, [r7, #-4]
 80084ca:	e7d3      	b.n	8008474 <__hexnan+0xbc>
 80084cc:	3e04      	subs	r6, #4
 80084ce:	e7d1      	b.n	8008474 <__hexnan+0xbc>
 80084d0:	2004      	movs	r0, #4
 80084d2:	b007      	add	sp, #28
 80084d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080084d8 <__locale_ctype_ptr_l>:
 80084d8:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80084dc:	4770      	bx	lr

080084de <__localeconv_l>:
 80084de:	30f0      	adds	r0, #240	; 0xf0
 80084e0:	4770      	bx	lr
	...

080084e4 <_localeconv_r>:
 80084e4:	4b04      	ldr	r3, [pc, #16]	; (80084f8 <_localeconv_r+0x14>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6a18      	ldr	r0, [r3, #32]
 80084ea:	4b04      	ldr	r3, [pc, #16]	; (80084fc <_localeconv_r+0x18>)
 80084ec:	2800      	cmp	r0, #0
 80084ee:	bf08      	it	eq
 80084f0:	4618      	moveq	r0, r3
 80084f2:	30f0      	adds	r0, #240	; 0xf0
 80084f4:	4770      	bx	lr
 80084f6:	bf00      	nop
 80084f8:	20000048 	.word	0x20000048
 80084fc:	200000ac 	.word	0x200000ac

08008500 <__swhatbuf_r>:
 8008500:	b570      	push	{r4, r5, r6, lr}
 8008502:	460e      	mov	r6, r1
 8008504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008508:	2900      	cmp	r1, #0
 800850a:	b096      	sub	sp, #88	; 0x58
 800850c:	4614      	mov	r4, r2
 800850e:	461d      	mov	r5, r3
 8008510:	da07      	bge.n	8008522 <__swhatbuf_r+0x22>
 8008512:	2300      	movs	r3, #0
 8008514:	602b      	str	r3, [r5, #0]
 8008516:	89b3      	ldrh	r3, [r6, #12]
 8008518:	061a      	lsls	r2, r3, #24
 800851a:	d410      	bmi.n	800853e <__swhatbuf_r+0x3e>
 800851c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008520:	e00e      	b.n	8008540 <__swhatbuf_r+0x40>
 8008522:	466a      	mov	r2, sp
 8008524:	f001 f850 	bl	80095c8 <_fstat_r>
 8008528:	2800      	cmp	r0, #0
 800852a:	dbf2      	blt.n	8008512 <__swhatbuf_r+0x12>
 800852c:	9a01      	ldr	r2, [sp, #4]
 800852e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008532:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008536:	425a      	negs	r2, r3
 8008538:	415a      	adcs	r2, r3
 800853a:	602a      	str	r2, [r5, #0]
 800853c:	e7ee      	b.n	800851c <__swhatbuf_r+0x1c>
 800853e:	2340      	movs	r3, #64	; 0x40
 8008540:	2000      	movs	r0, #0
 8008542:	6023      	str	r3, [r4, #0]
 8008544:	b016      	add	sp, #88	; 0x58
 8008546:	bd70      	pop	{r4, r5, r6, pc}

08008548 <__smakebuf_r>:
 8008548:	898b      	ldrh	r3, [r1, #12]
 800854a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800854c:	079d      	lsls	r5, r3, #30
 800854e:	4606      	mov	r6, r0
 8008550:	460c      	mov	r4, r1
 8008552:	d507      	bpl.n	8008564 <__smakebuf_r+0x1c>
 8008554:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	6123      	str	r3, [r4, #16]
 800855c:	2301      	movs	r3, #1
 800855e:	6163      	str	r3, [r4, #20]
 8008560:	b002      	add	sp, #8
 8008562:	bd70      	pop	{r4, r5, r6, pc}
 8008564:	ab01      	add	r3, sp, #4
 8008566:	466a      	mov	r2, sp
 8008568:	f7ff ffca 	bl	8008500 <__swhatbuf_r>
 800856c:	9900      	ldr	r1, [sp, #0]
 800856e:	4605      	mov	r5, r0
 8008570:	4630      	mov	r0, r6
 8008572:	f000 fca9 	bl	8008ec8 <_malloc_r>
 8008576:	b948      	cbnz	r0, 800858c <__smakebuf_r+0x44>
 8008578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800857c:	059a      	lsls	r2, r3, #22
 800857e:	d4ef      	bmi.n	8008560 <__smakebuf_r+0x18>
 8008580:	f023 0303 	bic.w	r3, r3, #3
 8008584:	f043 0302 	orr.w	r3, r3, #2
 8008588:	81a3      	strh	r3, [r4, #12]
 800858a:	e7e3      	b.n	8008554 <__smakebuf_r+0xc>
 800858c:	4b0d      	ldr	r3, [pc, #52]	; (80085c4 <__smakebuf_r+0x7c>)
 800858e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008590:	89a3      	ldrh	r3, [r4, #12]
 8008592:	6020      	str	r0, [r4, #0]
 8008594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008598:	81a3      	strh	r3, [r4, #12]
 800859a:	9b00      	ldr	r3, [sp, #0]
 800859c:	6163      	str	r3, [r4, #20]
 800859e:	9b01      	ldr	r3, [sp, #4]
 80085a0:	6120      	str	r0, [r4, #16]
 80085a2:	b15b      	cbz	r3, 80085bc <__smakebuf_r+0x74>
 80085a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085a8:	4630      	mov	r0, r6
 80085aa:	f001 f81f 	bl	80095ec <_isatty_r>
 80085ae:	b128      	cbz	r0, 80085bc <__smakebuf_r+0x74>
 80085b0:	89a3      	ldrh	r3, [r4, #12]
 80085b2:	f023 0303 	bic.w	r3, r3, #3
 80085b6:	f043 0301 	orr.w	r3, r3, #1
 80085ba:	81a3      	strh	r3, [r4, #12]
 80085bc:	89a3      	ldrh	r3, [r4, #12]
 80085be:	431d      	orrs	r5, r3
 80085c0:	81a5      	strh	r5, [r4, #12]
 80085c2:	e7cd      	b.n	8008560 <__smakebuf_r+0x18>
 80085c4:	08007d41 	.word	0x08007d41

080085c8 <malloc>:
 80085c8:	4b02      	ldr	r3, [pc, #8]	; (80085d4 <malloc+0xc>)
 80085ca:	4601      	mov	r1, r0
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	f000 bc7b 	b.w	8008ec8 <_malloc_r>
 80085d2:	bf00      	nop
 80085d4:	20000048 	.word	0x20000048

080085d8 <__ascii_mbtowc>:
 80085d8:	b082      	sub	sp, #8
 80085da:	b901      	cbnz	r1, 80085de <__ascii_mbtowc+0x6>
 80085dc:	a901      	add	r1, sp, #4
 80085de:	b142      	cbz	r2, 80085f2 <__ascii_mbtowc+0x1a>
 80085e0:	b14b      	cbz	r3, 80085f6 <__ascii_mbtowc+0x1e>
 80085e2:	7813      	ldrb	r3, [r2, #0]
 80085e4:	600b      	str	r3, [r1, #0]
 80085e6:	7812      	ldrb	r2, [r2, #0]
 80085e8:	1c10      	adds	r0, r2, #0
 80085ea:	bf18      	it	ne
 80085ec:	2001      	movne	r0, #1
 80085ee:	b002      	add	sp, #8
 80085f0:	4770      	bx	lr
 80085f2:	4610      	mov	r0, r2
 80085f4:	e7fb      	b.n	80085ee <__ascii_mbtowc+0x16>
 80085f6:	f06f 0001 	mvn.w	r0, #1
 80085fa:	e7f8      	b.n	80085ee <__ascii_mbtowc+0x16>

080085fc <memcpy>:
 80085fc:	b510      	push	{r4, lr}
 80085fe:	1e43      	subs	r3, r0, #1
 8008600:	440a      	add	r2, r1
 8008602:	4291      	cmp	r1, r2
 8008604:	d100      	bne.n	8008608 <memcpy+0xc>
 8008606:	bd10      	pop	{r4, pc}
 8008608:	f811 4b01 	ldrb.w	r4, [r1], #1
 800860c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008610:	e7f7      	b.n	8008602 <memcpy+0x6>

08008612 <_Balloc>:
 8008612:	b570      	push	{r4, r5, r6, lr}
 8008614:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008616:	4604      	mov	r4, r0
 8008618:	460e      	mov	r6, r1
 800861a:	b93d      	cbnz	r5, 800862c <_Balloc+0x1a>
 800861c:	2010      	movs	r0, #16
 800861e:	f7ff ffd3 	bl	80085c8 <malloc>
 8008622:	6260      	str	r0, [r4, #36]	; 0x24
 8008624:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008628:	6005      	str	r5, [r0, #0]
 800862a:	60c5      	str	r5, [r0, #12]
 800862c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800862e:	68eb      	ldr	r3, [r5, #12]
 8008630:	b183      	cbz	r3, 8008654 <_Balloc+0x42>
 8008632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800863a:	b9b8      	cbnz	r0, 800866c <_Balloc+0x5a>
 800863c:	2101      	movs	r1, #1
 800863e:	fa01 f506 	lsl.w	r5, r1, r6
 8008642:	1d6a      	adds	r2, r5, #5
 8008644:	0092      	lsls	r2, r2, #2
 8008646:	4620      	mov	r0, r4
 8008648:	f000 fbe1 	bl	8008e0e <_calloc_r>
 800864c:	b160      	cbz	r0, 8008668 <_Balloc+0x56>
 800864e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008652:	e00e      	b.n	8008672 <_Balloc+0x60>
 8008654:	2221      	movs	r2, #33	; 0x21
 8008656:	2104      	movs	r1, #4
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fbd8 	bl	8008e0e <_calloc_r>
 800865e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008660:	60e8      	str	r0, [r5, #12]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d1e4      	bne.n	8008632 <_Balloc+0x20>
 8008668:	2000      	movs	r0, #0
 800866a:	bd70      	pop	{r4, r5, r6, pc}
 800866c:	6802      	ldr	r2, [r0, #0]
 800866e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008672:	2300      	movs	r3, #0
 8008674:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008678:	e7f7      	b.n	800866a <_Balloc+0x58>

0800867a <_Bfree>:
 800867a:	b570      	push	{r4, r5, r6, lr}
 800867c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800867e:	4606      	mov	r6, r0
 8008680:	460d      	mov	r5, r1
 8008682:	b93c      	cbnz	r4, 8008694 <_Bfree+0x1a>
 8008684:	2010      	movs	r0, #16
 8008686:	f7ff ff9f 	bl	80085c8 <malloc>
 800868a:	6270      	str	r0, [r6, #36]	; 0x24
 800868c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008690:	6004      	str	r4, [r0, #0]
 8008692:	60c4      	str	r4, [r0, #12]
 8008694:	b13d      	cbz	r5, 80086a6 <_Bfree+0x2c>
 8008696:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008698:	686a      	ldr	r2, [r5, #4]
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086a0:	6029      	str	r1, [r5, #0]
 80086a2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80086a6:	bd70      	pop	{r4, r5, r6, pc}

080086a8 <__multadd>:
 80086a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ac:	690d      	ldr	r5, [r1, #16]
 80086ae:	461f      	mov	r7, r3
 80086b0:	4606      	mov	r6, r0
 80086b2:	460c      	mov	r4, r1
 80086b4:	f101 0c14 	add.w	ip, r1, #20
 80086b8:	2300      	movs	r3, #0
 80086ba:	f8dc 0000 	ldr.w	r0, [ip]
 80086be:	b281      	uxth	r1, r0
 80086c0:	fb02 7101 	mla	r1, r2, r1, r7
 80086c4:	0c0f      	lsrs	r7, r1, #16
 80086c6:	0c00      	lsrs	r0, r0, #16
 80086c8:	fb02 7000 	mla	r0, r2, r0, r7
 80086cc:	b289      	uxth	r1, r1
 80086ce:	3301      	adds	r3, #1
 80086d0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80086d4:	429d      	cmp	r5, r3
 80086d6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80086da:	f84c 1b04 	str.w	r1, [ip], #4
 80086de:	dcec      	bgt.n	80086ba <__multadd+0x12>
 80086e0:	b1d7      	cbz	r7, 8008718 <__multadd+0x70>
 80086e2:	68a3      	ldr	r3, [r4, #8]
 80086e4:	42ab      	cmp	r3, r5
 80086e6:	dc12      	bgt.n	800870e <__multadd+0x66>
 80086e8:	6861      	ldr	r1, [r4, #4]
 80086ea:	4630      	mov	r0, r6
 80086ec:	3101      	adds	r1, #1
 80086ee:	f7ff ff90 	bl	8008612 <_Balloc>
 80086f2:	6922      	ldr	r2, [r4, #16]
 80086f4:	3202      	adds	r2, #2
 80086f6:	f104 010c 	add.w	r1, r4, #12
 80086fa:	4680      	mov	r8, r0
 80086fc:	0092      	lsls	r2, r2, #2
 80086fe:	300c      	adds	r0, #12
 8008700:	f7ff ff7c 	bl	80085fc <memcpy>
 8008704:	4621      	mov	r1, r4
 8008706:	4630      	mov	r0, r6
 8008708:	f7ff ffb7 	bl	800867a <_Bfree>
 800870c:	4644      	mov	r4, r8
 800870e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008712:	3501      	adds	r5, #1
 8008714:	615f      	str	r7, [r3, #20]
 8008716:	6125      	str	r5, [r4, #16]
 8008718:	4620      	mov	r0, r4
 800871a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800871e <__s2b>:
 800871e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008722:	460c      	mov	r4, r1
 8008724:	4615      	mov	r5, r2
 8008726:	461f      	mov	r7, r3
 8008728:	2209      	movs	r2, #9
 800872a:	3308      	adds	r3, #8
 800872c:	4606      	mov	r6, r0
 800872e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008732:	2100      	movs	r1, #0
 8008734:	2201      	movs	r2, #1
 8008736:	429a      	cmp	r2, r3
 8008738:	db20      	blt.n	800877c <__s2b+0x5e>
 800873a:	4630      	mov	r0, r6
 800873c:	f7ff ff69 	bl	8008612 <_Balloc>
 8008740:	9b08      	ldr	r3, [sp, #32]
 8008742:	6143      	str	r3, [r0, #20]
 8008744:	2d09      	cmp	r5, #9
 8008746:	f04f 0301 	mov.w	r3, #1
 800874a:	6103      	str	r3, [r0, #16]
 800874c:	dd19      	ble.n	8008782 <__s2b+0x64>
 800874e:	f104 0809 	add.w	r8, r4, #9
 8008752:	46c1      	mov	r9, r8
 8008754:	442c      	add	r4, r5
 8008756:	f819 3b01 	ldrb.w	r3, [r9], #1
 800875a:	4601      	mov	r1, r0
 800875c:	3b30      	subs	r3, #48	; 0x30
 800875e:	220a      	movs	r2, #10
 8008760:	4630      	mov	r0, r6
 8008762:	f7ff ffa1 	bl	80086a8 <__multadd>
 8008766:	45a1      	cmp	r9, r4
 8008768:	d1f5      	bne.n	8008756 <__s2b+0x38>
 800876a:	eb08 0405 	add.w	r4, r8, r5
 800876e:	3c08      	subs	r4, #8
 8008770:	1b2d      	subs	r5, r5, r4
 8008772:	1963      	adds	r3, r4, r5
 8008774:	42bb      	cmp	r3, r7
 8008776:	db07      	blt.n	8008788 <__s2b+0x6a>
 8008778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800877c:	0052      	lsls	r2, r2, #1
 800877e:	3101      	adds	r1, #1
 8008780:	e7d9      	b.n	8008736 <__s2b+0x18>
 8008782:	340a      	adds	r4, #10
 8008784:	2509      	movs	r5, #9
 8008786:	e7f3      	b.n	8008770 <__s2b+0x52>
 8008788:	f814 3b01 	ldrb.w	r3, [r4], #1
 800878c:	4601      	mov	r1, r0
 800878e:	3b30      	subs	r3, #48	; 0x30
 8008790:	220a      	movs	r2, #10
 8008792:	4630      	mov	r0, r6
 8008794:	f7ff ff88 	bl	80086a8 <__multadd>
 8008798:	e7eb      	b.n	8008772 <__s2b+0x54>

0800879a <__hi0bits>:
 800879a:	0c02      	lsrs	r2, r0, #16
 800879c:	0412      	lsls	r2, r2, #16
 800879e:	4603      	mov	r3, r0
 80087a0:	b9b2      	cbnz	r2, 80087d0 <__hi0bits+0x36>
 80087a2:	0403      	lsls	r3, r0, #16
 80087a4:	2010      	movs	r0, #16
 80087a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80087aa:	bf04      	itt	eq
 80087ac:	021b      	lsleq	r3, r3, #8
 80087ae:	3008      	addeq	r0, #8
 80087b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80087b4:	bf04      	itt	eq
 80087b6:	011b      	lsleq	r3, r3, #4
 80087b8:	3004      	addeq	r0, #4
 80087ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80087be:	bf04      	itt	eq
 80087c0:	009b      	lsleq	r3, r3, #2
 80087c2:	3002      	addeq	r0, #2
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	db06      	blt.n	80087d6 <__hi0bits+0x3c>
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	d503      	bpl.n	80087d4 <__hi0bits+0x3a>
 80087cc:	3001      	adds	r0, #1
 80087ce:	4770      	bx	lr
 80087d0:	2000      	movs	r0, #0
 80087d2:	e7e8      	b.n	80087a6 <__hi0bits+0xc>
 80087d4:	2020      	movs	r0, #32
 80087d6:	4770      	bx	lr

080087d8 <__lo0bits>:
 80087d8:	6803      	ldr	r3, [r0, #0]
 80087da:	f013 0207 	ands.w	r2, r3, #7
 80087de:	4601      	mov	r1, r0
 80087e0:	d00b      	beq.n	80087fa <__lo0bits+0x22>
 80087e2:	07da      	lsls	r2, r3, #31
 80087e4:	d423      	bmi.n	800882e <__lo0bits+0x56>
 80087e6:	0798      	lsls	r0, r3, #30
 80087e8:	bf49      	itett	mi
 80087ea:	085b      	lsrmi	r3, r3, #1
 80087ec:	089b      	lsrpl	r3, r3, #2
 80087ee:	2001      	movmi	r0, #1
 80087f0:	600b      	strmi	r3, [r1, #0]
 80087f2:	bf5c      	itt	pl
 80087f4:	600b      	strpl	r3, [r1, #0]
 80087f6:	2002      	movpl	r0, #2
 80087f8:	4770      	bx	lr
 80087fa:	b298      	uxth	r0, r3
 80087fc:	b9a8      	cbnz	r0, 800882a <__lo0bits+0x52>
 80087fe:	0c1b      	lsrs	r3, r3, #16
 8008800:	2010      	movs	r0, #16
 8008802:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008806:	bf04      	itt	eq
 8008808:	0a1b      	lsreq	r3, r3, #8
 800880a:	3008      	addeq	r0, #8
 800880c:	071a      	lsls	r2, r3, #28
 800880e:	bf04      	itt	eq
 8008810:	091b      	lsreq	r3, r3, #4
 8008812:	3004      	addeq	r0, #4
 8008814:	079a      	lsls	r2, r3, #30
 8008816:	bf04      	itt	eq
 8008818:	089b      	lsreq	r3, r3, #2
 800881a:	3002      	addeq	r0, #2
 800881c:	07da      	lsls	r2, r3, #31
 800881e:	d402      	bmi.n	8008826 <__lo0bits+0x4e>
 8008820:	085b      	lsrs	r3, r3, #1
 8008822:	d006      	beq.n	8008832 <__lo0bits+0x5a>
 8008824:	3001      	adds	r0, #1
 8008826:	600b      	str	r3, [r1, #0]
 8008828:	4770      	bx	lr
 800882a:	4610      	mov	r0, r2
 800882c:	e7e9      	b.n	8008802 <__lo0bits+0x2a>
 800882e:	2000      	movs	r0, #0
 8008830:	4770      	bx	lr
 8008832:	2020      	movs	r0, #32
 8008834:	4770      	bx	lr

08008836 <__i2b>:
 8008836:	b510      	push	{r4, lr}
 8008838:	460c      	mov	r4, r1
 800883a:	2101      	movs	r1, #1
 800883c:	f7ff fee9 	bl	8008612 <_Balloc>
 8008840:	2201      	movs	r2, #1
 8008842:	6144      	str	r4, [r0, #20]
 8008844:	6102      	str	r2, [r0, #16]
 8008846:	bd10      	pop	{r4, pc}

08008848 <__multiply>:
 8008848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800884c:	4614      	mov	r4, r2
 800884e:	690a      	ldr	r2, [r1, #16]
 8008850:	6923      	ldr	r3, [r4, #16]
 8008852:	429a      	cmp	r2, r3
 8008854:	bfb8      	it	lt
 8008856:	460b      	movlt	r3, r1
 8008858:	4688      	mov	r8, r1
 800885a:	bfbc      	itt	lt
 800885c:	46a0      	movlt	r8, r4
 800885e:	461c      	movlt	r4, r3
 8008860:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008864:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008868:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800886c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008870:	eb07 0609 	add.w	r6, r7, r9
 8008874:	42b3      	cmp	r3, r6
 8008876:	bfb8      	it	lt
 8008878:	3101      	addlt	r1, #1
 800887a:	f7ff feca 	bl	8008612 <_Balloc>
 800887e:	f100 0514 	add.w	r5, r0, #20
 8008882:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008886:	462b      	mov	r3, r5
 8008888:	2200      	movs	r2, #0
 800888a:	4573      	cmp	r3, lr
 800888c:	d316      	bcc.n	80088bc <__multiply+0x74>
 800888e:	f104 0214 	add.w	r2, r4, #20
 8008892:	f108 0114 	add.w	r1, r8, #20
 8008896:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800889a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	9b00      	ldr	r3, [sp, #0]
 80088a2:	9201      	str	r2, [sp, #4]
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d80c      	bhi.n	80088c2 <__multiply+0x7a>
 80088a8:	2e00      	cmp	r6, #0
 80088aa:	dd03      	ble.n	80088b4 <__multiply+0x6c>
 80088ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d05d      	beq.n	8008970 <__multiply+0x128>
 80088b4:	6106      	str	r6, [r0, #16]
 80088b6:	b003      	add	sp, #12
 80088b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088bc:	f843 2b04 	str.w	r2, [r3], #4
 80088c0:	e7e3      	b.n	800888a <__multiply+0x42>
 80088c2:	f8b2 b000 	ldrh.w	fp, [r2]
 80088c6:	f1bb 0f00 	cmp.w	fp, #0
 80088ca:	d023      	beq.n	8008914 <__multiply+0xcc>
 80088cc:	4689      	mov	r9, r1
 80088ce:	46ac      	mov	ip, r5
 80088d0:	f04f 0800 	mov.w	r8, #0
 80088d4:	f859 4b04 	ldr.w	r4, [r9], #4
 80088d8:	f8dc a000 	ldr.w	sl, [ip]
 80088dc:	b2a3      	uxth	r3, r4
 80088de:	fa1f fa8a 	uxth.w	sl, sl
 80088e2:	fb0b a303 	mla	r3, fp, r3, sl
 80088e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80088ea:	f8dc 4000 	ldr.w	r4, [ip]
 80088ee:	4443      	add	r3, r8
 80088f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80088f4:	fb0b 840a 	mla	r4, fp, sl, r8
 80088f8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80088fc:	46e2      	mov	sl, ip
 80088fe:	b29b      	uxth	r3, r3
 8008900:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008904:	454f      	cmp	r7, r9
 8008906:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800890a:	f84a 3b04 	str.w	r3, [sl], #4
 800890e:	d82b      	bhi.n	8008968 <__multiply+0x120>
 8008910:	f8cc 8004 	str.w	r8, [ip, #4]
 8008914:	9b01      	ldr	r3, [sp, #4]
 8008916:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800891a:	3204      	adds	r2, #4
 800891c:	f1ba 0f00 	cmp.w	sl, #0
 8008920:	d020      	beq.n	8008964 <__multiply+0x11c>
 8008922:	682b      	ldr	r3, [r5, #0]
 8008924:	4689      	mov	r9, r1
 8008926:	46a8      	mov	r8, r5
 8008928:	f04f 0b00 	mov.w	fp, #0
 800892c:	f8b9 c000 	ldrh.w	ip, [r9]
 8008930:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008934:	fb0a 440c 	mla	r4, sl, ip, r4
 8008938:	445c      	add	r4, fp
 800893a:	46c4      	mov	ip, r8
 800893c:	b29b      	uxth	r3, r3
 800893e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008942:	f84c 3b04 	str.w	r3, [ip], #4
 8008946:	f859 3b04 	ldr.w	r3, [r9], #4
 800894a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800894e:	0c1b      	lsrs	r3, r3, #16
 8008950:	fb0a b303 	mla	r3, sl, r3, fp
 8008954:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008958:	454f      	cmp	r7, r9
 800895a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800895e:	d805      	bhi.n	800896c <__multiply+0x124>
 8008960:	f8c8 3004 	str.w	r3, [r8, #4]
 8008964:	3504      	adds	r5, #4
 8008966:	e79b      	b.n	80088a0 <__multiply+0x58>
 8008968:	46d4      	mov	ip, sl
 800896a:	e7b3      	b.n	80088d4 <__multiply+0x8c>
 800896c:	46e0      	mov	r8, ip
 800896e:	e7dd      	b.n	800892c <__multiply+0xe4>
 8008970:	3e01      	subs	r6, #1
 8008972:	e799      	b.n	80088a8 <__multiply+0x60>

08008974 <__pow5mult>:
 8008974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008978:	4615      	mov	r5, r2
 800897a:	f012 0203 	ands.w	r2, r2, #3
 800897e:	4606      	mov	r6, r0
 8008980:	460f      	mov	r7, r1
 8008982:	d007      	beq.n	8008994 <__pow5mult+0x20>
 8008984:	3a01      	subs	r2, #1
 8008986:	4c21      	ldr	r4, [pc, #132]	; (8008a0c <__pow5mult+0x98>)
 8008988:	2300      	movs	r3, #0
 800898a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800898e:	f7ff fe8b 	bl	80086a8 <__multadd>
 8008992:	4607      	mov	r7, r0
 8008994:	10ad      	asrs	r5, r5, #2
 8008996:	d035      	beq.n	8008a04 <__pow5mult+0x90>
 8008998:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800899a:	b93c      	cbnz	r4, 80089ac <__pow5mult+0x38>
 800899c:	2010      	movs	r0, #16
 800899e:	f7ff fe13 	bl	80085c8 <malloc>
 80089a2:	6270      	str	r0, [r6, #36]	; 0x24
 80089a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089a8:	6004      	str	r4, [r0, #0]
 80089aa:	60c4      	str	r4, [r0, #12]
 80089ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80089b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089b4:	b94c      	cbnz	r4, 80089ca <__pow5mult+0x56>
 80089b6:	f240 2171 	movw	r1, #625	; 0x271
 80089ba:	4630      	mov	r0, r6
 80089bc:	f7ff ff3b 	bl	8008836 <__i2b>
 80089c0:	2300      	movs	r3, #0
 80089c2:	f8c8 0008 	str.w	r0, [r8, #8]
 80089c6:	4604      	mov	r4, r0
 80089c8:	6003      	str	r3, [r0, #0]
 80089ca:	f04f 0800 	mov.w	r8, #0
 80089ce:	07eb      	lsls	r3, r5, #31
 80089d0:	d50a      	bpl.n	80089e8 <__pow5mult+0x74>
 80089d2:	4639      	mov	r1, r7
 80089d4:	4622      	mov	r2, r4
 80089d6:	4630      	mov	r0, r6
 80089d8:	f7ff ff36 	bl	8008848 <__multiply>
 80089dc:	4639      	mov	r1, r7
 80089de:	4681      	mov	r9, r0
 80089e0:	4630      	mov	r0, r6
 80089e2:	f7ff fe4a 	bl	800867a <_Bfree>
 80089e6:	464f      	mov	r7, r9
 80089e8:	106d      	asrs	r5, r5, #1
 80089ea:	d00b      	beq.n	8008a04 <__pow5mult+0x90>
 80089ec:	6820      	ldr	r0, [r4, #0]
 80089ee:	b938      	cbnz	r0, 8008a00 <__pow5mult+0x8c>
 80089f0:	4622      	mov	r2, r4
 80089f2:	4621      	mov	r1, r4
 80089f4:	4630      	mov	r0, r6
 80089f6:	f7ff ff27 	bl	8008848 <__multiply>
 80089fa:	6020      	str	r0, [r4, #0]
 80089fc:	f8c0 8000 	str.w	r8, [r0]
 8008a00:	4604      	mov	r4, r0
 8008a02:	e7e4      	b.n	80089ce <__pow5mult+0x5a>
 8008a04:	4638      	mov	r0, r7
 8008a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a0a:	bf00      	nop
 8008a0c:	080099e8 	.word	0x080099e8

08008a10 <__lshift>:
 8008a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a14:	460c      	mov	r4, r1
 8008a16:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a1a:	6923      	ldr	r3, [r4, #16]
 8008a1c:	6849      	ldr	r1, [r1, #4]
 8008a1e:	eb0a 0903 	add.w	r9, sl, r3
 8008a22:	68a3      	ldr	r3, [r4, #8]
 8008a24:	4607      	mov	r7, r0
 8008a26:	4616      	mov	r6, r2
 8008a28:	f109 0501 	add.w	r5, r9, #1
 8008a2c:	42ab      	cmp	r3, r5
 8008a2e:	db32      	blt.n	8008a96 <__lshift+0x86>
 8008a30:	4638      	mov	r0, r7
 8008a32:	f7ff fdee 	bl	8008612 <_Balloc>
 8008a36:	2300      	movs	r3, #0
 8008a38:	4680      	mov	r8, r0
 8008a3a:	f100 0114 	add.w	r1, r0, #20
 8008a3e:	461a      	mov	r2, r3
 8008a40:	4553      	cmp	r3, sl
 8008a42:	db2b      	blt.n	8008a9c <__lshift+0x8c>
 8008a44:	6920      	ldr	r0, [r4, #16]
 8008a46:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008a4a:	f104 0314 	add.w	r3, r4, #20
 8008a4e:	f016 021f 	ands.w	r2, r6, #31
 8008a52:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008a56:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008a5a:	d025      	beq.n	8008aa8 <__lshift+0x98>
 8008a5c:	f1c2 0e20 	rsb	lr, r2, #32
 8008a60:	2000      	movs	r0, #0
 8008a62:	681e      	ldr	r6, [r3, #0]
 8008a64:	468a      	mov	sl, r1
 8008a66:	4096      	lsls	r6, r2
 8008a68:	4330      	orrs	r0, r6
 8008a6a:	f84a 0b04 	str.w	r0, [sl], #4
 8008a6e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008a72:	459c      	cmp	ip, r3
 8008a74:	fa20 f00e 	lsr.w	r0, r0, lr
 8008a78:	d814      	bhi.n	8008aa4 <__lshift+0x94>
 8008a7a:	6048      	str	r0, [r1, #4]
 8008a7c:	b108      	cbz	r0, 8008a82 <__lshift+0x72>
 8008a7e:	f109 0502 	add.w	r5, r9, #2
 8008a82:	3d01      	subs	r5, #1
 8008a84:	4638      	mov	r0, r7
 8008a86:	f8c8 5010 	str.w	r5, [r8, #16]
 8008a8a:	4621      	mov	r1, r4
 8008a8c:	f7ff fdf5 	bl	800867a <_Bfree>
 8008a90:	4640      	mov	r0, r8
 8008a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a96:	3101      	adds	r1, #1
 8008a98:	005b      	lsls	r3, r3, #1
 8008a9a:	e7c7      	b.n	8008a2c <__lshift+0x1c>
 8008a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	e7cd      	b.n	8008a40 <__lshift+0x30>
 8008aa4:	4651      	mov	r1, sl
 8008aa6:	e7dc      	b.n	8008a62 <__lshift+0x52>
 8008aa8:	3904      	subs	r1, #4
 8008aaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8008aae:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ab2:	459c      	cmp	ip, r3
 8008ab4:	d8f9      	bhi.n	8008aaa <__lshift+0x9a>
 8008ab6:	e7e4      	b.n	8008a82 <__lshift+0x72>

08008ab8 <__mcmp>:
 8008ab8:	6903      	ldr	r3, [r0, #16]
 8008aba:	690a      	ldr	r2, [r1, #16]
 8008abc:	1a9b      	subs	r3, r3, r2
 8008abe:	b530      	push	{r4, r5, lr}
 8008ac0:	d10c      	bne.n	8008adc <__mcmp+0x24>
 8008ac2:	0092      	lsls	r2, r2, #2
 8008ac4:	3014      	adds	r0, #20
 8008ac6:	3114      	adds	r1, #20
 8008ac8:	1884      	adds	r4, r0, r2
 8008aca:	4411      	add	r1, r2
 8008acc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ad0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ad4:	4295      	cmp	r5, r2
 8008ad6:	d003      	beq.n	8008ae0 <__mcmp+0x28>
 8008ad8:	d305      	bcc.n	8008ae6 <__mcmp+0x2e>
 8008ada:	2301      	movs	r3, #1
 8008adc:	4618      	mov	r0, r3
 8008ade:	bd30      	pop	{r4, r5, pc}
 8008ae0:	42a0      	cmp	r0, r4
 8008ae2:	d3f3      	bcc.n	8008acc <__mcmp+0x14>
 8008ae4:	e7fa      	b.n	8008adc <__mcmp+0x24>
 8008ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aea:	e7f7      	b.n	8008adc <__mcmp+0x24>

08008aec <__mdiff>:
 8008aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008af0:	460d      	mov	r5, r1
 8008af2:	4607      	mov	r7, r0
 8008af4:	4611      	mov	r1, r2
 8008af6:	4628      	mov	r0, r5
 8008af8:	4614      	mov	r4, r2
 8008afa:	f7ff ffdd 	bl	8008ab8 <__mcmp>
 8008afe:	1e06      	subs	r6, r0, #0
 8008b00:	d108      	bne.n	8008b14 <__mdiff+0x28>
 8008b02:	4631      	mov	r1, r6
 8008b04:	4638      	mov	r0, r7
 8008b06:	f7ff fd84 	bl	8008612 <_Balloc>
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b14:	bfa4      	itt	ge
 8008b16:	4623      	movge	r3, r4
 8008b18:	462c      	movge	r4, r5
 8008b1a:	4638      	mov	r0, r7
 8008b1c:	6861      	ldr	r1, [r4, #4]
 8008b1e:	bfa6      	itte	ge
 8008b20:	461d      	movge	r5, r3
 8008b22:	2600      	movge	r6, #0
 8008b24:	2601      	movlt	r6, #1
 8008b26:	f7ff fd74 	bl	8008612 <_Balloc>
 8008b2a:	692b      	ldr	r3, [r5, #16]
 8008b2c:	60c6      	str	r6, [r0, #12]
 8008b2e:	6926      	ldr	r6, [r4, #16]
 8008b30:	f105 0914 	add.w	r9, r5, #20
 8008b34:	f104 0214 	add.w	r2, r4, #20
 8008b38:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008b3c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008b40:	f100 0514 	add.w	r5, r0, #20
 8008b44:	f04f 0e00 	mov.w	lr, #0
 8008b48:	f852 ab04 	ldr.w	sl, [r2], #4
 8008b4c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008b50:	fa1e f18a 	uxtah	r1, lr, sl
 8008b54:	b2a3      	uxth	r3, r4
 8008b56:	1ac9      	subs	r1, r1, r3
 8008b58:	0c23      	lsrs	r3, r4, #16
 8008b5a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008b5e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008b62:	b289      	uxth	r1, r1
 8008b64:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008b68:	45c8      	cmp	r8, r9
 8008b6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008b6e:	4694      	mov	ip, r2
 8008b70:	f845 3b04 	str.w	r3, [r5], #4
 8008b74:	d8e8      	bhi.n	8008b48 <__mdiff+0x5c>
 8008b76:	45bc      	cmp	ip, r7
 8008b78:	d304      	bcc.n	8008b84 <__mdiff+0x98>
 8008b7a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008b7e:	b183      	cbz	r3, 8008ba2 <__mdiff+0xb6>
 8008b80:	6106      	str	r6, [r0, #16]
 8008b82:	e7c5      	b.n	8008b10 <__mdiff+0x24>
 8008b84:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008b88:	fa1e f381 	uxtah	r3, lr, r1
 8008b8c:	141a      	asrs	r2, r3, #16
 8008b8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b98:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008b9c:	f845 3b04 	str.w	r3, [r5], #4
 8008ba0:	e7e9      	b.n	8008b76 <__mdiff+0x8a>
 8008ba2:	3e01      	subs	r6, #1
 8008ba4:	e7e9      	b.n	8008b7a <__mdiff+0x8e>
	...

08008ba8 <__ulp>:
 8008ba8:	4b12      	ldr	r3, [pc, #72]	; (8008bf4 <__ulp+0x4c>)
 8008baa:	ee10 2a90 	vmov	r2, s1
 8008bae:	401a      	ands	r2, r3
 8008bb0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	dd04      	ble.n	8008bc2 <__ulp+0x1a>
 8008bb8:	2000      	movs	r0, #0
 8008bba:	4619      	mov	r1, r3
 8008bbc:	ec41 0b10 	vmov	d0, r0, r1
 8008bc0:	4770      	bx	lr
 8008bc2:	425b      	negs	r3, r3
 8008bc4:	151b      	asrs	r3, r3, #20
 8008bc6:	2b13      	cmp	r3, #19
 8008bc8:	f04f 0000 	mov.w	r0, #0
 8008bcc:	f04f 0100 	mov.w	r1, #0
 8008bd0:	dc04      	bgt.n	8008bdc <__ulp+0x34>
 8008bd2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008bd6:	fa42 f103 	asr.w	r1, r2, r3
 8008bda:	e7ef      	b.n	8008bbc <__ulp+0x14>
 8008bdc:	3b14      	subs	r3, #20
 8008bde:	2b1e      	cmp	r3, #30
 8008be0:	f04f 0201 	mov.w	r2, #1
 8008be4:	bfda      	itte	le
 8008be6:	f1c3 031f 	rsble	r3, r3, #31
 8008bea:	fa02 f303 	lslle.w	r3, r2, r3
 8008bee:	4613      	movgt	r3, r2
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	e7e3      	b.n	8008bbc <__ulp+0x14>
 8008bf4:	7ff00000 	.word	0x7ff00000

08008bf8 <__b2d>:
 8008bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bfa:	6905      	ldr	r5, [r0, #16]
 8008bfc:	f100 0714 	add.w	r7, r0, #20
 8008c00:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008c04:	1f2e      	subs	r6, r5, #4
 8008c06:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	f7ff fdc5 	bl	800879a <__hi0bits>
 8008c10:	f1c0 0320 	rsb	r3, r0, #32
 8008c14:	280a      	cmp	r0, #10
 8008c16:	600b      	str	r3, [r1, #0]
 8008c18:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008c90 <__b2d+0x98>
 8008c1c:	dc14      	bgt.n	8008c48 <__b2d+0x50>
 8008c1e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008c22:	fa24 f10e 	lsr.w	r1, r4, lr
 8008c26:	42b7      	cmp	r7, r6
 8008c28:	ea41 030c 	orr.w	r3, r1, ip
 8008c2c:	bf34      	ite	cc
 8008c2e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008c32:	2100      	movcs	r1, #0
 8008c34:	3015      	adds	r0, #21
 8008c36:	fa04 f000 	lsl.w	r0, r4, r0
 8008c3a:	fa21 f10e 	lsr.w	r1, r1, lr
 8008c3e:	ea40 0201 	orr.w	r2, r0, r1
 8008c42:	ec43 2b10 	vmov	d0, r2, r3
 8008c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c48:	42b7      	cmp	r7, r6
 8008c4a:	bf3a      	itte	cc
 8008c4c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008c50:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008c54:	2100      	movcs	r1, #0
 8008c56:	380b      	subs	r0, #11
 8008c58:	d015      	beq.n	8008c86 <__b2d+0x8e>
 8008c5a:	4084      	lsls	r4, r0
 8008c5c:	f1c0 0520 	rsb	r5, r0, #32
 8008c60:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008c64:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008c68:	42be      	cmp	r6, r7
 8008c6a:	fa21 fc05 	lsr.w	ip, r1, r5
 8008c6e:	ea44 030c 	orr.w	r3, r4, ip
 8008c72:	bf8c      	ite	hi
 8008c74:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008c78:	2400      	movls	r4, #0
 8008c7a:	fa01 f000 	lsl.w	r0, r1, r0
 8008c7e:	40ec      	lsrs	r4, r5
 8008c80:	ea40 0204 	orr.w	r2, r0, r4
 8008c84:	e7dd      	b.n	8008c42 <__b2d+0x4a>
 8008c86:	ea44 030c 	orr.w	r3, r4, ip
 8008c8a:	460a      	mov	r2, r1
 8008c8c:	e7d9      	b.n	8008c42 <__b2d+0x4a>
 8008c8e:	bf00      	nop
 8008c90:	3ff00000 	.word	0x3ff00000

08008c94 <__d2b>:
 8008c94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008c98:	460e      	mov	r6, r1
 8008c9a:	2101      	movs	r1, #1
 8008c9c:	ec59 8b10 	vmov	r8, r9, d0
 8008ca0:	4615      	mov	r5, r2
 8008ca2:	f7ff fcb6 	bl	8008612 <_Balloc>
 8008ca6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008caa:	4607      	mov	r7, r0
 8008cac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008cb0:	bb34      	cbnz	r4, 8008d00 <__d2b+0x6c>
 8008cb2:	9301      	str	r3, [sp, #4]
 8008cb4:	f1b8 0300 	subs.w	r3, r8, #0
 8008cb8:	d027      	beq.n	8008d0a <__d2b+0x76>
 8008cba:	a802      	add	r0, sp, #8
 8008cbc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008cc0:	f7ff fd8a 	bl	80087d8 <__lo0bits>
 8008cc4:	9900      	ldr	r1, [sp, #0]
 8008cc6:	b1f0      	cbz	r0, 8008d06 <__d2b+0x72>
 8008cc8:	9a01      	ldr	r2, [sp, #4]
 8008cca:	f1c0 0320 	rsb	r3, r0, #32
 8008cce:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd2:	430b      	orrs	r3, r1
 8008cd4:	40c2      	lsrs	r2, r0
 8008cd6:	617b      	str	r3, [r7, #20]
 8008cd8:	9201      	str	r2, [sp, #4]
 8008cda:	9b01      	ldr	r3, [sp, #4]
 8008cdc:	61bb      	str	r3, [r7, #24]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	bf14      	ite	ne
 8008ce2:	2102      	movne	r1, #2
 8008ce4:	2101      	moveq	r1, #1
 8008ce6:	6139      	str	r1, [r7, #16]
 8008ce8:	b1c4      	cbz	r4, 8008d1c <__d2b+0x88>
 8008cea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008cee:	4404      	add	r4, r0
 8008cf0:	6034      	str	r4, [r6, #0]
 8008cf2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008cf6:	6028      	str	r0, [r5, #0]
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	b003      	add	sp, #12
 8008cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d04:	e7d5      	b.n	8008cb2 <__d2b+0x1e>
 8008d06:	6179      	str	r1, [r7, #20]
 8008d08:	e7e7      	b.n	8008cda <__d2b+0x46>
 8008d0a:	a801      	add	r0, sp, #4
 8008d0c:	f7ff fd64 	bl	80087d8 <__lo0bits>
 8008d10:	9b01      	ldr	r3, [sp, #4]
 8008d12:	617b      	str	r3, [r7, #20]
 8008d14:	2101      	movs	r1, #1
 8008d16:	6139      	str	r1, [r7, #16]
 8008d18:	3020      	adds	r0, #32
 8008d1a:	e7e5      	b.n	8008ce8 <__d2b+0x54>
 8008d1c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008d20:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008d24:	6030      	str	r0, [r6, #0]
 8008d26:	6918      	ldr	r0, [r3, #16]
 8008d28:	f7ff fd37 	bl	800879a <__hi0bits>
 8008d2c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008d30:	e7e1      	b.n	8008cf6 <__d2b+0x62>

08008d32 <__ratio>:
 8008d32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d36:	4688      	mov	r8, r1
 8008d38:	4669      	mov	r1, sp
 8008d3a:	4681      	mov	r9, r0
 8008d3c:	f7ff ff5c 	bl	8008bf8 <__b2d>
 8008d40:	a901      	add	r1, sp, #4
 8008d42:	4640      	mov	r0, r8
 8008d44:	ec57 6b10 	vmov	r6, r7, d0
 8008d48:	f7ff ff56 	bl	8008bf8 <__b2d>
 8008d4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008d50:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008d54:	eba3 0c02 	sub.w	ip, r3, r2
 8008d58:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008d5c:	1a9b      	subs	r3, r3, r2
 8008d5e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008d62:	ec5b ab10 	vmov	sl, fp, d0
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	bfce      	itee	gt
 8008d6a:	463a      	movgt	r2, r7
 8008d6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008d70:	465a      	movle	r2, fp
 8008d72:	4659      	mov	r1, fp
 8008d74:	463d      	mov	r5, r7
 8008d76:	bfd4      	ite	le
 8008d78:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008d7c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008d80:	4630      	mov	r0, r6
 8008d82:	ee10 2a10 	vmov	r2, s0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4629      	mov	r1, r5
 8008d8a:	f7f7 fd5f 	bl	800084c <__aeabi_ddiv>
 8008d8e:	ec41 0b10 	vmov	d0, r0, r1
 8008d92:	b003      	add	sp, #12
 8008d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008d98 <__copybits>:
 8008d98:	3901      	subs	r1, #1
 8008d9a:	b510      	push	{r4, lr}
 8008d9c:	1149      	asrs	r1, r1, #5
 8008d9e:	6914      	ldr	r4, [r2, #16]
 8008da0:	3101      	adds	r1, #1
 8008da2:	f102 0314 	add.w	r3, r2, #20
 8008da6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008daa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008dae:	42a3      	cmp	r3, r4
 8008db0:	4602      	mov	r2, r0
 8008db2:	d303      	bcc.n	8008dbc <__copybits+0x24>
 8008db4:	2300      	movs	r3, #0
 8008db6:	428a      	cmp	r2, r1
 8008db8:	d305      	bcc.n	8008dc6 <__copybits+0x2e>
 8008dba:	bd10      	pop	{r4, pc}
 8008dbc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dc0:	f840 2b04 	str.w	r2, [r0], #4
 8008dc4:	e7f3      	b.n	8008dae <__copybits+0x16>
 8008dc6:	f842 3b04 	str.w	r3, [r2], #4
 8008dca:	e7f4      	b.n	8008db6 <__copybits+0x1e>

08008dcc <__any_on>:
 8008dcc:	f100 0214 	add.w	r2, r0, #20
 8008dd0:	6900      	ldr	r0, [r0, #16]
 8008dd2:	114b      	asrs	r3, r1, #5
 8008dd4:	4298      	cmp	r0, r3
 8008dd6:	b510      	push	{r4, lr}
 8008dd8:	db11      	blt.n	8008dfe <__any_on+0x32>
 8008dda:	dd0a      	ble.n	8008df2 <__any_on+0x26>
 8008ddc:	f011 011f 	ands.w	r1, r1, #31
 8008de0:	d007      	beq.n	8008df2 <__any_on+0x26>
 8008de2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008de6:	fa24 f001 	lsr.w	r0, r4, r1
 8008dea:	fa00 f101 	lsl.w	r1, r0, r1
 8008dee:	428c      	cmp	r4, r1
 8008df0:	d10b      	bne.n	8008e0a <__any_on+0x3e>
 8008df2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d803      	bhi.n	8008e02 <__any_on+0x36>
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	bd10      	pop	{r4, pc}
 8008dfe:	4603      	mov	r3, r0
 8008e00:	e7f7      	b.n	8008df2 <__any_on+0x26>
 8008e02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e06:	2900      	cmp	r1, #0
 8008e08:	d0f5      	beq.n	8008df6 <__any_on+0x2a>
 8008e0a:	2001      	movs	r0, #1
 8008e0c:	e7f6      	b.n	8008dfc <__any_on+0x30>

08008e0e <_calloc_r>:
 8008e0e:	b538      	push	{r3, r4, r5, lr}
 8008e10:	fb02 f401 	mul.w	r4, r2, r1
 8008e14:	4621      	mov	r1, r4
 8008e16:	f000 f857 	bl	8008ec8 <_malloc_r>
 8008e1a:	4605      	mov	r5, r0
 8008e1c:	b118      	cbz	r0, 8008e26 <_calloc_r+0x18>
 8008e1e:	4622      	mov	r2, r4
 8008e20:	2100      	movs	r1, #0
 8008e22:	f7fc fa1d 	bl	8005260 <memset>
 8008e26:	4628      	mov	r0, r5
 8008e28:	bd38      	pop	{r3, r4, r5, pc}
	...

08008e2c <_free_r>:
 8008e2c:	b538      	push	{r3, r4, r5, lr}
 8008e2e:	4605      	mov	r5, r0
 8008e30:	2900      	cmp	r1, #0
 8008e32:	d045      	beq.n	8008ec0 <_free_r+0x94>
 8008e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e38:	1f0c      	subs	r4, r1, #4
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	bfb8      	it	lt
 8008e3e:	18e4      	addlt	r4, r4, r3
 8008e40:	f000 fc0f 	bl	8009662 <__malloc_lock>
 8008e44:	4a1f      	ldr	r2, [pc, #124]	; (8008ec4 <_free_r+0x98>)
 8008e46:	6813      	ldr	r3, [r2, #0]
 8008e48:	4610      	mov	r0, r2
 8008e4a:	b933      	cbnz	r3, 8008e5a <_free_r+0x2e>
 8008e4c:	6063      	str	r3, [r4, #4]
 8008e4e:	6014      	str	r4, [r2, #0]
 8008e50:	4628      	mov	r0, r5
 8008e52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e56:	f000 bc05 	b.w	8009664 <__malloc_unlock>
 8008e5a:	42a3      	cmp	r3, r4
 8008e5c:	d90c      	bls.n	8008e78 <_free_r+0x4c>
 8008e5e:	6821      	ldr	r1, [r4, #0]
 8008e60:	1862      	adds	r2, r4, r1
 8008e62:	4293      	cmp	r3, r2
 8008e64:	bf04      	itt	eq
 8008e66:	681a      	ldreq	r2, [r3, #0]
 8008e68:	685b      	ldreq	r3, [r3, #4]
 8008e6a:	6063      	str	r3, [r4, #4]
 8008e6c:	bf04      	itt	eq
 8008e6e:	1852      	addeq	r2, r2, r1
 8008e70:	6022      	streq	r2, [r4, #0]
 8008e72:	6004      	str	r4, [r0, #0]
 8008e74:	e7ec      	b.n	8008e50 <_free_r+0x24>
 8008e76:	4613      	mov	r3, r2
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	b10a      	cbz	r2, 8008e80 <_free_r+0x54>
 8008e7c:	42a2      	cmp	r2, r4
 8008e7e:	d9fa      	bls.n	8008e76 <_free_r+0x4a>
 8008e80:	6819      	ldr	r1, [r3, #0]
 8008e82:	1858      	adds	r0, r3, r1
 8008e84:	42a0      	cmp	r0, r4
 8008e86:	d10b      	bne.n	8008ea0 <_free_r+0x74>
 8008e88:	6820      	ldr	r0, [r4, #0]
 8008e8a:	4401      	add	r1, r0
 8008e8c:	1858      	adds	r0, r3, r1
 8008e8e:	4282      	cmp	r2, r0
 8008e90:	6019      	str	r1, [r3, #0]
 8008e92:	d1dd      	bne.n	8008e50 <_free_r+0x24>
 8008e94:	6810      	ldr	r0, [r2, #0]
 8008e96:	6852      	ldr	r2, [r2, #4]
 8008e98:	605a      	str	r2, [r3, #4]
 8008e9a:	4401      	add	r1, r0
 8008e9c:	6019      	str	r1, [r3, #0]
 8008e9e:	e7d7      	b.n	8008e50 <_free_r+0x24>
 8008ea0:	d902      	bls.n	8008ea8 <_free_r+0x7c>
 8008ea2:	230c      	movs	r3, #12
 8008ea4:	602b      	str	r3, [r5, #0]
 8008ea6:	e7d3      	b.n	8008e50 <_free_r+0x24>
 8008ea8:	6820      	ldr	r0, [r4, #0]
 8008eaa:	1821      	adds	r1, r4, r0
 8008eac:	428a      	cmp	r2, r1
 8008eae:	bf04      	itt	eq
 8008eb0:	6811      	ldreq	r1, [r2, #0]
 8008eb2:	6852      	ldreq	r2, [r2, #4]
 8008eb4:	6062      	str	r2, [r4, #4]
 8008eb6:	bf04      	itt	eq
 8008eb8:	1809      	addeq	r1, r1, r0
 8008eba:	6021      	streq	r1, [r4, #0]
 8008ebc:	605c      	str	r4, [r3, #4]
 8008ebe:	e7c7      	b.n	8008e50 <_free_r+0x24>
 8008ec0:	bd38      	pop	{r3, r4, r5, pc}
 8008ec2:	bf00      	nop
 8008ec4:	200002c4 	.word	0x200002c4

08008ec8 <_malloc_r>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	1ccd      	adds	r5, r1, #3
 8008ecc:	f025 0503 	bic.w	r5, r5, #3
 8008ed0:	3508      	adds	r5, #8
 8008ed2:	2d0c      	cmp	r5, #12
 8008ed4:	bf38      	it	cc
 8008ed6:	250c      	movcc	r5, #12
 8008ed8:	2d00      	cmp	r5, #0
 8008eda:	4606      	mov	r6, r0
 8008edc:	db01      	blt.n	8008ee2 <_malloc_r+0x1a>
 8008ede:	42a9      	cmp	r1, r5
 8008ee0:	d903      	bls.n	8008eea <_malloc_r+0x22>
 8008ee2:	230c      	movs	r3, #12
 8008ee4:	6033      	str	r3, [r6, #0]
 8008ee6:	2000      	movs	r0, #0
 8008ee8:	bd70      	pop	{r4, r5, r6, pc}
 8008eea:	f000 fbba 	bl	8009662 <__malloc_lock>
 8008eee:	4a21      	ldr	r2, [pc, #132]	; (8008f74 <_malloc_r+0xac>)
 8008ef0:	6814      	ldr	r4, [r2, #0]
 8008ef2:	4621      	mov	r1, r4
 8008ef4:	b991      	cbnz	r1, 8008f1c <_malloc_r+0x54>
 8008ef6:	4c20      	ldr	r4, [pc, #128]	; (8008f78 <_malloc_r+0xb0>)
 8008ef8:	6823      	ldr	r3, [r4, #0]
 8008efa:	b91b      	cbnz	r3, 8008f04 <_malloc_r+0x3c>
 8008efc:	4630      	mov	r0, r6
 8008efe:	f000 facf 	bl	80094a0 <_sbrk_r>
 8008f02:	6020      	str	r0, [r4, #0]
 8008f04:	4629      	mov	r1, r5
 8008f06:	4630      	mov	r0, r6
 8008f08:	f000 faca 	bl	80094a0 <_sbrk_r>
 8008f0c:	1c43      	adds	r3, r0, #1
 8008f0e:	d124      	bne.n	8008f5a <_malloc_r+0x92>
 8008f10:	230c      	movs	r3, #12
 8008f12:	6033      	str	r3, [r6, #0]
 8008f14:	4630      	mov	r0, r6
 8008f16:	f000 fba5 	bl	8009664 <__malloc_unlock>
 8008f1a:	e7e4      	b.n	8008ee6 <_malloc_r+0x1e>
 8008f1c:	680b      	ldr	r3, [r1, #0]
 8008f1e:	1b5b      	subs	r3, r3, r5
 8008f20:	d418      	bmi.n	8008f54 <_malloc_r+0x8c>
 8008f22:	2b0b      	cmp	r3, #11
 8008f24:	d90f      	bls.n	8008f46 <_malloc_r+0x7e>
 8008f26:	600b      	str	r3, [r1, #0]
 8008f28:	50cd      	str	r5, [r1, r3]
 8008f2a:	18cc      	adds	r4, r1, r3
 8008f2c:	4630      	mov	r0, r6
 8008f2e:	f000 fb99 	bl	8009664 <__malloc_unlock>
 8008f32:	f104 000b 	add.w	r0, r4, #11
 8008f36:	1d23      	adds	r3, r4, #4
 8008f38:	f020 0007 	bic.w	r0, r0, #7
 8008f3c:	1ac3      	subs	r3, r0, r3
 8008f3e:	d0d3      	beq.n	8008ee8 <_malloc_r+0x20>
 8008f40:	425a      	negs	r2, r3
 8008f42:	50e2      	str	r2, [r4, r3]
 8008f44:	e7d0      	b.n	8008ee8 <_malloc_r+0x20>
 8008f46:	428c      	cmp	r4, r1
 8008f48:	684b      	ldr	r3, [r1, #4]
 8008f4a:	bf16      	itet	ne
 8008f4c:	6063      	strne	r3, [r4, #4]
 8008f4e:	6013      	streq	r3, [r2, #0]
 8008f50:	460c      	movne	r4, r1
 8008f52:	e7eb      	b.n	8008f2c <_malloc_r+0x64>
 8008f54:	460c      	mov	r4, r1
 8008f56:	6849      	ldr	r1, [r1, #4]
 8008f58:	e7cc      	b.n	8008ef4 <_malloc_r+0x2c>
 8008f5a:	1cc4      	adds	r4, r0, #3
 8008f5c:	f024 0403 	bic.w	r4, r4, #3
 8008f60:	42a0      	cmp	r0, r4
 8008f62:	d005      	beq.n	8008f70 <_malloc_r+0xa8>
 8008f64:	1a21      	subs	r1, r4, r0
 8008f66:	4630      	mov	r0, r6
 8008f68:	f000 fa9a 	bl	80094a0 <_sbrk_r>
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	d0cf      	beq.n	8008f10 <_malloc_r+0x48>
 8008f70:	6025      	str	r5, [r4, #0]
 8008f72:	e7db      	b.n	8008f2c <_malloc_r+0x64>
 8008f74:	200002c4 	.word	0x200002c4
 8008f78:	200002c8 	.word	0x200002c8

08008f7c <__ssputs_r>:
 8008f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f80:	688e      	ldr	r6, [r1, #8]
 8008f82:	429e      	cmp	r6, r3
 8008f84:	4682      	mov	sl, r0
 8008f86:	460c      	mov	r4, r1
 8008f88:	4690      	mov	r8, r2
 8008f8a:	4699      	mov	r9, r3
 8008f8c:	d837      	bhi.n	8008ffe <__ssputs_r+0x82>
 8008f8e:	898a      	ldrh	r2, [r1, #12]
 8008f90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f94:	d031      	beq.n	8008ffa <__ssputs_r+0x7e>
 8008f96:	6825      	ldr	r5, [r4, #0]
 8008f98:	6909      	ldr	r1, [r1, #16]
 8008f9a:	1a6f      	subs	r7, r5, r1
 8008f9c:	6965      	ldr	r5, [r4, #20]
 8008f9e:	2302      	movs	r3, #2
 8008fa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fa4:	fb95 f5f3 	sdiv	r5, r5, r3
 8008fa8:	f109 0301 	add.w	r3, r9, #1
 8008fac:	443b      	add	r3, r7
 8008fae:	429d      	cmp	r5, r3
 8008fb0:	bf38      	it	cc
 8008fb2:	461d      	movcc	r5, r3
 8008fb4:	0553      	lsls	r3, r2, #21
 8008fb6:	d530      	bpl.n	800901a <__ssputs_r+0x9e>
 8008fb8:	4629      	mov	r1, r5
 8008fba:	f7ff ff85 	bl	8008ec8 <_malloc_r>
 8008fbe:	4606      	mov	r6, r0
 8008fc0:	b950      	cbnz	r0, 8008fd8 <__ssputs_r+0x5c>
 8008fc2:	230c      	movs	r3, #12
 8008fc4:	f8ca 3000 	str.w	r3, [sl]
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fce:	81a3      	strh	r3, [r4, #12]
 8008fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd8:	463a      	mov	r2, r7
 8008fda:	6921      	ldr	r1, [r4, #16]
 8008fdc:	f7ff fb0e 	bl	80085fc <memcpy>
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	6126      	str	r6, [r4, #16]
 8008fee:	6165      	str	r5, [r4, #20]
 8008ff0:	443e      	add	r6, r7
 8008ff2:	1bed      	subs	r5, r5, r7
 8008ff4:	6026      	str	r6, [r4, #0]
 8008ff6:	60a5      	str	r5, [r4, #8]
 8008ff8:	464e      	mov	r6, r9
 8008ffa:	454e      	cmp	r6, r9
 8008ffc:	d900      	bls.n	8009000 <__ssputs_r+0x84>
 8008ffe:	464e      	mov	r6, r9
 8009000:	4632      	mov	r2, r6
 8009002:	4641      	mov	r1, r8
 8009004:	6820      	ldr	r0, [r4, #0]
 8009006:	f000 fb13 	bl	8009630 <memmove>
 800900a:	68a3      	ldr	r3, [r4, #8]
 800900c:	1b9b      	subs	r3, r3, r6
 800900e:	60a3      	str	r3, [r4, #8]
 8009010:	6823      	ldr	r3, [r4, #0]
 8009012:	441e      	add	r6, r3
 8009014:	6026      	str	r6, [r4, #0]
 8009016:	2000      	movs	r0, #0
 8009018:	e7dc      	b.n	8008fd4 <__ssputs_r+0x58>
 800901a:	462a      	mov	r2, r5
 800901c:	f000 fb23 	bl	8009666 <_realloc_r>
 8009020:	4606      	mov	r6, r0
 8009022:	2800      	cmp	r0, #0
 8009024:	d1e2      	bne.n	8008fec <__ssputs_r+0x70>
 8009026:	6921      	ldr	r1, [r4, #16]
 8009028:	4650      	mov	r0, sl
 800902a:	f7ff feff 	bl	8008e2c <_free_r>
 800902e:	e7c8      	b.n	8008fc2 <__ssputs_r+0x46>

08009030 <_svfiprintf_r>:
 8009030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	461d      	mov	r5, r3
 8009036:	898b      	ldrh	r3, [r1, #12]
 8009038:	061f      	lsls	r7, r3, #24
 800903a:	b09d      	sub	sp, #116	; 0x74
 800903c:	4680      	mov	r8, r0
 800903e:	460c      	mov	r4, r1
 8009040:	4616      	mov	r6, r2
 8009042:	d50f      	bpl.n	8009064 <_svfiprintf_r+0x34>
 8009044:	690b      	ldr	r3, [r1, #16]
 8009046:	b96b      	cbnz	r3, 8009064 <_svfiprintf_r+0x34>
 8009048:	2140      	movs	r1, #64	; 0x40
 800904a:	f7ff ff3d 	bl	8008ec8 <_malloc_r>
 800904e:	6020      	str	r0, [r4, #0]
 8009050:	6120      	str	r0, [r4, #16]
 8009052:	b928      	cbnz	r0, 8009060 <_svfiprintf_r+0x30>
 8009054:	230c      	movs	r3, #12
 8009056:	f8c8 3000 	str.w	r3, [r8]
 800905a:	f04f 30ff 	mov.w	r0, #4294967295
 800905e:	e0c8      	b.n	80091f2 <_svfiprintf_r+0x1c2>
 8009060:	2340      	movs	r3, #64	; 0x40
 8009062:	6163      	str	r3, [r4, #20]
 8009064:	2300      	movs	r3, #0
 8009066:	9309      	str	r3, [sp, #36]	; 0x24
 8009068:	2320      	movs	r3, #32
 800906a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800906e:	2330      	movs	r3, #48	; 0x30
 8009070:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009074:	9503      	str	r5, [sp, #12]
 8009076:	f04f 0b01 	mov.w	fp, #1
 800907a:	4637      	mov	r7, r6
 800907c:	463d      	mov	r5, r7
 800907e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009082:	b10b      	cbz	r3, 8009088 <_svfiprintf_r+0x58>
 8009084:	2b25      	cmp	r3, #37	; 0x25
 8009086:	d13e      	bne.n	8009106 <_svfiprintf_r+0xd6>
 8009088:	ebb7 0a06 	subs.w	sl, r7, r6
 800908c:	d00b      	beq.n	80090a6 <_svfiprintf_r+0x76>
 800908e:	4653      	mov	r3, sl
 8009090:	4632      	mov	r2, r6
 8009092:	4621      	mov	r1, r4
 8009094:	4640      	mov	r0, r8
 8009096:	f7ff ff71 	bl	8008f7c <__ssputs_r>
 800909a:	3001      	adds	r0, #1
 800909c:	f000 80a4 	beq.w	80091e8 <_svfiprintf_r+0x1b8>
 80090a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a2:	4453      	add	r3, sl
 80090a4:	9309      	str	r3, [sp, #36]	; 0x24
 80090a6:	783b      	ldrb	r3, [r7, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	f000 809d 	beq.w	80091e8 <_svfiprintf_r+0x1b8>
 80090ae:	2300      	movs	r3, #0
 80090b0:	f04f 32ff 	mov.w	r2, #4294967295
 80090b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090b8:	9304      	str	r3, [sp, #16]
 80090ba:	9307      	str	r3, [sp, #28]
 80090bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090c0:	931a      	str	r3, [sp, #104]	; 0x68
 80090c2:	462f      	mov	r7, r5
 80090c4:	2205      	movs	r2, #5
 80090c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80090ca:	4850      	ldr	r0, [pc, #320]	; (800920c <_svfiprintf_r+0x1dc>)
 80090cc:	f7f7 f888 	bl	80001e0 <memchr>
 80090d0:	9b04      	ldr	r3, [sp, #16]
 80090d2:	b9d0      	cbnz	r0, 800910a <_svfiprintf_r+0xda>
 80090d4:	06d9      	lsls	r1, r3, #27
 80090d6:	bf44      	itt	mi
 80090d8:	2220      	movmi	r2, #32
 80090da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80090de:	071a      	lsls	r2, r3, #28
 80090e0:	bf44      	itt	mi
 80090e2:	222b      	movmi	r2, #43	; 0x2b
 80090e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80090e8:	782a      	ldrb	r2, [r5, #0]
 80090ea:	2a2a      	cmp	r2, #42	; 0x2a
 80090ec:	d015      	beq.n	800911a <_svfiprintf_r+0xea>
 80090ee:	9a07      	ldr	r2, [sp, #28]
 80090f0:	462f      	mov	r7, r5
 80090f2:	2000      	movs	r0, #0
 80090f4:	250a      	movs	r5, #10
 80090f6:	4639      	mov	r1, r7
 80090f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090fc:	3b30      	subs	r3, #48	; 0x30
 80090fe:	2b09      	cmp	r3, #9
 8009100:	d94d      	bls.n	800919e <_svfiprintf_r+0x16e>
 8009102:	b1b8      	cbz	r0, 8009134 <_svfiprintf_r+0x104>
 8009104:	e00f      	b.n	8009126 <_svfiprintf_r+0xf6>
 8009106:	462f      	mov	r7, r5
 8009108:	e7b8      	b.n	800907c <_svfiprintf_r+0x4c>
 800910a:	4a40      	ldr	r2, [pc, #256]	; (800920c <_svfiprintf_r+0x1dc>)
 800910c:	1a80      	subs	r0, r0, r2
 800910e:	fa0b f000 	lsl.w	r0, fp, r0
 8009112:	4318      	orrs	r0, r3
 8009114:	9004      	str	r0, [sp, #16]
 8009116:	463d      	mov	r5, r7
 8009118:	e7d3      	b.n	80090c2 <_svfiprintf_r+0x92>
 800911a:	9a03      	ldr	r2, [sp, #12]
 800911c:	1d11      	adds	r1, r2, #4
 800911e:	6812      	ldr	r2, [r2, #0]
 8009120:	9103      	str	r1, [sp, #12]
 8009122:	2a00      	cmp	r2, #0
 8009124:	db01      	blt.n	800912a <_svfiprintf_r+0xfa>
 8009126:	9207      	str	r2, [sp, #28]
 8009128:	e004      	b.n	8009134 <_svfiprintf_r+0x104>
 800912a:	4252      	negs	r2, r2
 800912c:	f043 0302 	orr.w	r3, r3, #2
 8009130:	9207      	str	r2, [sp, #28]
 8009132:	9304      	str	r3, [sp, #16]
 8009134:	783b      	ldrb	r3, [r7, #0]
 8009136:	2b2e      	cmp	r3, #46	; 0x2e
 8009138:	d10c      	bne.n	8009154 <_svfiprintf_r+0x124>
 800913a:	787b      	ldrb	r3, [r7, #1]
 800913c:	2b2a      	cmp	r3, #42	; 0x2a
 800913e:	d133      	bne.n	80091a8 <_svfiprintf_r+0x178>
 8009140:	9b03      	ldr	r3, [sp, #12]
 8009142:	1d1a      	adds	r2, r3, #4
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	9203      	str	r2, [sp, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	bfb8      	it	lt
 800914c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009150:	3702      	adds	r7, #2
 8009152:	9305      	str	r3, [sp, #20]
 8009154:	4d2e      	ldr	r5, [pc, #184]	; (8009210 <_svfiprintf_r+0x1e0>)
 8009156:	7839      	ldrb	r1, [r7, #0]
 8009158:	2203      	movs	r2, #3
 800915a:	4628      	mov	r0, r5
 800915c:	f7f7 f840 	bl	80001e0 <memchr>
 8009160:	b138      	cbz	r0, 8009172 <_svfiprintf_r+0x142>
 8009162:	2340      	movs	r3, #64	; 0x40
 8009164:	1b40      	subs	r0, r0, r5
 8009166:	fa03 f000 	lsl.w	r0, r3, r0
 800916a:	9b04      	ldr	r3, [sp, #16]
 800916c:	4303      	orrs	r3, r0
 800916e:	3701      	adds	r7, #1
 8009170:	9304      	str	r3, [sp, #16]
 8009172:	7839      	ldrb	r1, [r7, #0]
 8009174:	4827      	ldr	r0, [pc, #156]	; (8009214 <_svfiprintf_r+0x1e4>)
 8009176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800917a:	2206      	movs	r2, #6
 800917c:	1c7e      	adds	r6, r7, #1
 800917e:	f7f7 f82f 	bl	80001e0 <memchr>
 8009182:	2800      	cmp	r0, #0
 8009184:	d038      	beq.n	80091f8 <_svfiprintf_r+0x1c8>
 8009186:	4b24      	ldr	r3, [pc, #144]	; (8009218 <_svfiprintf_r+0x1e8>)
 8009188:	bb13      	cbnz	r3, 80091d0 <_svfiprintf_r+0x1a0>
 800918a:	9b03      	ldr	r3, [sp, #12]
 800918c:	3307      	adds	r3, #7
 800918e:	f023 0307 	bic.w	r3, r3, #7
 8009192:	3308      	adds	r3, #8
 8009194:	9303      	str	r3, [sp, #12]
 8009196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009198:	444b      	add	r3, r9
 800919a:	9309      	str	r3, [sp, #36]	; 0x24
 800919c:	e76d      	b.n	800907a <_svfiprintf_r+0x4a>
 800919e:	fb05 3202 	mla	r2, r5, r2, r3
 80091a2:	2001      	movs	r0, #1
 80091a4:	460f      	mov	r7, r1
 80091a6:	e7a6      	b.n	80090f6 <_svfiprintf_r+0xc6>
 80091a8:	2300      	movs	r3, #0
 80091aa:	3701      	adds	r7, #1
 80091ac:	9305      	str	r3, [sp, #20]
 80091ae:	4619      	mov	r1, r3
 80091b0:	250a      	movs	r5, #10
 80091b2:	4638      	mov	r0, r7
 80091b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091b8:	3a30      	subs	r2, #48	; 0x30
 80091ba:	2a09      	cmp	r2, #9
 80091bc:	d903      	bls.n	80091c6 <_svfiprintf_r+0x196>
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d0c8      	beq.n	8009154 <_svfiprintf_r+0x124>
 80091c2:	9105      	str	r1, [sp, #20]
 80091c4:	e7c6      	b.n	8009154 <_svfiprintf_r+0x124>
 80091c6:	fb05 2101 	mla	r1, r5, r1, r2
 80091ca:	2301      	movs	r3, #1
 80091cc:	4607      	mov	r7, r0
 80091ce:	e7f0      	b.n	80091b2 <_svfiprintf_r+0x182>
 80091d0:	ab03      	add	r3, sp, #12
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	4622      	mov	r2, r4
 80091d6:	4b11      	ldr	r3, [pc, #68]	; (800921c <_svfiprintf_r+0x1ec>)
 80091d8:	a904      	add	r1, sp, #16
 80091da:	4640      	mov	r0, r8
 80091dc:	f7fc f8dc 	bl	8005398 <_printf_float>
 80091e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80091e4:	4681      	mov	r9, r0
 80091e6:	d1d6      	bne.n	8009196 <_svfiprintf_r+0x166>
 80091e8:	89a3      	ldrh	r3, [r4, #12]
 80091ea:	065b      	lsls	r3, r3, #25
 80091ec:	f53f af35 	bmi.w	800905a <_svfiprintf_r+0x2a>
 80091f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091f2:	b01d      	add	sp, #116	; 0x74
 80091f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f8:	ab03      	add	r3, sp, #12
 80091fa:	9300      	str	r3, [sp, #0]
 80091fc:	4622      	mov	r2, r4
 80091fe:	4b07      	ldr	r3, [pc, #28]	; (800921c <_svfiprintf_r+0x1ec>)
 8009200:	a904      	add	r1, sp, #16
 8009202:	4640      	mov	r0, r8
 8009204:	f7fc fb7e 	bl	8005904 <_printf_i>
 8009208:	e7ea      	b.n	80091e0 <_svfiprintf_r+0x1b0>
 800920a:	bf00      	nop
 800920c:	080099f4 	.word	0x080099f4
 8009210:	080099fa 	.word	0x080099fa
 8009214:	080099fe 	.word	0x080099fe
 8009218:	08005399 	.word	0x08005399
 800921c:	08008f7d 	.word	0x08008f7d

08009220 <__sfputc_r>:
 8009220:	6893      	ldr	r3, [r2, #8]
 8009222:	3b01      	subs	r3, #1
 8009224:	2b00      	cmp	r3, #0
 8009226:	b410      	push	{r4}
 8009228:	6093      	str	r3, [r2, #8]
 800922a:	da08      	bge.n	800923e <__sfputc_r+0x1e>
 800922c:	6994      	ldr	r4, [r2, #24]
 800922e:	42a3      	cmp	r3, r4
 8009230:	db01      	blt.n	8009236 <__sfputc_r+0x16>
 8009232:	290a      	cmp	r1, #10
 8009234:	d103      	bne.n	800923e <__sfputc_r+0x1e>
 8009236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800923a:	f7fd bda7 	b.w	8006d8c <__swbuf_r>
 800923e:	6813      	ldr	r3, [r2, #0]
 8009240:	1c58      	adds	r0, r3, #1
 8009242:	6010      	str	r0, [r2, #0]
 8009244:	7019      	strb	r1, [r3, #0]
 8009246:	4608      	mov	r0, r1
 8009248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800924c:	4770      	bx	lr

0800924e <__sfputs_r>:
 800924e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009250:	4606      	mov	r6, r0
 8009252:	460f      	mov	r7, r1
 8009254:	4614      	mov	r4, r2
 8009256:	18d5      	adds	r5, r2, r3
 8009258:	42ac      	cmp	r4, r5
 800925a:	d101      	bne.n	8009260 <__sfputs_r+0x12>
 800925c:	2000      	movs	r0, #0
 800925e:	e007      	b.n	8009270 <__sfputs_r+0x22>
 8009260:	463a      	mov	r2, r7
 8009262:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009266:	4630      	mov	r0, r6
 8009268:	f7ff ffda 	bl	8009220 <__sfputc_r>
 800926c:	1c43      	adds	r3, r0, #1
 800926e:	d1f3      	bne.n	8009258 <__sfputs_r+0xa>
 8009270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009274 <_vfiprintf_r>:
 8009274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009278:	460c      	mov	r4, r1
 800927a:	b09d      	sub	sp, #116	; 0x74
 800927c:	4617      	mov	r7, r2
 800927e:	461d      	mov	r5, r3
 8009280:	4606      	mov	r6, r0
 8009282:	b118      	cbz	r0, 800928c <_vfiprintf_r+0x18>
 8009284:	6983      	ldr	r3, [r0, #24]
 8009286:	b90b      	cbnz	r3, 800928c <_vfiprintf_r+0x18>
 8009288:	f7fe fd76 	bl	8007d78 <__sinit>
 800928c:	4b7c      	ldr	r3, [pc, #496]	; (8009480 <_vfiprintf_r+0x20c>)
 800928e:	429c      	cmp	r4, r3
 8009290:	d158      	bne.n	8009344 <_vfiprintf_r+0xd0>
 8009292:	6874      	ldr	r4, [r6, #4]
 8009294:	89a3      	ldrh	r3, [r4, #12]
 8009296:	0718      	lsls	r0, r3, #28
 8009298:	d55e      	bpl.n	8009358 <_vfiprintf_r+0xe4>
 800929a:	6923      	ldr	r3, [r4, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d05b      	beq.n	8009358 <_vfiprintf_r+0xe4>
 80092a0:	2300      	movs	r3, #0
 80092a2:	9309      	str	r3, [sp, #36]	; 0x24
 80092a4:	2320      	movs	r3, #32
 80092a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092aa:	2330      	movs	r3, #48	; 0x30
 80092ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092b0:	9503      	str	r5, [sp, #12]
 80092b2:	f04f 0b01 	mov.w	fp, #1
 80092b6:	46b8      	mov	r8, r7
 80092b8:	4645      	mov	r5, r8
 80092ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80092be:	b10b      	cbz	r3, 80092c4 <_vfiprintf_r+0x50>
 80092c0:	2b25      	cmp	r3, #37	; 0x25
 80092c2:	d154      	bne.n	800936e <_vfiprintf_r+0xfa>
 80092c4:	ebb8 0a07 	subs.w	sl, r8, r7
 80092c8:	d00b      	beq.n	80092e2 <_vfiprintf_r+0x6e>
 80092ca:	4653      	mov	r3, sl
 80092cc:	463a      	mov	r2, r7
 80092ce:	4621      	mov	r1, r4
 80092d0:	4630      	mov	r0, r6
 80092d2:	f7ff ffbc 	bl	800924e <__sfputs_r>
 80092d6:	3001      	adds	r0, #1
 80092d8:	f000 80c2 	beq.w	8009460 <_vfiprintf_r+0x1ec>
 80092dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092de:	4453      	add	r3, sl
 80092e0:	9309      	str	r3, [sp, #36]	; 0x24
 80092e2:	f898 3000 	ldrb.w	r3, [r8]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	f000 80ba 	beq.w	8009460 <_vfiprintf_r+0x1ec>
 80092ec:	2300      	movs	r3, #0
 80092ee:	f04f 32ff 	mov.w	r2, #4294967295
 80092f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092f6:	9304      	str	r3, [sp, #16]
 80092f8:	9307      	str	r3, [sp, #28]
 80092fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092fe:	931a      	str	r3, [sp, #104]	; 0x68
 8009300:	46a8      	mov	r8, r5
 8009302:	2205      	movs	r2, #5
 8009304:	f818 1b01 	ldrb.w	r1, [r8], #1
 8009308:	485e      	ldr	r0, [pc, #376]	; (8009484 <_vfiprintf_r+0x210>)
 800930a:	f7f6 ff69 	bl	80001e0 <memchr>
 800930e:	9b04      	ldr	r3, [sp, #16]
 8009310:	bb78      	cbnz	r0, 8009372 <_vfiprintf_r+0xfe>
 8009312:	06d9      	lsls	r1, r3, #27
 8009314:	bf44      	itt	mi
 8009316:	2220      	movmi	r2, #32
 8009318:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800931c:	071a      	lsls	r2, r3, #28
 800931e:	bf44      	itt	mi
 8009320:	222b      	movmi	r2, #43	; 0x2b
 8009322:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009326:	782a      	ldrb	r2, [r5, #0]
 8009328:	2a2a      	cmp	r2, #42	; 0x2a
 800932a:	d02a      	beq.n	8009382 <_vfiprintf_r+0x10e>
 800932c:	9a07      	ldr	r2, [sp, #28]
 800932e:	46a8      	mov	r8, r5
 8009330:	2000      	movs	r0, #0
 8009332:	250a      	movs	r5, #10
 8009334:	4641      	mov	r1, r8
 8009336:	f811 3b01 	ldrb.w	r3, [r1], #1
 800933a:	3b30      	subs	r3, #48	; 0x30
 800933c:	2b09      	cmp	r3, #9
 800933e:	d969      	bls.n	8009414 <_vfiprintf_r+0x1a0>
 8009340:	b360      	cbz	r0, 800939c <_vfiprintf_r+0x128>
 8009342:	e024      	b.n	800938e <_vfiprintf_r+0x11a>
 8009344:	4b50      	ldr	r3, [pc, #320]	; (8009488 <_vfiprintf_r+0x214>)
 8009346:	429c      	cmp	r4, r3
 8009348:	d101      	bne.n	800934e <_vfiprintf_r+0xda>
 800934a:	68b4      	ldr	r4, [r6, #8]
 800934c:	e7a2      	b.n	8009294 <_vfiprintf_r+0x20>
 800934e:	4b4f      	ldr	r3, [pc, #316]	; (800948c <_vfiprintf_r+0x218>)
 8009350:	429c      	cmp	r4, r3
 8009352:	bf08      	it	eq
 8009354:	68f4      	ldreq	r4, [r6, #12]
 8009356:	e79d      	b.n	8009294 <_vfiprintf_r+0x20>
 8009358:	4621      	mov	r1, r4
 800935a:	4630      	mov	r0, r6
 800935c:	f7fd fd68 	bl	8006e30 <__swsetup_r>
 8009360:	2800      	cmp	r0, #0
 8009362:	d09d      	beq.n	80092a0 <_vfiprintf_r+0x2c>
 8009364:	f04f 30ff 	mov.w	r0, #4294967295
 8009368:	b01d      	add	sp, #116	; 0x74
 800936a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936e:	46a8      	mov	r8, r5
 8009370:	e7a2      	b.n	80092b8 <_vfiprintf_r+0x44>
 8009372:	4a44      	ldr	r2, [pc, #272]	; (8009484 <_vfiprintf_r+0x210>)
 8009374:	1a80      	subs	r0, r0, r2
 8009376:	fa0b f000 	lsl.w	r0, fp, r0
 800937a:	4318      	orrs	r0, r3
 800937c:	9004      	str	r0, [sp, #16]
 800937e:	4645      	mov	r5, r8
 8009380:	e7be      	b.n	8009300 <_vfiprintf_r+0x8c>
 8009382:	9a03      	ldr	r2, [sp, #12]
 8009384:	1d11      	adds	r1, r2, #4
 8009386:	6812      	ldr	r2, [r2, #0]
 8009388:	9103      	str	r1, [sp, #12]
 800938a:	2a00      	cmp	r2, #0
 800938c:	db01      	blt.n	8009392 <_vfiprintf_r+0x11e>
 800938e:	9207      	str	r2, [sp, #28]
 8009390:	e004      	b.n	800939c <_vfiprintf_r+0x128>
 8009392:	4252      	negs	r2, r2
 8009394:	f043 0302 	orr.w	r3, r3, #2
 8009398:	9207      	str	r2, [sp, #28]
 800939a:	9304      	str	r3, [sp, #16]
 800939c:	f898 3000 	ldrb.w	r3, [r8]
 80093a0:	2b2e      	cmp	r3, #46	; 0x2e
 80093a2:	d10e      	bne.n	80093c2 <_vfiprintf_r+0x14e>
 80093a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80093a8:	2b2a      	cmp	r3, #42	; 0x2a
 80093aa:	d138      	bne.n	800941e <_vfiprintf_r+0x1aa>
 80093ac:	9b03      	ldr	r3, [sp, #12]
 80093ae:	1d1a      	adds	r2, r3, #4
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	9203      	str	r2, [sp, #12]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	bfb8      	it	lt
 80093b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80093bc:	f108 0802 	add.w	r8, r8, #2
 80093c0:	9305      	str	r3, [sp, #20]
 80093c2:	4d33      	ldr	r5, [pc, #204]	; (8009490 <_vfiprintf_r+0x21c>)
 80093c4:	f898 1000 	ldrb.w	r1, [r8]
 80093c8:	2203      	movs	r2, #3
 80093ca:	4628      	mov	r0, r5
 80093cc:	f7f6 ff08 	bl	80001e0 <memchr>
 80093d0:	b140      	cbz	r0, 80093e4 <_vfiprintf_r+0x170>
 80093d2:	2340      	movs	r3, #64	; 0x40
 80093d4:	1b40      	subs	r0, r0, r5
 80093d6:	fa03 f000 	lsl.w	r0, r3, r0
 80093da:	9b04      	ldr	r3, [sp, #16]
 80093dc:	4303      	orrs	r3, r0
 80093de:	f108 0801 	add.w	r8, r8, #1
 80093e2:	9304      	str	r3, [sp, #16]
 80093e4:	f898 1000 	ldrb.w	r1, [r8]
 80093e8:	482a      	ldr	r0, [pc, #168]	; (8009494 <_vfiprintf_r+0x220>)
 80093ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093ee:	2206      	movs	r2, #6
 80093f0:	f108 0701 	add.w	r7, r8, #1
 80093f4:	f7f6 fef4 	bl	80001e0 <memchr>
 80093f8:	2800      	cmp	r0, #0
 80093fa:	d037      	beq.n	800946c <_vfiprintf_r+0x1f8>
 80093fc:	4b26      	ldr	r3, [pc, #152]	; (8009498 <_vfiprintf_r+0x224>)
 80093fe:	bb1b      	cbnz	r3, 8009448 <_vfiprintf_r+0x1d4>
 8009400:	9b03      	ldr	r3, [sp, #12]
 8009402:	3307      	adds	r3, #7
 8009404:	f023 0307 	bic.w	r3, r3, #7
 8009408:	3308      	adds	r3, #8
 800940a:	9303      	str	r3, [sp, #12]
 800940c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800940e:	444b      	add	r3, r9
 8009410:	9309      	str	r3, [sp, #36]	; 0x24
 8009412:	e750      	b.n	80092b6 <_vfiprintf_r+0x42>
 8009414:	fb05 3202 	mla	r2, r5, r2, r3
 8009418:	2001      	movs	r0, #1
 800941a:	4688      	mov	r8, r1
 800941c:	e78a      	b.n	8009334 <_vfiprintf_r+0xc0>
 800941e:	2300      	movs	r3, #0
 8009420:	f108 0801 	add.w	r8, r8, #1
 8009424:	9305      	str	r3, [sp, #20]
 8009426:	4619      	mov	r1, r3
 8009428:	250a      	movs	r5, #10
 800942a:	4640      	mov	r0, r8
 800942c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009430:	3a30      	subs	r2, #48	; 0x30
 8009432:	2a09      	cmp	r2, #9
 8009434:	d903      	bls.n	800943e <_vfiprintf_r+0x1ca>
 8009436:	2b00      	cmp	r3, #0
 8009438:	d0c3      	beq.n	80093c2 <_vfiprintf_r+0x14e>
 800943a:	9105      	str	r1, [sp, #20]
 800943c:	e7c1      	b.n	80093c2 <_vfiprintf_r+0x14e>
 800943e:	fb05 2101 	mla	r1, r5, r1, r2
 8009442:	2301      	movs	r3, #1
 8009444:	4680      	mov	r8, r0
 8009446:	e7f0      	b.n	800942a <_vfiprintf_r+0x1b6>
 8009448:	ab03      	add	r3, sp, #12
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	4622      	mov	r2, r4
 800944e:	4b13      	ldr	r3, [pc, #76]	; (800949c <_vfiprintf_r+0x228>)
 8009450:	a904      	add	r1, sp, #16
 8009452:	4630      	mov	r0, r6
 8009454:	f7fb ffa0 	bl	8005398 <_printf_float>
 8009458:	f1b0 3fff 	cmp.w	r0, #4294967295
 800945c:	4681      	mov	r9, r0
 800945e:	d1d5      	bne.n	800940c <_vfiprintf_r+0x198>
 8009460:	89a3      	ldrh	r3, [r4, #12]
 8009462:	065b      	lsls	r3, r3, #25
 8009464:	f53f af7e 	bmi.w	8009364 <_vfiprintf_r+0xf0>
 8009468:	9809      	ldr	r0, [sp, #36]	; 0x24
 800946a:	e77d      	b.n	8009368 <_vfiprintf_r+0xf4>
 800946c:	ab03      	add	r3, sp, #12
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	4622      	mov	r2, r4
 8009472:	4b0a      	ldr	r3, [pc, #40]	; (800949c <_vfiprintf_r+0x228>)
 8009474:	a904      	add	r1, sp, #16
 8009476:	4630      	mov	r0, r6
 8009478:	f7fc fa44 	bl	8005904 <_printf_i>
 800947c:	e7ec      	b.n	8009458 <_vfiprintf_r+0x1e4>
 800947e:	bf00      	nop
 8009480:	080098a8 	.word	0x080098a8
 8009484:	080099f4 	.word	0x080099f4
 8009488:	080098c8 	.word	0x080098c8
 800948c:	08009888 	.word	0x08009888
 8009490:	080099fa 	.word	0x080099fa
 8009494:	080099fe 	.word	0x080099fe
 8009498:	08005399 	.word	0x08005399
 800949c:	0800924f 	.word	0x0800924f

080094a0 <_sbrk_r>:
 80094a0:	b538      	push	{r3, r4, r5, lr}
 80094a2:	4c06      	ldr	r4, [pc, #24]	; (80094bc <_sbrk_r+0x1c>)
 80094a4:	2300      	movs	r3, #0
 80094a6:	4605      	mov	r5, r0
 80094a8:	4608      	mov	r0, r1
 80094aa:	6023      	str	r3, [r4, #0]
 80094ac:	f7f8 fe1e 	bl	80020ec <_sbrk>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d102      	bne.n	80094ba <_sbrk_r+0x1a>
 80094b4:	6823      	ldr	r3, [r4, #0]
 80094b6:	b103      	cbz	r3, 80094ba <_sbrk_r+0x1a>
 80094b8:	602b      	str	r3, [r5, #0]
 80094ba:	bd38      	pop	{r3, r4, r5, pc}
 80094bc:	20000408 	.word	0x20000408

080094c0 <__sread>:
 80094c0:	b510      	push	{r4, lr}
 80094c2:	460c      	mov	r4, r1
 80094c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c8:	f000 f8f4 	bl	80096b4 <_read_r>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	bfab      	itete	ge
 80094d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094d2:	89a3      	ldrhlt	r3, [r4, #12]
 80094d4:	181b      	addge	r3, r3, r0
 80094d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094da:	bfac      	ite	ge
 80094dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80094de:	81a3      	strhlt	r3, [r4, #12]
 80094e0:	bd10      	pop	{r4, pc}

080094e2 <__swrite>:
 80094e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094e6:	461f      	mov	r7, r3
 80094e8:	898b      	ldrh	r3, [r1, #12]
 80094ea:	05db      	lsls	r3, r3, #23
 80094ec:	4605      	mov	r5, r0
 80094ee:	460c      	mov	r4, r1
 80094f0:	4616      	mov	r6, r2
 80094f2:	d505      	bpl.n	8009500 <__swrite+0x1e>
 80094f4:	2302      	movs	r3, #2
 80094f6:	2200      	movs	r2, #0
 80094f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094fc:	f000 f886 	bl	800960c <_lseek_r>
 8009500:	89a3      	ldrh	r3, [r4, #12]
 8009502:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009506:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800950a:	81a3      	strh	r3, [r4, #12]
 800950c:	4632      	mov	r2, r6
 800950e:	463b      	mov	r3, r7
 8009510:	4628      	mov	r0, r5
 8009512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009516:	f000 b835 	b.w	8009584 <_write_r>

0800951a <__sseek>:
 800951a:	b510      	push	{r4, lr}
 800951c:	460c      	mov	r4, r1
 800951e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009522:	f000 f873 	bl	800960c <_lseek_r>
 8009526:	1c43      	adds	r3, r0, #1
 8009528:	89a3      	ldrh	r3, [r4, #12]
 800952a:	bf15      	itete	ne
 800952c:	6560      	strne	r0, [r4, #84]	; 0x54
 800952e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009532:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009536:	81a3      	strheq	r3, [r4, #12]
 8009538:	bf18      	it	ne
 800953a:	81a3      	strhne	r3, [r4, #12]
 800953c:	bd10      	pop	{r4, pc}

0800953e <__sclose>:
 800953e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009542:	f000 b831 	b.w	80095a8 <_close_r>

08009546 <strncmp>:
 8009546:	b510      	push	{r4, lr}
 8009548:	b16a      	cbz	r2, 8009566 <strncmp+0x20>
 800954a:	3901      	subs	r1, #1
 800954c:	1884      	adds	r4, r0, r2
 800954e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009552:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009556:	4293      	cmp	r3, r2
 8009558:	d103      	bne.n	8009562 <strncmp+0x1c>
 800955a:	42a0      	cmp	r0, r4
 800955c:	d001      	beq.n	8009562 <strncmp+0x1c>
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1f5      	bne.n	800954e <strncmp+0x8>
 8009562:	1a98      	subs	r0, r3, r2
 8009564:	bd10      	pop	{r4, pc}
 8009566:	4610      	mov	r0, r2
 8009568:	e7fc      	b.n	8009564 <strncmp+0x1e>

0800956a <__ascii_wctomb>:
 800956a:	b149      	cbz	r1, 8009580 <__ascii_wctomb+0x16>
 800956c:	2aff      	cmp	r2, #255	; 0xff
 800956e:	bf85      	ittet	hi
 8009570:	238a      	movhi	r3, #138	; 0x8a
 8009572:	6003      	strhi	r3, [r0, #0]
 8009574:	700a      	strbls	r2, [r1, #0]
 8009576:	f04f 30ff 	movhi.w	r0, #4294967295
 800957a:	bf98      	it	ls
 800957c:	2001      	movls	r0, #1
 800957e:	4770      	bx	lr
 8009580:	4608      	mov	r0, r1
 8009582:	4770      	bx	lr

08009584 <_write_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	4c07      	ldr	r4, [pc, #28]	; (80095a4 <_write_r+0x20>)
 8009588:	4605      	mov	r5, r0
 800958a:	4608      	mov	r0, r1
 800958c:	4611      	mov	r1, r2
 800958e:	2200      	movs	r2, #0
 8009590:	6022      	str	r2, [r4, #0]
 8009592:	461a      	mov	r2, r3
 8009594:	f7f7 fd99 	bl	80010ca <_write>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_write_r+0x1e>
 800959c:	6823      	ldr	r3, [r4, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_write_r+0x1e>
 80095a0:	602b      	str	r3, [r5, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	20000408 	.word	0x20000408

080095a8 <_close_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4c06      	ldr	r4, [pc, #24]	; (80095c4 <_close_r+0x1c>)
 80095ac:	2300      	movs	r3, #0
 80095ae:	4605      	mov	r5, r0
 80095b0:	4608      	mov	r0, r1
 80095b2:	6023      	str	r3, [r4, #0]
 80095b4:	f7f8 fd65 	bl	8002082 <_close>
 80095b8:	1c43      	adds	r3, r0, #1
 80095ba:	d102      	bne.n	80095c2 <_close_r+0x1a>
 80095bc:	6823      	ldr	r3, [r4, #0]
 80095be:	b103      	cbz	r3, 80095c2 <_close_r+0x1a>
 80095c0:	602b      	str	r3, [r5, #0]
 80095c2:	bd38      	pop	{r3, r4, r5, pc}
 80095c4:	20000408 	.word	0x20000408

080095c8 <_fstat_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	4c07      	ldr	r4, [pc, #28]	; (80095e8 <_fstat_r+0x20>)
 80095cc:	2300      	movs	r3, #0
 80095ce:	4605      	mov	r5, r0
 80095d0:	4608      	mov	r0, r1
 80095d2:	4611      	mov	r1, r2
 80095d4:	6023      	str	r3, [r4, #0]
 80095d6:	f7f8 fd60 	bl	800209a <_fstat>
 80095da:	1c43      	adds	r3, r0, #1
 80095dc:	d102      	bne.n	80095e4 <_fstat_r+0x1c>
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	b103      	cbz	r3, 80095e4 <_fstat_r+0x1c>
 80095e2:	602b      	str	r3, [r5, #0]
 80095e4:	bd38      	pop	{r3, r4, r5, pc}
 80095e6:	bf00      	nop
 80095e8:	20000408 	.word	0x20000408

080095ec <_isatty_r>:
 80095ec:	b538      	push	{r3, r4, r5, lr}
 80095ee:	4c06      	ldr	r4, [pc, #24]	; (8009608 <_isatty_r+0x1c>)
 80095f0:	2300      	movs	r3, #0
 80095f2:	4605      	mov	r5, r0
 80095f4:	4608      	mov	r0, r1
 80095f6:	6023      	str	r3, [r4, #0]
 80095f8:	f7f8 fd5f 	bl	80020ba <_isatty>
 80095fc:	1c43      	adds	r3, r0, #1
 80095fe:	d102      	bne.n	8009606 <_isatty_r+0x1a>
 8009600:	6823      	ldr	r3, [r4, #0]
 8009602:	b103      	cbz	r3, 8009606 <_isatty_r+0x1a>
 8009604:	602b      	str	r3, [r5, #0]
 8009606:	bd38      	pop	{r3, r4, r5, pc}
 8009608:	20000408 	.word	0x20000408

0800960c <_lseek_r>:
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	4c07      	ldr	r4, [pc, #28]	; (800962c <_lseek_r+0x20>)
 8009610:	4605      	mov	r5, r0
 8009612:	4608      	mov	r0, r1
 8009614:	4611      	mov	r1, r2
 8009616:	2200      	movs	r2, #0
 8009618:	6022      	str	r2, [r4, #0]
 800961a:	461a      	mov	r2, r3
 800961c:	f7f8 fd58 	bl	80020d0 <_lseek>
 8009620:	1c43      	adds	r3, r0, #1
 8009622:	d102      	bne.n	800962a <_lseek_r+0x1e>
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	b103      	cbz	r3, 800962a <_lseek_r+0x1e>
 8009628:	602b      	str	r3, [r5, #0]
 800962a:	bd38      	pop	{r3, r4, r5, pc}
 800962c:	20000408 	.word	0x20000408

08009630 <memmove>:
 8009630:	4288      	cmp	r0, r1
 8009632:	b510      	push	{r4, lr}
 8009634:	eb01 0302 	add.w	r3, r1, r2
 8009638:	d807      	bhi.n	800964a <memmove+0x1a>
 800963a:	1e42      	subs	r2, r0, #1
 800963c:	4299      	cmp	r1, r3
 800963e:	d00a      	beq.n	8009656 <memmove+0x26>
 8009640:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009644:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009648:	e7f8      	b.n	800963c <memmove+0xc>
 800964a:	4283      	cmp	r3, r0
 800964c:	d9f5      	bls.n	800963a <memmove+0xa>
 800964e:	1881      	adds	r1, r0, r2
 8009650:	1ad2      	subs	r2, r2, r3
 8009652:	42d3      	cmn	r3, r2
 8009654:	d100      	bne.n	8009658 <memmove+0x28>
 8009656:	bd10      	pop	{r4, pc}
 8009658:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800965c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009660:	e7f7      	b.n	8009652 <memmove+0x22>

08009662 <__malloc_lock>:
 8009662:	4770      	bx	lr

08009664 <__malloc_unlock>:
 8009664:	4770      	bx	lr

08009666 <_realloc_r>:
 8009666:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009668:	4607      	mov	r7, r0
 800966a:	4614      	mov	r4, r2
 800966c:	460e      	mov	r6, r1
 800966e:	b921      	cbnz	r1, 800967a <_realloc_r+0x14>
 8009670:	4611      	mov	r1, r2
 8009672:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009676:	f7ff bc27 	b.w	8008ec8 <_malloc_r>
 800967a:	b922      	cbnz	r2, 8009686 <_realloc_r+0x20>
 800967c:	f7ff fbd6 	bl	8008e2c <_free_r>
 8009680:	4625      	mov	r5, r4
 8009682:	4628      	mov	r0, r5
 8009684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009686:	f000 f827 	bl	80096d8 <_malloc_usable_size_r>
 800968a:	42a0      	cmp	r0, r4
 800968c:	d20f      	bcs.n	80096ae <_realloc_r+0x48>
 800968e:	4621      	mov	r1, r4
 8009690:	4638      	mov	r0, r7
 8009692:	f7ff fc19 	bl	8008ec8 <_malloc_r>
 8009696:	4605      	mov	r5, r0
 8009698:	2800      	cmp	r0, #0
 800969a:	d0f2      	beq.n	8009682 <_realloc_r+0x1c>
 800969c:	4631      	mov	r1, r6
 800969e:	4622      	mov	r2, r4
 80096a0:	f7fe ffac 	bl	80085fc <memcpy>
 80096a4:	4631      	mov	r1, r6
 80096a6:	4638      	mov	r0, r7
 80096a8:	f7ff fbc0 	bl	8008e2c <_free_r>
 80096ac:	e7e9      	b.n	8009682 <_realloc_r+0x1c>
 80096ae:	4635      	mov	r5, r6
 80096b0:	e7e7      	b.n	8009682 <_realloc_r+0x1c>
	...

080096b4 <_read_r>:
 80096b4:	b538      	push	{r3, r4, r5, lr}
 80096b6:	4c07      	ldr	r4, [pc, #28]	; (80096d4 <_read_r+0x20>)
 80096b8:	4605      	mov	r5, r0
 80096ba:	4608      	mov	r0, r1
 80096bc:	4611      	mov	r1, r2
 80096be:	2200      	movs	r2, #0
 80096c0:	6022      	str	r2, [r4, #0]
 80096c2:	461a      	mov	r2, r3
 80096c4:	f7f8 fcc0 	bl	8002048 <_read>
 80096c8:	1c43      	adds	r3, r0, #1
 80096ca:	d102      	bne.n	80096d2 <_read_r+0x1e>
 80096cc:	6823      	ldr	r3, [r4, #0]
 80096ce:	b103      	cbz	r3, 80096d2 <_read_r+0x1e>
 80096d0:	602b      	str	r3, [r5, #0]
 80096d2:	bd38      	pop	{r3, r4, r5, pc}
 80096d4:	20000408 	.word	0x20000408

080096d8 <_malloc_usable_size_r>:
 80096d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096dc:	1f18      	subs	r0, r3, #4
 80096de:	2b00      	cmp	r3, #0
 80096e0:	bfbc      	itt	lt
 80096e2:	580b      	ldrlt	r3, [r1, r0]
 80096e4:	18c0      	addlt	r0, r0, r3
 80096e6:	4770      	bx	lr

080096e8 <_init>:
 80096e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ea:	bf00      	nop
 80096ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ee:	bc08      	pop	{r3}
 80096f0:	469e      	mov	lr, r3
 80096f2:	4770      	bx	lr

080096f4 <_fini>:
 80096f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096f6:	bf00      	nop
 80096f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fa:	bc08      	pop	{r3}
 80096fc:	469e      	mov	lr, r3
 80096fe:	4770      	bx	lr
